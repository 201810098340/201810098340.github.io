<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot实现逻辑删除</title>
    <url>/2020/08/17/springboot%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<p>采用Spring Boot框架搭建，编写接口实现批量删除</p>
<a id="more"></a>

<h1 id="springboot实现批量删除"><a href="#springboot实现批量删除" class="headerlink" title="springboot实现批量删除"></a>springboot实现批量删除</h1><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table student</span><br><span class="line">(</span><br><span class="line">    id       int auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    name     varchar(12)   null,</span><br><span class="line">    classes  varchar(12)   null,</span><br><span class="line">    score    int           null,</span><br><span class="line">    isdelete int default 1 null</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="2-编写studentmapper-xml文件"><a href="#2-编写studentmapper-xml文件" class="headerlink" title="2.编写studentmapper.xml文件"></a>2.编写studentmapper.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.centersystem.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.springboot.centersystem.entity.Student"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"classes"</span> <span class="attr">property</span>=<span class="string">"classes"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"score"</span> <span class="attr">property</span>=<span class="string">"score"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"isdelete"</span> <span class="attr">property</span>=<span class="string">"isdelete"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteid"</span> <span class="attr">parameterType</span>=<span class="string">"com.springboot.centersystem.entity.Student"</span>&gt;</span></span><br><span class="line">            delete from student</span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-编写实体类"><a href="#3-编写实体类" class="headerlink" title="3.编写实体类"></a>3.编写实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 班级</span></span><br><span class="line">    <span class="keyword">private</span> String classes;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-编写studentmapper"><a href="#4-编写studentmapper" class="headerlink" title="4.编写studentmapper"></a>4.编写studentmapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.springboot.centersystem.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteid</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-编写student-service"><a href="#5-编写student-service" class="headerlink" title="5.编写student.service"></a>5.编写student.service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.springboot.centersystem.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteid</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-编写service实现类"><a href="#6-编写service实现类" class="headerlink" title="6.编写service实现类"></a>6.编写service实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteid</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> studentMapper.deleteid(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-编写controller"><a href="#7-编写controller" class="headerlink" title="7.编写controller"></a>7.编写controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/poi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"deleteid"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteid</span><span class="params">(@RequestBody <span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">        studentService.deleteid(a);</span><br><span class="line">       </span><br><span class="line">    &#125; <span class="comment">//[5,6]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"删除成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8.测试"></a>8.测试</h2><p>首先看到数据库两条数据</p>
<p><img src="https://img-blog.csdnimg.cn/20200816160454881.png#pic_center" alt="image-20200816155336439"></p>
<p>接着打开postman进行测试</p>
<p><img src="https://img-blog.csdnimg.cn/2020081616051588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM4OTU3Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="image-20200816155653335"></p>
<p>查看数据库数据已经删除了</p>
<p><img src="https://img-blog.csdnimg.cn/20200816160542349.png#pic_center" alt="image-20200816155737233"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java后端</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo编写文章</title>
    <url>/2021/01/31/hexo%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>搭建的Hexo静态博客，如何编写文章呢？</p>
<a id="more"></a>

<h1 id="hexo编写文章"><a href="#hexo编写文章" class="headerlink" title="hexo编写文章"></a>hexo编写文章</h1><h2 id="一-创建文章"><a href="#一-创建文章" class="headerlink" title="一.创建文章"></a>一.创建文章</h2><p>在博客目录下</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95.PNG" alt=""></p>
<p>右键git bash，输入<code>hexo new &quot;文章名&quot;</code>创建文章，会在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source&#x2F;_post&#96; 文件夹下创建一个文件，命名为：&#96;文章名.md</span><br></pre></td></tr></table></figure>

<p>这个文件就是将要发布到网站上的原始文件，用于记录文章内容</p>
<h2 id="二-markdown"><a href="#二-markdown" class="headerlink" title="二.markdown"></a>二.markdown</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>Markdown已经成为目前世界上最流行的用于书写博客的语言。在这里博主强烈的推荐给大家一款简洁易用的Markdown 编辑器 —— Typora，这里附上 Typora 的下载地址：<a href="https://www.typora.io/，" target="_blank" rel="noopener">https://www.typora.io/，</a></p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><h4 id="（1）标题"><a href="#（1）标题" class="headerlink" title="（1）标题"></a>（1）标题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题 </span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">（这里注意#和文字之间有一个空格）</span><br></pre></td></tr></table></figure>



<h4 id="（2）粗体、斜体、删除线和下划线"><a href="#（2）粗体、斜体、删除线和下划线" class="headerlink" title="（2）粗体、斜体、删除线和下划线"></a>（2）粗体、斜体、删除线和下划线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>



<h4 id="（3）引用块"><a href="#（3）引用块" class="headerlink" title="（3）引用块"></a>（3）引用块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 文字引用</span><br></pre></td></tr></table></figure>



<h4 id="（4）代码块"><a href="#（4）代码块" class="headerlink" title="（4）代码块"></a>（4）代码块</h4><p><img src="https://gitee.com/summer502/img/raw/master/images/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%88%AA%E5%9B%BE.PNG" alt=""></p>
<h4 id="（5）公式块"><a href="#（5）公式块" class="headerlink" title="（5）公式块"></a>（5）公式块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">数学公式</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>



<h4 id="（6）分割线"><a href="#（6）分割线" class="headerlink" title="（6）分割线"></a>（6）分割线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：---</span><br><span class="line">方法二：+++</span><br><span class="line">方法三：***</span><br></pre></td></tr></table></figure>



<h4 id="（7）列表"><a href="#（7）列表" class="headerlink" title="（7）列表"></a>（7）列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表项</span><br><span class="line"></span><br><span class="line">* 无序列表项</span><br><span class="line"></span><br><span class="line">+ 无序列表项</span><br><span class="line"></span><br><span class="line">- 无序列表项</span><br></pre></td></tr></table></figure>



<h4 id="（8）表格"><a href="#（8）表格" class="headerlink" title="（8）表格"></a>（8）表格</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头1|表头2</span><br><span class="line">-|-|-</span><br><span class="line">内容11|内容12</span><br><span class="line">内容21|内容22</span><br></pre></td></tr></table></figure>



<h4 id="（9）超链接"><a href="#（9）超链接" class="headerlink" title="（9）超链接"></a>（9）超链接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：[链接文字](链接地址 &quot;链接描述&quot;)</span><br><span class="line">例如：[示例链接](https:&#x2F;&#x2F;www.example.com&#x2F; &quot;示例链接&quot;)</span><br><span class="line">方法二：&lt;链接地址&gt;</span><br><span class="line">例如：&lt;https:&#x2F;&#x2F;www.example.com&#x2F;&gt;</span><br></pre></td></tr></table></figure>



<h4 id="（10）图片"><a href="#（10）图片" class="headerlink" title="（10）图片"></a>（10）图片</h4><p><img src="https://gitee.com/summer502/img/raw/master/images/%E5%9B%BE%E7%89%87%E7%A4%BA%E4%BE%8B%E6%88%AA%E5%9B%BE.PNG" alt=""></p>
<p><strong>说明</strong>：在 Hexo中 插入图片时，请按照以下的步骤进行设置</p>
<ol>
<li><p>将 <strong>站点配置文件</strong> 中的 <code>post_asset_folder</code> 选项的值设置为 true</p>
</li>
<li><p>在站点文件夹中打开 git bash，输入命令 <code>npm install hexo-asset-image --save</code> 安装插件</p>
</li>
<li><p>这样，当使用 <code>hexo new title</code> 创建文章时，将同时在 <code>source/_post</code> 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可</p>
<p>例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句 <code>![示例图片](title/example.PNG &quot;示例图片&quot;)</code> 添加图片</p>
</li>
<li><p>当然也可以使用图床服务：typora+picgo+gitee:参考链接：</p>
<p><a href="https://www.cnblogs.com/windowsxpxp/p/12694524.html" target="_blank" rel="noopener">https://www.cnblogs.com/windowsxpxp/p/12694524.html</a></p>
</li>
</ol>
<h2 id="三-文章的设置"><a href="#三-文章的设置" class="headerlink" title="三.文章的设置"></a>三.文章的设置</h2><p>1.创建的文章内的开头的模板设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: hexo编写文章</span><br><span class="line">date: 2021-01-31 14:49:43</span><br><span class="line">tags: hexo</span><br><span class="line">categories: hexo</span><br></pre></td></tr></table></figure>

<p>注意以上的属性和值之间必须有空格空出</p>
<p>title自动创建，表示文章的名字</p>
<p>date自动创建，表示创建的日期</p>
<p>tags手动创建,表示该文章的标签，若有多个可以这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags: [tag1, tag2, ...] 或者</span><br><span class="line">tags:</span><br><span class="line"> -tag1</span><br><span class="line"> -tag2</span><br></pre></td></tr></table></figure>

<p>categories手动创建，表示文章的分类</p>
<p>2.在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容</p>
<p>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简</p>
<p>这时，我们只需在文章中使用<!--more--> 标志即可，表示只会显示标志前面的内容</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: springboot实现逻辑删除</span><br><span class="line">date: 2020-08-17 13:22:21</span><br><span class="line">tags: springboot</span><br><span class="line">categories: java</span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<p>只会显示more之间的内容。</p>
<p>3.部署发布</p>
<p>采用hexo g部署</p>
<p>hexo s进行本地测试</p>
<p>hexo d发布</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>window快捷键及dos命令</title>
    <url>/2021/01/31/window%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8Ados%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录一下window常用的快捷键以及一些dos命令</p>
<a id="more"></a>

<h2 id="一-常用快捷键"><a href="#一-常用快捷键" class="headerlink" title="一.常用快捷键"></a>一.常用快捷键</h2><p><strong>Ctrl+a</strong> 全选</p>
<p><strong>Ctrl+c</strong> 复制</p>
<p><strong>Ctrl+d</strong> 删除</p>
<p><strong>Ctrl+f</strong> 查找 </p>
<p><strong>Ctrl+k</strong> 设置为超链接 </p>
<p><strong>Ctrl+s</strong> 保存 </p>
<p><strong>Ctrl+u</strong> 下划线 </p>
<p><strong>Ctrl+v</strong>  粘贴 </p>
<p><strong>Ctrl+x</strong> 剪切</p>
<p><strong>Ctrl+y</strong>反撤销</p>
<p><strong>Ctrl+z</strong>撤销</p>
<p><strong>Ctrl+Shift+Delete</strong> 打开浏览器清理缓存</p>
<p><strong>Win+E</strong> 打开“我的电脑”</p>
<p><strong>Win+R</strong>打开“运行窗口”</p>
<p><strong>f2</strong> 重命名</p>
<p><strong>Ctrl+Alt+Delete</strong>打开后台管理器</p>
<h2 id="二-打开CMD的方式"><a href="#二-打开CMD的方式" class="headerlink" title="二.打开CMD的方式"></a>二.打开CMD的方式</h2><ol>
<li><p>开始菜单+系统+命令提示符</p>
</li>
<li><p>Win+R 输入cmd打开控制台（推荐使用）</p>
</li>
<li><p>资源管理器（我的电脑的任意目录）的地址栏输入cmd</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/cmd%E6%88%AA%E5%9B%BE.PNG" alt=""></p>
</li>
</ol>
<h2 id="三-常见Dos命令"><a href="#三-常见Dos命令" class="headerlink" title="三.常见Dos命令"></a>三.常见Dos命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">盘符切换    盘符名称+冒号（英文输入法状态下）</span><br><span class="line">产看当前目录下的所有文件     dir</span><br><span class="line">切换目录   <span class="built_in">cd</span>+空格+目录名称</span><br><span class="line">         <span class="built_in">cd</span>+/d+空格+盘符名称+冒号 （/d可以实现跨盘符操作）</span><br><span class="line">         <span class="built_in">cd</span>+/d+空格+盘符名称+冒号+\+文件夹名称（可以实现在某一个盘符内跳转到另外一个盘符的制定文件夹下）          <span class="built_in">cd</span>+空格+..  (返回上一级)</span><br><span class="line">清理屏幕    cls</span><br><span class="line">退出终端    <span class="built_in">exit</span></span><br><span class="line">查看电脑IP  ipconfig</span><br><span class="line">打开应用    calc  计算器</span><br><span class="line">            mapaint  绘图工具</span><br><span class="line">            notepad  记事本</span><br><span class="line">ping命令    ping+空格+某网站的网址</span><br><span class="line">            如：ping www.baidu.com</span><br><span class="line">注：在非cmd窗口下复制的内容，在cmd窗口下，鼠标右键单击即可，即为粘贴</span><br><span class="line">创建文件夹   md+空格+文件夹名称</span><br><span class="line">创建文件     <span class="built_in">cd</span>+&gt;+文件名称及后缀</span><br><span class="line">删除文件     del+空格+文件名称及后缀</span><br><span class="line">删除文件夹    rd+空格+文件夹名称</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC学习</title>
    <url>/2021/02/01/JDBC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>JDBC就是用了让JAVA代码能更好的与数据库连接而由sun公司推出的一套java应用程序访问数据库的技术规范。，使用JDBC需要几个步骤，同时对于增删改查也分为两种不同的操作，为了避免设置拼串时可能出现异常，使用preparedStatement进行预处理，为了减少代码量，可以将相同的代码封装到一个工具类内。</p>
<a id="more"></a>

<h2 id="一、概述："><a href="#一、概述：" class="headerlink" title="一、概述："></a>一、概述：</h2><p>　　JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。是Java访问数据库的标准规范</p>
<p>　　JDBC提供了一种基准,据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。</p>
<p>　　DBC需要连接驱动，驱动是两个设备要进行通信，满足一定通信数据格式，数据格式由设备提供商规定，设备提供商为设备提供驱动软件，通过软件可以与该设备进行通信。</p>
<h2 id="二、原理："><a href="#二、原理：" class="headerlink" title="二、原理："></a>二、原理：</h2><p>　　Java提供访问数据库规范称为JDBC，而生产厂商提供规范的实现类称为驱动。</p>
<p>　　JDBC是接口，驱动是接口的实现类，没有驱动将无法完成数据库连接，从而不能操作数据库！每个数据库厂商都需要提供自己的驱动，用来连接自己公司的数据库，也就是说驱动一般都由数据库生成厂商提供。</p>
<h2 id="三、开发步骤："><a href="#三、开发步骤：" class="headerlink" title="三、开发步骤："></a>三、开发步骤：</h2><p>​        1、导入驱动包</p>
<p>​                        新建java项目，在项目中新建libs文件夹并向其中添加mysql驱动包并右键build  path</p>
<p>​                        <img src="https://gitee.com/summer502/img/raw/master/images/20210201114418.PNG" alt=""></p>
<p>　　2、注册驱动.</p>
<p>　　3、获得连接.</p>
<p>　　4、获得语句执行平台</p>
<p>　　5、执行sql语句</p>
<p>　　6、处理结果</p>
<p>　　7、释放资源.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动(包名+类名）</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">        String url=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"</span>;</span><br><span class="line">        String user=<span class="string">"root"</span>;</span><br><span class="line">        String password=<span class="string">"root"</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="comment">//System.out.println(conn);报地址为正确sql服务关了可能报错</span></span><br><span class="line">        <span class="comment">//3.获取语句执行平台：</span></span><br><span class="line">        Statement sta=conn.createStatement();</span><br><span class="line">        <span class="comment">//4.执行SQL语句：增-----一套语句执行一句sql语句 返回的是一个Int值，是指执行了几行</span></span><br><span class="line">        String sql=<span class="string">"insert into sort(sname) values('小红')"</span>;</span><br><span class="line">        <span class="keyword">int</span> row=sta.executeUpdate(sql);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">        <span class="comment">//6.释放资源(先开后关)</span></span><br><span class="line">        sta.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1、导入驱动JAR包："><a href="#1、导入驱动JAR包：" class="headerlink" title="1、导入驱动JAR包："></a>1、导入驱动JAR包：</h3><p>　　创建lib目录，用于存放当前项目需要的所有jar包</p>
<p>　　选择jar包，右键执行build path / Add to Build Path</p>
<h3 id="2、注册驱动：Class-forName-“com-mysql-jdbc-Driver”"><a href="#2、注册驱动：Class-forName-“com-mysql-jdbc-Driver”" class="headerlink" title="2、注册驱动：Class.forName(“com.mysql.jdbc.Driver”);"></a>2、注册驱动：Class.forName(“com.mysql.jdbc.Driver”);</h3><h3 id="3、获得链接："><a href="#3、获得链接：" class="headerlink" title="3、获得链接："></a>3、获得链接：</h3><p>jdbc:mysql://localhost:3306/test</p>
<p>JDBC规定url的格式由三部分组成，每个部分中间使用冒号分隔。</p>
<p> 第一部分是jdbc，这是固定的；</p>
<p> 第二部分是数据库名称；</p>
<p> 第三部分是由数据库厂商规定的，我们需要了解每个数据库厂商的要求，mysql的第三部分分别由数据库服务器的IP地址（localhost==127.0.0.1）、端口号（3306），以及数据库名称(test)组成。</p>
<h3 id="4、获得语句执行平台："><a href="#4、获得语句执行平台：" class="headerlink" title="4、获得语句执行平台："></a>4、获得语句执行平台：</h3><p>常用方法：</p>
<p>① int executeUpdate(String sql); –执行insert 、update、 delete语句.返回执行的行数int值。所有的增删改都执行这个语句</p>
<p>② ResultSet  executeQuery(String sql); –执行select语句.返回ResultSet的结果集对象（二维表格）</p>
<p>③ boolean execute(String sql); –执行select返回true 执行其他的语句返回false.（不推荐使用）</p>
<h3 id="5、处理结果集：（执行insert、update、delete无需处理）"><a href="#5、处理结果集：（执行insert、update、delete无需处理）" class="headerlink" title="5、处理结果集：（执行insert、update、delete无需处理）"></a>5、处理结果集：（执行insert、update、delete无需处理）</h3><p>　　ResultSet实际上就是一张二维的表格，我们可以调用其boolean next()方法指向某行记录，当第一次调用next()方法时，便指向第一行记录的位置，这时就可以使用ResultSet提供的getXXX(int col)方法(与索引从0开始不同个，列从1开始)来获取指定列的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rs.next();&#x2F;&#x2F;指向第一行</span><br><span class="line">rs.getInt(1);&#x2F;&#x2F;获取第一行第一列的数据</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">                <span class="comment">//1.注册驱动(静态方法)(包名+类名）</span></span><br><span class="line">                Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">                <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">                String url=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;ServerTimeZone=utf8"</span>;</span><br><span class="line">                String user=<span class="string">"root"</span>;</span><br><span class="line">                String password=<span class="string">"root"</span>;</span><br><span class="line">                Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">                <span class="comment">//System.out.println(conn);报地址为正确sql服务关了可能报错</span></span><br><span class="line">                <span class="comment">//3.获取语句执行平台：</span></span><br><span class="line">                Statement sta=conn.createStatement();</span><br><span class="line">                <span class="comment">//4.执行sql语句</span></span><br><span class="line">                String sql=<span class="string">"select * from sort"</span>;</span><br><span class="line">                ResultSet rs=sta.executeQuery(sql);</span><br><span class="line">                <span class="comment">//5.处理结果集(括号里一般是第1列、第2列，但是可以写字段名)</span></span><br><span class="line">                ArrayList&lt;Sort&gt; arr=<span class="keyword">new</span> ArrayList&lt;Sort&gt;();</span><br><span class="line">                <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(rs.getInt("sid")+"..."+rs.getString("sname"));</span></span><br><span class="line">                    Sort sort=<span class="keyword">new</span> Sort();</span><br><span class="line">                    sort.setSid(rs.getInt(<span class="string">"sid"</span>));</span><br><span class="line">                    sort.setSname(rs.getString(<span class="string">"sname"</span>));</span><br><span class="line">                    arr.add(sort);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(arr);</span><br><span class="line">                <span class="comment">//6.释放资源</span></span><br><span class="line">                rs.close();</span><br><span class="line">                sta.close();</span><br><span class="line">                conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、释放资源："><a href="#6、释放资源：" class="headerlink" title="6、释放资源："></a>6、释放资源：</h3><p>　　使用后的东西都需要关闭！关闭的顺序是先得到的后关闭，后得到的先关闭。</p>
<h2 id="五、预处理对象："><a href="#五、预处理对象：" class="headerlink" title="五、预处理对象："></a>五、预处理对象：</h2><p>　　使用PreparedStatement预处理对象时，建议每条sql语句所有的实际参数，都使用逗号分隔。</p>
<p>String sql = “insert into sort(sid,sname) values(?,?)”;</p>
<p>PreparedStatement预处理对象代码：</p>
<p>PreparedStatement psmt = conn.prepareStatement(sql)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动(静态方法)(包名+类名）</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">        String url=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"</span>;</span><br><span class="line">        String user=<span class="string">"root"</span>;</span><br><span class="line">        String password=<span class="string">"root"</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="comment">//System.out.println(conn);报地址为正确sql服务关了可能报错</span></span><br><span class="line">        <span class="comment">//3.获取语句执行平台对象：</span></span><br><span class="line">        String sql=<span class="string">"select count(*) from user where uname=? and pwd=?"</span>;</span><br><span class="line">        PreparedStatement pst=conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//4.执行sql语句</span></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请出入用户名："</span>);</span><br><span class="line">        String uname=sc.next();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String pwd=sc.next();</span><br><span class="line">        <span class="comment">//给sql语句的？赋值</span></span><br><span class="line">        pst.setString(<span class="number">1</span>,uname);</span><br><span class="line">        pst.setString(<span class="number">2</span>, pwd);</span><br><span class="line">        ResultSet rs= pst.executeQuery();<span class="comment">//()里不能写sql</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.处理结果集</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            count=rs.getInt(<span class="number">1</span>);<span class="comment">//因为就一列</span></span><br><span class="line">            System.out.println(count);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">            rs.close();</span><br><span class="line">            pst.close();</span><br><span class="line">            conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、JDBC工具类："><a href="#六、JDBC工具类：" class="headerlink" title="六、JDBC工具类："></a>六、JDBC工具类：</h2><p>　　“获得数据库连接”操作，将在以后的增删改查所有功能中都存在，可以封装工具类JDBCUtils。提供获取连接对象的方法，从而达到代码的重复利用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oracle.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">封装工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接对象的方法(静态的）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Connection <span class="title">getConnnections</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1.注册驱动(静态方法)(包名+类名）</span></span><br><span class="line">                    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">                    <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">                    String url=<span class="string">"jdbc:mysql://localhost:3306/java0603?useUnicode=true&amp;characterEncoding=UTF-8"</span>;</span><br><span class="line">                    String user=<span class="string">"root"</span>;</span><br><span class="line">                    String password=<span class="string">"123456"</span>;</span><br><span class="line">                    conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> conn;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement sta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sta!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sta.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement sta,ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sta!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sta.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增分类Sort</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        <span class="comment">//1.获得连接对象</span></span><br><span class="line">        Connection conn=JDBCUtils.getConnnections();</span><br><span class="line">        <span class="comment">//测试下是地址不System.out.println(conn);</span></span><br><span class="line">        <span class="comment">//2.获取语句执行平台</span></span><br><span class="line">        String sql=<span class="string">"insert into sort (sname) values(?)"</span>;</span><br><span class="line">        PreparedStatement pst=conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        pst.setString(<span class="number">1</span>, <span class="string">"打火机"</span>);</span><br><span class="line">        <span class="keyword">int</span> row=pst.executeUpdate();</span><br><span class="line">        System.out.println(row);</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        JDBCUtils.close(conn, pst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、PreparedStatement和Statement的区别-？"><a href="#七、PreparedStatement和Statement的区别-？" class="headerlink" title="七、PreparedStatement和Statement的区别 ？"></a>七、PreparedStatement和Statement的区别 ？</h2><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p>
<p>使用PreparedStatement（预编译对象）可以用来解决sql注入问题，在执行多次插入数据时，Statement需要编译多次执行多次，而PreparedStatement则需要编译一次执行多次</p>
<h2 id="八、Api接口"><a href="#八、Api接口" class="headerlink" title="八、Api接口"></a>八、Api接口</h2><p>​       <strong>DriverManager驱动管理类</strong></p>
<p>​            registDriver(Driver对象)：注册驱动，不推荐使用</p>
<p>​            getConnection(url,user,pwd):获取连接</p>
<p>​        <strong>Connection 连接对象接口</strong></p>
<p>​                      createStatement():生成命令对象</p>
<pre><code>prepareStatement(sql):生成预编译命令对象</code></pre><p>​        <strong>Statement命令对象接口</strong></p>
<p>​                executeUpdate(sql):执行增删改语句，返回受影响的行数</p>
<p>​            executeQuery(sql):执行查询语句，返回结果集</p>
<p>​            execute(sql):执行任意sql语句，返回boolean</p>
<p>​        <strong>PreparedStatement预编译命令对象接口</strong></p>
<p>​             executeUpdate():执行增删改语句，返回受影响的行数</p>
<p>​            executeQuery():执行查询语句，返回结果集</p>
<p>​            execute():执行任意sql语句，返回boolean</p>
<pre><code>setXX(占位符索引，占位符的值)：设置对应索引的占位符的值，类型为XX类型</code></pre><p>​            setObject(占位符索引，占位符的值)：设置对应索引的占位符的值，类型为Object类型</p>
<p>​        <strong>ResultSet结果集对象接口</strong></p>
<p>​            next():下移一行，返回当前行是否有值</p>
<p>​            previous（）：上移一行，返回当前行是否有值</p>
<p>​                        getXX(列索引|列名|别名):返回对应列的值，接收类型为XX</p>
<p>​            getObject(列索引|列名|别名):返回对应列的值，接收类型为Object</p>
<h2 id="九、批处理"><a href="#九、批处理" class="headerlink" title="九、批处理"></a>九、批处理</h2><p>当需要成批插入或者更新记录时。可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。</p>
<p>JDBC的批量处理语句包括下面两个方法：</p>
<p><strong>addBatch</strong>()：添加需要批量处理的SQL语句或参数</p>
<p><strong>executeBatch</strong>()：执行批量处理语句；</p>
<p><strong>clearBatch</strong>():清空批处理包的语句</p>
<p><strong>通常我们会遇到两种批量执行SQL语句的情况：</strong></p>
<p>①多条SQL语句的批量处理</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201122814.PNG" alt=""></p>
<p>②一个SQL语句的批量传参</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201122830.PNG" alt=""></p>
<p><strong>注意：JDBC连接MySQL时，如果要使用批处理功能，请再url中加参数?rewriteBatchedStatements=true</strong></p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBatch</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	没有使用批处理</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		</span><br><span class="line">		String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">		String user = <span class="string">"root"</span>;</span><br><span class="line">		String password = <span class="string">"root"</span>;</span><br><span class="line">		Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        String sql = <span class="string">"INSERT INTO t_department(dname,description) VALUES(?,?)"</span>;</span><br><span class="line">        PreparedStatement st = conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        	st.setString(<span class="number">1</span>, <span class="string">"测试部门"</span> + i);</span><br><span class="line">        	st.setString(<span class="number">2</span>, <span class="string">"测试部门描述"</span>  + i);</span><br><span class="line">        	</span><br><span class="line">        	st.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		st.close();</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	使用批处理</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		</span><br><span class="line">		String url = <span class="string">"jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true"</span>;</span><br><span class="line">		String user = <span class="string">"root"</span>;</span><br><span class="line">		String password = <span class="string">"root"</span>;</span><br><span class="line">		Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        String sql = <span class="string">"INSERT INTO t_department(dname,description) VALUES(?,?)"</span>;</span><br><span class="line">        PreparedStatement st = conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        	st.setString(<span class="number">1</span>, <span class="string">"测试部门"</span> + i);</span><br><span class="line">        	st.setString(<span class="number">2</span>, <span class="string">"测试部门描述"</span>  + i);</span><br><span class="line">        	</span><br><span class="line">        	st.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st.executeBatch();</span><br><span class="line">		</span><br><span class="line">		st.close();</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十、事务"><a href="#十、事务" class="headerlink" title="十、事务"></a>十、事务</h2><p>JDBC程序中当一个连接对象被创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</p>
<p>JDBC程序中为了让多个 SQL 语句作为一个事务执行：（重点）</p>
<p>调用 Connection 对象的 setAutoCommit(false); 以取消自动提交事务</p>
<p>在所有的 SQL 语句都成功执行后，调用 commit(); 方法提交事务</p>
<p>在其中某个操作失败或出现异常时，调用 rollback(); 方法回滚事务</p>
<p>若此时 Connection 没有被关闭, 则需要恢复其自动提交状态 setAutoCommit(true);</p>
<p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1、连接数据库</span></span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">			String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">			String user = <span class="string">"root"</span>;</span><br><span class="line">			String password = <span class="string">"root"</span>;</span><br><span class="line">			conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">			<span class="comment">//设置手动提交</span></span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">			String sql1 = <span class="string">"update t_department set description = ? where did = ?"</span>;</span><br><span class="line">			PreparedStatement pst1 = conn.prepareStatement(sql1);</span><br><span class="line">			pst1.setObject(<span class="number">1</span>, <span class="string">"挣大钱的"</span>);</span><br><span class="line">			pst1.setObject(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">			<span class="keyword">int</span> len1 = pst1.executeUpdate();</span><br><span class="line">			System.out.println(len1&gt;<span class="number">0</span>?<span class="string">"更新部门信息成功"</span>:<span class="string">"更新部门信息失败"</span>);</span><br><span class="line">			pst1.close();</span><br><span class="line">			</span><br><span class="line">			String sql2 = <span class="string">"update t_employee set salary = salary + ? where did = ?"</span>;</span><br><span class="line">			PreparedStatement pst2 = conn.prepareStatement(sql2);</span><br><span class="line">			pst2.setObject(<span class="number">1</span>, <span class="number">20000</span>);</span><br><span class="line">			pst2.setObject(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">			<span class="keyword">int</span> len2 = pst2.executeUpdate();</span><br><span class="line">			System.out.println(len2&gt;<span class="number">0</span>?<span class="string">"更新部门信息成功"</span>:<span class="string">"更新部门信息失败"</span>);</span><br><span class="line">			pst2.close();</span><br><span class="line">			</span><br><span class="line">			conn.commit();</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">					conn.rollback();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="comment">//恢复自动提交</span></span><br><span class="line">					conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">					<span class="comment">//释放连接</span></span><br><span class="line">					conn.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java中级</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb数据库</title>
    <url>/2021/02/01/Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的，它遵循<a href="https://baike.baidu.com/item/CAP%E5%8E%9F%E5%88%99/5712863?fr=aladdin" target="_blank" rel="noopener">CAP原理</a>。</p>
<p>文档的数据结构和JSON基本一样。<br>所有存储在集合中的数据都是BSON格式。<br>BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。</p>
<a id="more"></a>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>MongoDB中的记录是一个文档，它是由字段和值(key=&gt;value)对组成的数据结构。 MongoDB文档与JSON对象相似。 字段的值可能包括其他文档，数组和文档数组。</p>
<p>在mongodb中基本的概念是文档(document)、集合(collection)、数据库(database)。</p>
<table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>Field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>Index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接,MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary  key</td>
<td>主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody></table>
<h2 id="开启mongo进程"><a href="#开启mongo进程" class="headerlink" title="开启mongo进程"></a>开启mongo进程</h2><p>启动：sudo mongod –dbpath /home/ubuntu/mongodb/data –logpath /home/ubuntu/mongodb/log/mongodb.log –logappend &amp;(注意用户名为ubuntu)</p>
<p>查看进程：pgrep mongo -l</p>
<p>开始使用MongoDB：mongo -host 127.0.0.1:27017</p>
<p>进入shell窗口：mongo</p>
<h2 id="开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）"><a href="#开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）" class="headerlink" title="开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）"></a>开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）</h2><p>1、进入mongodb shell</p>
<p>执行命令进入mongodb shell（注意这里mongod的服务已经启动），命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>

<h2 id="MongoDB-创建数据库"><a href="#MongoDB-创建数据库" class="headerlink" title="MongoDB 创建数据库"></a>MongoDB 创建数据库</h2><p>MongoDB 创建数据库的语法格式如下：</p>
<p>use “DATABASE_NAME”</p>
<p>如果数据库不存在，则创建数据库，否则切换到指定数据库。</p>
<p>例如：以下命令创建了数据库 Employee:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Employee;</span><br></pre></td></tr></table></figure>

<p>如果想查看所有数据库，可以使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs;</span><br></pre></td></tr></table></figure>



<p>可以看到，刚创建的数据库 Employee 并不在数据库的列表中， 要显示它，需要向 Employee 数据库插入一些数据。</p>
<p>插入集合 myEmploy，文档{“name”:”google”}，并查看数据库；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createCollection(&#39;myEmploy&#39;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myEmploy.insert(&#123;&quot;name&quot;:&quot;google&quot;&#125;)db.myEmploy.insert(&#123;&quot;name&quot;:&quot;google&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>截图如下：</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130258.png" alt="image-20201028153341256"></p>
<h2 id="MongoDB-删除数据库"><a href="#MongoDB-删除数据库" class="headerlink" title="MongoDB 删除数据库"></a>MongoDB 删除数据库</h2><p>删除当前数据库，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure>



<p>首先，使用 命令查看所有数据库，然后用use切换到数据库Employee，再进行删除操作，最后使用show查看数据库是否删除成功，操作步骤如图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Employee</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<p>截图如下：</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130303.png" alt="image-20201028153815419"></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130308.png" alt="image-20201028153825023"></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130312.png" alt="image-20201028153835638"></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130315.png" alt="image-20201028153844313"></p>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>命令格式：db.createCollection(name, options)</p>
<p>例如在myDB数据库下创建myCollection集合，</p>
<p>执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use myDB</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createCollection(&#39;myCollection&#39;)</span><br></pre></td></tr></table></figure>

<p>查询数据库中所有的集合使用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.getCollectionNames()</span><br></pre></td></tr></table></figure>

<p>对集合重命名使用renameCollection方法，重命名为 myColl 如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.renameCollection(&#39;myColl&#39;)</span><br></pre></td></tr></table></figure>

<p>删除集合，然后查看集合状态，如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.drop()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.status()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>java命名规范</title>
    <url>/2021/02/02/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="java命名规范"><a href="#java命名规范" class="headerlink" title="java命名规范"></a>java命名规范</h1><p>记录一下java常见的一些命名规范，命名规范真的很重要，当你的项目给别人用的时候，一旦你的命名不规范，别人根本就看不懂你写的是什么，此时命名的规范性就显得尤为重要了，方便你也方便别人，何乐而不为呢？科普一波：驼峰命名法（Camel-Case）是电脑程式编写时的一套命名规则（惯例）。驼峰命名法的命名规则可视为一种惯例，并无绝对与强制，为的是增加识别和可读性。</p>
<a id="more"></a>

<h2 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1.命名规范"></a>1.命名规范</h2><p>大驼峰命名（UpperCamelCase）：每个单词的第一个字母大写，其他字母小写。</p>
<p>比如：public class DataBaseUser;</p>
<p>小驼峰命名（lowerCamelCase）：如果仅有一个单词，那么所有字母全部小写，如果是两个及以上的单词组成的名称，那么除了第一个单词是全部小写外，其他但是的首字母大写，其他字母小写。</p>
<p>比如：int myStudentCount;</p>
<h3 id="1-1-包的命名"><a href="#1-1-包的命名" class="headerlink" title="1.1 包的命名"></a>1.1 包的命名</h3><p>包的命名由全部小写的单词组成。</p>
<h3 id="1-2-类的命名"><a href="#1-2-类的命名" class="headerlink" title="1.2 类的命名"></a>1.2 类的命名</h3><p>类的命名遵循大驼峰命名的规则</p>
<h3 id="1-3-接口的命名"><a href="#1-3-接口的命名" class="headerlink" title="1.3 接口的命名"></a>1.3 接口的命名</h3><p>接口命名遵循大驼峰命名的规则，</p>
<h3 id="1-4-变量命名"><a href="#1-4-变量命名" class="headerlink" title="1.4 变量命名"></a>1.4 变量命名</h3><p>变量的命名遵循小驼峰命名的规则，一般是名词</p>
<h3 id="1-5-常量的命名"><a href="#1-5-常量的命名" class="headerlink" title="1.5 常量的命名"></a>1.5 常量的命名</h3><p>常量名称的每个单词都大写，并且每个单词之间通过下划线（_）连接，例如：</p>
<p>Public static final int REQUEST_KEY_CODE =1;</p>
<h3 id="1-6-方法的命名"><a href="#1-6-方法的命名" class="headerlink" title="1.6 方法的命名"></a>1.6 方法的命名</h3><p>方法的命名遵循小驼峰命名的规则，以动词+名词的方式组成，</p>
<p>例如初始化view：initView()</p>
<p>转换为字符串public void toString() </p>
<h3 id="1-7项目名"><a href="#1-7项目名" class="headerlink" title="1.7项目名"></a>1.7项目名</h3><p>全部小写。如：workdesk、jobserver。</p>
<h3 id="1-8属性文件properties"><a href="#1-8属性文件properties" class="headerlink" title="1.8属性文件properties"></a>1.8属性文件properties</h3><p>以下划线隔开。如：errors_zh_CN.properties，hibernate_test.properties</p>
<h3 id="1-9参数的命名"><a href="#1-9参数的命名" class="headerlink" title="1.9参数的命名"></a>1.9参数的命名</h3><p>参数的命名规范和方法的命名规范相同，而且为了避免阅读程序时造成迷惑，请在尽量保证参数名称为一个单词的情况下使参数的命名尽可能明确。</p>
<h2 id="2-格式规范"><a href="#2-格式规范" class="headerlink" title="2. 格式规范"></a><strong>2. 格式规范</strong></h2><h3 id="2-1大括号的使用"><a href="#2-1大括号的使用" class="headerlink" title="2.1大括号的使用"></a>2.1大括号的使用</h3><p>大括号的开始在代码块开始的行尾，结束在代码块同一缩进的行首；</p>
<p>条件语句一定使用大括号；</p>
<p>左大括号前不换行，右大括号前换行，除了if-else，try-catch;</p>
<p>大括号内没有任何代码，不换行。</p>
<h3 id="2-2-空格的使用"><a href="#2-2-空格的使用" class="headerlink" title="2.2 空格的使用"></a>2.2 空格的使用</h3><p>表示分隔时用一个空格；</p>
<p>运算符两边用一个空格隔开；</p>
<p>逗号语句后面如果不换行，也用一个空格。</p>
<h2 id="3-编码风格规范"><a href="#3-编码风格规范" class="headerlink" title="3. 编码风格规范"></a><strong>3.</strong> <strong>编码风格规范</strong></h2><p>3.1程序块要采用缩进风格编写，缩进的空格数为4个即Tab键</p>
<p>3.2多个短语句写在一行，即一行只写一条语句</p>
<p>3.3if, for, do, while, case, switch, default 等语句自占一行，且if, for, do, while等语句的执行语句无论多少都要加括号{}。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础-流程控制</title>
    <url>/2021/02/03/java%E5%9F%BA%E7%A1%80-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Java流程控制"><a href="#Java流程控制" class="headerlink" title="Java流程控制"></a>Java流程控制</h1><ol>
<li><p><strong>用户交互Scanner</strong></p>
</li>
<li><p><strong>顺序结构</strong></p>
</li>
<li><p><strong>选择结构</strong></p>
</li>
<li><p><strong>循环结构</strong></p>
</li>
<li><p><strong>break &amp; continue</strong></p>
</li>
<li><p><strong>练习</strong></p>
<a id="more"></a>

</li>
</ol>
<h2 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h2><ul>
<li><p>之前我们学的基本语法中我们并没有实现程序和人的交互，但是Java给我们提供了这样一个工具类，我们可以获得用户的输入。java.util.Scanner 是Java5 的新特征，<strong>我们可以通过Scanner 类来获取用户的输入。</strong></p>
</li>
<li><p>基本语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过 Scanner 类的next() 与 nextLine() 方法获取输入的字符串，</strong></p>
<p> <strong>在读取前我们一般需要使用 hasNext() 与 hasNextLine() 判断是否还有输入的数据。</strong></p>
</li>
<li><p><strong>next():</strong></p>
<ol>
<li><strong>一定要读取到有效字符后才可以结束输入。</strong></li>
<li><strong>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</strong></li>
<li><strong>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</strong></li>
<li>next()不能得到带有空格的字符串。</li>
</ol>
</li>
<li><p><strong>nestLine():</strong></p>
<ol>
<li><strong>以Enter为结束符也就是说nextLine()方法返回的是输入回车之前的所有字符。</strong></li>
<li><strong>可以获得空白。</strong></li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner ssxxz = <span class="keyword">new</span> Scanner(System.in); <span class="comment">//创建一个扫描器对象，用于接受键盘数据</span></span><br><span class="line">        System.out.println(<span class="string">"请输入："</span>);</span><br><span class="line">            String str = ssxxz.nextLine();<span class="comment">//使用nextLine方式接收</span></span><br><span class="line">            System.out.println(<span class="string">"输出为："</span>+str);<span class="comment">//程序会等待用户输入完毕</span></span><br><span class="line">        <span class="comment">//凡是属于IO流的类，如果不关闭会一直占用资源，要养成好习惯用完就关闭掉</span></span><br><span class="line">        ssxxz.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if判断语句，while循环语句</p>
<p>if</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//从键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">        System.out.println(<span class="string">"请输入整数："</span>);</span><br><span class="line">        <span class="comment">//如果...那么...</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt())&#123;</span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">"整数数据："</span>+i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的不是整数数据！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"请输入小数数据："</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextFloat())&#123;</span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">"小数数据："</span>+f);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的不是小数数据！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>while</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果。</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//和</span></span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算输入了多少个数字</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入数据："</span>);</span><br><span class="line">        <span class="comment">//通过循环判断是否还有输入，并在里面对每一次进行求和和统计</span></span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextDouble())&#123;</span><br><span class="line">            <span class="keyword">double</span> x = scanner.nextDouble();</span><br><span class="line">            m = m +<span class="number">1</span>;<span class="comment">//m++</span></span><br><span class="line">            sum = sum+x;</span><br><span class="line">            System.out.println(<span class="string">"当前是第："</span>+m+<span class="string">"个，sun总数为："</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m+<span class="string">"个数的和为："</span>+sum);</span><br><span class="line">        System.out.println(m+<span class="string">"个数的平均值是："</span>+(sum/m));</span><br><span class="line">      scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul>
<li><strong>JAVA的基本结构就是顺序结构，排除特别指明，否则就是按照顺序一句一句执行。</strong></li>
<li><strong>顺序结构是最简单的算法结构。</strong></li>
<li><strong>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是由若干个依次执行的处理步骤组成的，它是任何一个算法都离不开的一种基本算法结构。</strong></li>
</ul>
<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ul>
<li><strong>if单选择结构</strong></li>
<li><strong>if双选择结构</strong></li>
<li><strong>if多选择结构</strong></li>
<li><strong>嵌套的if结构</strong></li>
<li><strong>switchi多选择结构</strong></li>
</ul>
<h3 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h3><ul>
<li><p>我的很多时候需要去判断一个东西是否可行，然后我们才去执行，这样一个过程在程序中用if语句来表示。</p>
</li>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)｛</span><br><span class="line">    <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">    ｝</span><br></pre></td></tr></table></figure>
</li>
<li><p>语句：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ifDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入咒语："</span>);</span><br><span class="line">        String s = scanner.nextLine();</span><br><span class="line">        <span class="comment">//equals:判断字符串是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">"Hello"</span>))&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"End"</span>);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h3><ul>
<li><p>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（布尔表达式）｛</span><br><span class="line">    <span class="comment">//如果布尔表达式的值为true</span></span><br><span class="line">    ｝<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式的值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入你的成绩："</span>);</span><br><span class="line">        <span class="keyword">int</span> c = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (c&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h3><ul>
<li><p>我们发现刚才的代码不符合时间情况，真实的情况还可能存在ABCD,存在区间多级判断，比如90-100就是A，80-90就是B…等等，在生活中我们很多时候的选择也补仅仅只有两个，所以我们需要一个多选择结构来处理这类问题!</p>
</li>
<li><p>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（布尔表达式<span class="number">1</span>）｛</span><br><span class="line">    <span class="comment">//如果布尔表达式1的值为true执行代码</span></span><br><span class="line">    ｝<span class="keyword">else</span> <span class="keyword">if</span>（布尔表达式<span class="number">2</span>）｛</span><br><span class="line">    <span class="comment">//如果布尔表达式2的值为true执行代码</span></span><br><span class="line">    ｝<span class="keyword">else</span> <span class="keyword">if</span>（布尔表达式<span class="number">3</span>）｛</span><br><span class="line">    <span class="comment">//如果布尔表达式3的值为true执行代码</span></span><br><span class="line">    ｝<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果以上布尔表达式都不为true执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if 语句最多有1个 else 语句，else 语句在所以 else if 语句之后。</p>
<p>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</p>
<p>一旦其中一个 else if 语句检测为 true， 其它的 else if 以及 else 语句都将跳过执行。</p>
</li>
</ul>
<h3 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h3><ul>
<li><p>使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。你可以像 if 语句一样嵌套 else if…else。</p>
</li>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">    <span class="keyword">if</span>（布尔表达式 <span class="number">2</span>）&#123;</span><br><span class="line">        <span class="comment">//如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="switch多选择结果"><a href="#switch多选择结果" class="headerlink" title="switch多选择结果"></a>switch多选择结果</h3><ul>
<li><p>多选择结构还有一个实现方式就是 switch case 语句。</p>
</li>
<li><p>switch case 语句判断一个变量与一个系列值中某个值是否相等，每个值称为一个分支。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//switch 匹配一个具体的值</span></span><br><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>:<span class="comment">//可选，主要功能防止case穿透</span></span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        breck:<span class="comment">//</span></span><br><span class="line">     <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span>:<span class="comment">//可选，当出现无法匹配任何case时，可以用default表达</span></span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> grade = <span class="string">'B'</span>;</span><br><span class="line">     <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">     System.out.println(<span class="string">"优秀"</span>)；</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">     System.out.println(<span class="string">"及格"</span>)；</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">     System.out.println(<span class="string">"一般"</span>)；</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">     System.out.println(<span class="string">"未知等级"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>}</p>
<ul>
<li>switchi 语句中的变量类型可以是：</li>
<li>byte、short、int 或者 chat.</li>
<li><strong>从 Java SE 7开始</strong></li>
<li><strong>switch 支持字符串 String 类型</strong></li>
<li>同时 case 标签必须为字符串常量或字符量</li>
<li>IDEA支持反编译，将class文件丢进去idea进行查看（自动进行反编译）</li>
</ul>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul>
<li>while 循环</li>
<li>do…while 循环</li>
<li>for 循环</li>
<li>在Java5中引入了一种主要用于数组的增强型for循环。</li>
</ul>
<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><ul>
<li><p>while是最基层的循环，它的结构为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>只有布尔表达式为 true,循环就会一直执行下去。</p>
</li>
<li><p><strong>我们大多数情况是会让循环停止下来的，我们需要一个让表达式失败的方式来结束循环。</strong></p>
</li>
<li><p>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</p>
</li>
<li><p>循环条件一直未true就会造成无限循环【死循环】，我们正常的业务编程中应该尽量避免死循环，会影响程序性能或者造成程序卡死崩溃！</p>
<p><strong>计算1+2+3+…+100=？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">whileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            sum = sum+i;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="do-…-while-循环"><a href="#do-…-while-循环" class="headerlink" title="do … while 循环"></a>do … while 循环</h4><ul>
<li><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>
</li>
<li><p>do … while 循环和 while 循环相似，不同的是， do … while 循环至少会执行一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">    <span class="keyword">while</span>(布尔表达式)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>While 和 do-While 的区别：</p>
<ul>
<li>while先判断后执行。dowhile是先执行后判断！</li>
<li>Do … while 总是保证循环体会被至少执行一次！这是他们的主要差别。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">whileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum = sum+i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span>(i&gt;<span class="number">100</span>);</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">            System.out.println(<span class="string">"i="</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最终结果："</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a>For循环</h4><ul>
<li><p>虽然所有循环结构都可以用 while 或者 do…while 表达，但是Java提供了另外一种语句 ——for循环，使一些循环结构变得更加简单。</p>
</li>
<li><p>for循环语句是支持送代的一种通用结构，是最有效，最灵活的循环结构。</p>
</li>
<li><p>for循环执行的次数是在执行前就确定的。</p>
</li>
<li><p>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化；布尔表达式；更新)｛</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">   ｝</span><br></pre></td></tr></table></figure>

<ul>
<li>最先执行初始化步骤，可以声明一种类型，但可初始化一个或者多个循环控制变量，可以是空句。</li>
<li>然后，检测布尔表达式的值，如果是true，循环体被执行，如果为false，循环终止，开始执行循环体后面的语句。</li>
<li>执行一次循环后，更新循环控制变量（送代因子控制循环变量的增减）。</li>
<li>再次检查布尔表达式，循环执行上面的过程。</li>
</ul>
</li>
<li><p>练习1：计算0到100之间的奇数和偶数的和</p>
</li>
<li><p>练习2：用while或者for循环输出1-1000之间能被5整除的数，并且每行输出3个。</p>
</li>
<li><p>练习3：打印九九乘法表</p>
<ol>
<li><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo01</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        <span class="keyword">int</span> oddSum = <span class="number">0</span>;
        <span class="keyword">int</span> evenSum = <span class="number">0</span>;
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">100</span>; i++) {
            <span class="keyword">if</span> (i%<span class="number">2</span>!=<span class="number">0</span>){
                oddSum=oddSum+i;
            }<span class="keyword">else</span> {
                evenSum=evenSum+i; 
            }
        }
        System.out.println(<span class="string">"偶数合计为："</span>+oddSum);
        System.out.println(<span class="string">"奇数合计为："</span>+evenSum);
    }
}

&lt;!--￼<span class="number">17</span>--&gt;

whlie

&lt;!--￼<span class="number">18</span>--&gt;</code></pre>
</li>
<li><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo04</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        System.out.println(<span class="string">"九九乘法表："</span>);
        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) {
            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; i++) {
                System.out.print(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + (i * j)+<span class="string">" "</span>);
            }
            System.out.println();
        }
    }
}

&lt;!--￼<span class="number">19</span>--&gt;</code></pre>
</li>
</ol>
</li>
<li><p>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>
</li>
<li><p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;<span class="comment">//定义了一个数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:numbers)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h4><ul>
<li><p>break 在任何循环语句的主体部分，均可用 break 控制循环的流程。break 用于强行退出循环，不执行循环中剩余的语句。（break语句也在switchi语句中使用）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">30</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"break："</span>+i);<span class="comment">//break强制结束，虽然程序还未到达条件（i&lt;100），但是循环已结束。</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束！"</span>);<span class="comment">//循环外的程序还可以执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下次是否执行循环的判定。</p>
</li>
<li><p>关于 goto 关键字</p>
<ul>
<li>goto 关键字很早就在程序设计语言中出现，尽管 goto 仍是 Java 的一个保留字，但并未在语言中得到正式使用； Java没有 goto 。然而，在 break 和 continue 这两个关键字的身上，我们仍然能看出一些 goto 的影子—带标签的 break 和 continue。</li>
<li>“标签”是指后面跟一个冒号的标识符，例如： label:</li>
<li>对 Java 来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一循环，由于 break 和 continue 关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    outer: <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">101</span>;i&lt;<span class="number">150</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;i/<span class="number">2</span>;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (i%j==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">continue</span> outer;<span class="comment">//满足条件后回到 outer 记录位置从新运行。</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>打印三角形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">5</span>; j &gt;=i; j--) &#123;</span><br><span class="line">                    System.out.print(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=i; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">                    System.out.print(<span class="string">"*"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础-方法及数组</title>
    <url>/2021/02/03/java%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95%E5%8F%8A%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="Java方法详解"><a href="#Java方法详解" class="headerlink" title="Java方法详解"></a>Java方法详解</h1><ol>
<li><strong>何谓方法</strong></li>
<li><strong>方法的定义及调用</strong></li>
<li><strong>方法的重载</strong></li>
<li><strong>命令行传参</strong></li>
<li><strong>可变参数</strong></li>
<li><strong>递归</strong></li>
</ol>
<a id="more"></a>

<h2 id="何谓方法？"><a href="#何谓方法？" class="headerlink" title="何谓方法？"></a>何谓方法？</h2><ul>
<li><p>System.out.println()，那么它是什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//System"类".out“输出对象”.println()“方法”</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Java方法是语句的集合，它们在一起执行一个功能。</p>
<ul>
<li>方法是解决一类问题的步骤的有序组合</li>
<li>方法包含于类或对象中</li>
<li>方法在程序中被创建，在其他地方被引用</li>
</ul>
</li>
<li><p>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成1个功能，这样利于我们后期的扩展。</p>
</li>
<li><p>maim尽量干净简洁，把公共模块提取到外面，利用方法调用。</p>
</li>
<li><p>回顾：方法的命名规则？</p>
<p>加法练习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span><span class="comment">/*代表空类型*/</span> main(String[] args) &#123;</span><br><span class="line">    <span class="comment">//实际参数，实际调用传输给他的参数</span></span><br><span class="line">   <span class="keyword">int</span> sum = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;<span class="comment">//形式参数，用来定义作用的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span><span class="comment">/*返回类型*/</span> add(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;<span class="comment">//返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><ul>
<li><p>Java的方法类似于其它语言的函数，是==一段用于完成特定功能的代码片段，==一般情况下，定义一个方法包含以下语法</p>
</li>
<li><p>==方法包含一个方法头和一个方法体。==下面是一个方法的所有部分：</p>
<ul>
<li><strong>修饰符：</strong>修饰符，这是可以选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li>
<li><strong>返回值类型：</strong>方法可能会返回值，returnValueType 是方法返回值的数据类型，有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字void。</li>
<li><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名。</li>
<li><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。<ul>
<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>
<li>实参：调用方法时实际传给方法的数据。</li>
</ul>
</li>
<li><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名（参数类型 参数名）｛</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值；</span><br><span class="line">    ｝</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>return</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         max(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num1==num2)&#123;</span><br><span class="line">        System.out.println(<span class="string">"数据相等"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num1&gt;num2)&#123;</span><br><span class="line">        result = num1;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num2&gt;num1)&#123;</span><br><span class="line">        result = num2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul>
<li><p>调用方法：对象名.方法名（实参列表）</p>
</li>
<li><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p>
</li>
<li><p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> larger = max(<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果方法返回值是 void ,方法调用一定是一条语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello,kuangshen!"</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>课后拓展了解：值传递（Java）和引用传递。</p>
<p>值传递：使用两个不同的存储单元，执行中，形式参数值改变不会影响实际参数值。</p>
<p>引用传递：实际为引用地址，实际参数和形式参数指向同一地址，执行中形式参数会影响实际参数。</p>
</li>
</ul>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul>
<li><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p>
</li>
<li><p>方法重载的规则：</p>
<ul>
<li>方法名称必须相同。</li>
<li><strong>参数列表必须不同</strong>（个数不同、或类型不同、参数排列顺序不同等）。</li>
<li>方法的返回类型可以相同也可以不相同。</li>
<li>仅仅返回类型不同不足以成为方法的重载。</li>
</ul>
</li>
<li><p>实现理论：</p>
<ul>
<li><p>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     max(<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二整数比大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> max1,<span class="keyword">int</span> max2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (max1==max2)&#123;</span><br><span class="line">        System.out.println(<span class="string">"两值相等"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">if</span> (max1&gt;max2)&#123;</span><br><span class="line">        result = max1;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">if</span> (max2&gt;max1)&#123;</span><br><span class="line">        result = max2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二小数比大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> max1,<span class="keyword">double</span> max2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (max1==max2)&#123;</span><br><span class="line">        System.out.println(<span class="string">"两值相等"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">if</span> (max1&gt;max2)&#123;</span><br><span class="line">        result = max1;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">if</span> (max2&gt;max1)&#123;</span><br><span class="line">        result = max2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三小数比大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> max1,<span class="keyword">double</span> max2,<span class="keyword">double</span> max3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (max1==max2 &amp;&amp; max2==max3)&#123;</span><br><span class="line">        System.out.println(<span class="string">"两值相等"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">if</span> (max1&gt;max2 &amp;&amp; max1&gt;=max3)&#123;</span><br><span class="line">            result = max1;</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (max1&gt;max3 &amp;&amp; max1&gt;=max2)&#123;</span><br><span class="line">        result = max1;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (max2&gt;max1 &amp;&amp; max2&gt;=max3)&#123;</span><br><span class="line">        result = max2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (max2&gt;max3 &amp;&amp; max2&gt;=max1)&#123;</span><br><span class="line">        result = max2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (max3&gt;max1 &amp;&amp; max3&gt;=max2)&#123;</span><br><span class="line">        result = max3;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (max3&gt;max2 &amp;&amp; max3&gt;=max1)&#123;</span><br><span class="line">        result = max3;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h3><ul>
<li><p>有时候你希望运行一个程序时候再传递给他消息。这要靠传递命令行参数给main()函数实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">        System.out.println(<span class="string">"args["</span>+i+<span class="string">"]:"</span>+agrs[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>需要到src目录去执行java文件</strong></p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul>
<li><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p>
</li>
<li><p>在方法声明中，在指定参数类型后加一个省略号（…）。</p>
</li>
<li><p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    printMax(<span class="number">34</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">56.5</span>);</span><br><span class="line">    printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">( <span class="keyword">double</span>... numbers)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers.length ==<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"No argument passed"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt; result)&#123;</span><br><span class="line">            result = numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"The max value is "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul>
<li><p>A 方法调用 B 方法，我们很容易理解！</p>
</li>
<li><p>递归就是：A 方法调用 A 方法！就是自己调用自己</p>
</li>
<li><p>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可貌似出解决过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</p>
</li>
<li><p>递归结构包括两个部分：</p>
<ul>
<li><strong>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</strong></li>
<li><strong>递归体：什么时候需要调用自身方法。</strong></li>
</ul>
</li>
<li><p>递归适合小计算，如果太大量计算容易内存崩溃，死机。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(f(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol>
<li>数组概述</li>
<li>数组声明创建</li>
<li>数组使用</li>
<li>多维数组</li>
<li>Arrays 类</li>
<li>稀疏数组</li>
</ol>
<h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><ul>
<li>数组是相同类型数据的有序集合。</li>
<li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。</li>
<li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li>
</ul>
<h3 id="数组声明创建"><a href="#数组声明创建" class="headerlink" title="数组声明创建"></a>数组声明创建</h3><ul>
<li><p><strong>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar;  <span class="comment">// 首选的方法</span></span><br><span class="line">或</span><br><span class="line">dataType arrayRefVar[]; <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Java 语言使用 new 操作符来创建数组，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的元素是通过索引访问的，数组索引从0开始</p>
</li>
<li><p>获取数组长度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrays.length</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>练习</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums; <span class="comment">//1.首选声明一哥数组</span></span><br><span class="line">    nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">//2.创建一哥数组</span></span><br><span class="line">    <span class="comment">//3.给数组元素中赋值</span></span><br><span class="line">    nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">    nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">    nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">    nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">    nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">    nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">    nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//计算所有元素的和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//获取数组长度：arrays.length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length ; i++)&#123;</span><br><span class="line">        sum = sum + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"总和："</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><ul>
<li>Java内存分析：<br><img src="https://gitee.com/summer502/img/raw/master/images/20210203191830.png" alt="image-20210203191808737"></li>
</ul>
<h3 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h3><ul>
<li><p>静态初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态初始化：创建 + 赋值</span></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态初始化：包含默认初始化，未赋值前为0。</span></span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的默认初始化</p>
<ul>
<li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方法被隐式初始化。</li>
</ul>
</li>
</ul>
<h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul>
<li><p>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</p>
</li>
<li><p>其元素必须是相同类型，不允许出现混合类型。</p>
</li>
<li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</p>
</li>
<li><p>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</p>
<p>数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，</p>
<p><strong>数组对象本身是在堆中的。</strong></p>
</li>
</ul>
<h3 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h3><ul>
<li><p>下标的合法区间：[0,length-1]，如果越界就会报错；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  <span class="comment">//a长度为2，下标表示为a[0]，a[1].</span></span><br><span class="line">    System.out.println(a[<span class="number">2</span>]);<span class="comment">//a[2]以超出设定值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ArraylndexOutOfBoundsException:数组下标越界异常！</p>
</li>
<li><p>小结：</p>
<ul>
<li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li>
<li>数组也是对象。数组元素相当于对象的成员变量</li>
<li>数组长度的确定的，不可变的。如果越界，则报：ArrayindexOutofBounds</li>
</ul>
</li>
</ul>
<h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><ul>
<li><p>普通的For循环</p>
</li>
<li><p>For-Each 循环</p>
</li>
<li><p>数组作方法入参</p>
</li>
<li><p>数组作返回值</p>
<p>练习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = &#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="comment">//打印全部的数组元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;arrays.length ; i++)&#123;</span><br><span class="line">        System.out.println(arrays[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">    <span class="comment">//打印数组元素之和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        sum = sum +arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    System.out.println(<span class="string">"================="</span>);</span><br><span class="line">    <span class="comment">//查找数组内最大元素</span></span><br><span class="line">    <span class="keyword">int</span> max = arrays[<span class="number">0</span>] ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arrays[i])&#123;</span><br><span class="line">            max = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"max="</span>+max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//JDK1.5 没有下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> array : arrays) &#123;</span><br><span class="line">        System.out.print(array+<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"打印数组"</span>);</span><br><span class="line">    printArray(arrays);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"反转数组："</span>);</span><br><span class="line">    <span class="keyword">int</span>[] reverse= reverse(arrays);</span><br><span class="line">    printArray(reverse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] arrays)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] reverse =<span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j=reverse.length-<span class="number">1</span>; i &lt;arrays.length; i++,j--) &#123;</span><br><span class="line">        reverse[j] = arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arrays.length ; i++) &#123;</span><br><span class="line">        System.out.println(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><ul>
<li><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</p>
</li>
<li><p>二维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析：以上二维数组 a 可以看成一个两行五列的数组。</p>
</li>
<li><p>思考：多维数组的使用？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">num[<span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;array.length ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;array[i].length ; j++) &#123;</span><br><span class="line">            System.out.print(array[i][j]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><ul>
<li><p>数组的工具类java.uti.Arrays</p>
</li>
<li><p>由于数组对象本身并没有什么方法可以供我们调用，但是 API 中提供了一个工具类 Arrays 供我们使用，从而可以对数据对象进行一些基本的操作。</p>
</li>
<li><p>查看 JDK 帮助文档</p>
</li>
<li><p>Arrays 类中的方法都是 static 修饰的静态方法，在使用的时候可以直接使用类名进行调用，而“不用”使用对象来调用（注意：是“不用”而不是“不能”）</p>
</li>
<li><p>具有以下常用功能：</p>
<ul>
<li>给数组赋值：通过 fill 方法。</li>
<li>对数组排序：通过 sort 方法，按升序。</li>
<li>比较数据：通过 equals 方法比较数组中元素值是否相等。</li>
<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] a = &#123;<span class="number">3</span>,<span class="number">54</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">57</span>,<span class="number">12</span>,<span class="number">87</span>&#125;;</span><br><span class="line">        <span class="comment">//打印数组元素，Arrays.toString</span></span><br><span class="line">       System.out.println(Arrays.toString(a));</span><br><span class="line">        <span class="comment">//数组排序操作</span></span><br><span class="line">       Arrays.sort(a);</span><br><span class="line">       System.out.println(Arrays.toString(a));</span><br><span class="line">       <span class="comment">//数组填充</span></span><br><span class="line">       Arrays.fill(a,<span class="number">7</span>);</span><br><span class="line">       System.out.println(Arrays.toString(a));</span><br><span class="line">       <span class="comment">//选择填充</span></span><br><span class="line">       Arrays.fill(a,<span class="number">2</span>,<span class="number">6</span>,<span class="number">0</span>);</span><br><span class="line">       System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul>
<li>冒泡排序无疑是最为出名的排序算法之一，总共有八大排序！</li>
<li>冒泡的代码还是相当简单的，两层循环，外层冒泡轮数，里层依次比较，江湖中人人尽皆知。</li>
<li>我们看到嵌套循环，应该立马就可以得出这个算法的时间复杂度为o(n2)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = &#123;<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">76</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">34</span>,<span class="number">76</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] dai = dai(a);</span><br><span class="line">    System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dai(<span class="keyword">int</span>[] suzu)&#123;</span><br><span class="line">    <span class="keyword">int</span>  p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;suzu.length-<span class="number">1</span> ; i++) &#123;<span class="comment">//最大外循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;suzu.length-<span class="number">1</span>-i ; j++) &#123;<span class="comment">//排序循环</span></span><br><span class="line">            <span class="keyword">if</span> (suzu[j+<span class="number">1</span>]&lt;suzu[j])&#123;</span><br><span class="line">                p = suzu[j];</span><br><span class="line">                suzu [j] = suzu[j+<span class="number">1</span>];</span><br><span class="line">                suzu [j+<span class="number">1</span>] = p;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">if</span> (flag == <span class="keyword">false</span>)&#123;<span class="comment">//优化，提前结束。</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> suzu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><ul>
<li>需求：编写五子棋游戏中，有存盘退出或续上盘的功能。</li>
<li>分析问题：因为该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。</li>
<li>解决：稀疏数组</li>
</ul>
<h4 id="稀疏数组介绍"><a href="#稀疏数组介绍" class="headerlink" title="稀疏数组介绍"></a>稀疏数组介绍</h4><ul>
<li>当一个数组中大部分元素为0，或者为同一值得数组时，可以使用稀疏数组来保存该数组。</li>
<li>稀疏数组的处理方式是：<ul>
<li>记录数组一共有几行几列，有多少个不同值。</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];<span class="comment">//0代表空，1代表黑子，2代表白子</span></span><br><span class="line">    array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;<span class="comment">//给黑子定位</span></span><br><span class="line">    array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;<span class="comment">//给白子定位</span></span><br><span class="line">    <span class="comment">//输出原始数据</span></span><br><span class="line">    System.out.println(<span class="string">"原始数据:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">            System.out.print(anInt+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"======================"</span>);</span><br><span class="line">    <span class="comment">//转换为稀疏数组保存</span></span><br><span class="line">    <span class="comment">//1.求和有效值的个数</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"稀疏数组："</span>);</span><br><span class="line">    <span class="comment">//2.创建一个稀疏数组的数组</span></span><br><span class="line">    <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span> [sum+<span class="number">1</span>][<span class="number">3</span>];<span class="comment">//确定第一条稀疏数组的数据</span></span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">0</span>]= <span class="number">11</span>;</span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">1</span>]= <span class="number">11</span>;</span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">2</span>]= sum;</span><br><span class="line">    <span class="comment">//3.将非零的值，存放在稀疏数组中</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;array1.length ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;array1.length ; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"序 "</span>+<span class="string">" 行 "</span>+<span class="string">" 列 "</span>+<span class="string">" 值 "</span>);<span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">int</span> xu = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array2) &#123;</span><br><span class="line">        System.out.print(xu+<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">            <span class="keyword">if</span> (anInt&lt;<span class="number">10</span>)&#123;System.out.print(<span class="string">"  "</span>+anInt+<span class="string">" "</span>);&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; System.out.print(<span class="string">" "</span>+anInt+<span class="string">" "</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xu++;</span><br><span class="line">        System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt;array2.length ; i++) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(array2[i][0]+"\t"</span></span><br><span class="line"><span class="comment">                +array2[i][1]+"\t"</span></span><br><span class="line"><span class="comment">                +array2[i][2]+"\t");</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">    <span class="comment">//转换成原始数据</span></span><br><span class="line">    System.out.println(<span class="string">"还原原始数组："</span>);</span><br><span class="line">    <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];<span class="comment">//确认原始数组整体大小</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;array2.length ; i++) &#123;</span><br><span class="line">        array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]]=array2[i][<span class="number">2</span>];<span class="comment">//将数组的数据赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">            System.out.print(anInt+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础语法</title>
    <url>/2021/02/02/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="java基础语法的总结"><a href="#java基础语法的总结" class="headerlink" title="java基础语法的总结"></a>java基础语法的总结</h1><p>学习了java两年左右了，为了复习的方便，对java基础进行了一些总结，包括以下几个方面：</p>
<ol>
<li><strong>注释、标识符、关键字</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>类型转换</strong></li>
<li><strong>变量、常量</strong></li>
<li><strong>运算符</strong></li>
<li><strong>包机制、JavaDoc</strong></li>
</ol>
<a id="more"></a>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li>注释并不会被执行，是给我们写代码的人看的</li>
<li><strong>书写注释是一个非常好的习惯</strong></li>
<li><strong>平时写代码一定要注意规范</strong></li>
</ul>
<h3 id="java中的注释有三种："><a href="#java中的注释有三种：" class="headerlink" title="java中的注释有三种："></a>java中的注释有三种：</h3><ul>
<li>单行注释 //</li>
<li>多行注释 /* */</li>
<li>文档注释 /** * */</li>
</ul>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><img src="https://gitee.com/summer502/img/raw/master/images/20210202152424.PNG" alt=""></p>
<p>关键字不能起名字</p>
<h4 id="JAVA-所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符"><a href="#JAVA-所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符" class="headerlink" title="JAVA 所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符"></a>JAVA 所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符</h4><h3 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h3><ul>
<li>所有的标识符都应该以字母（A-Z或者a-z），美元符($)，或者下划线（_）开始;”大小写十分敏感“</li>
<li>首字母之后可以是字母（A-Z或者a-z），美元符($)，或者下划线（_）或者数字的任何字符组合;“特殊符号不能使用”</li>
<li><strong>不能使用关键字作为变量名或者方法名。</strong></li>
<li>合法标识符举例：age、 $salary、 _value、 __1_value</li>
<li>非法标识符举例：123abc、 -salary、 #abc</li>
<li>可以使用中文命名，但是一般不建议这样去使用，也不建议使用拼音，很Low</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h3><ul>
<li>要求变量的使用要严格符合规定，所有变量都必须先定以后才能使用；安全性高，但速度慢。</li>
</ul>
<h3 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h3><h3 id="Java的数据类型分为两大类"><a href="#Java的数据类型分为两大类" class="headerlink" title="Java的数据类型分为两大类"></a>Java的数据类型分为两大类</h3><ul>
<li><p><strong>基本类型（primitive type）</strong></p>
<p>整数<br>byte 1字节 8位 java范围2（7）-1到-2（7）<br>short 2字节 很少使用 2（15）-1到-2（15）<br>int 4字节 最常用 2（31）-1到-2（31）<br>long 8字节 长整形 2（63）-1到-2（63）</p>
<p>小数<br>float 4字节<br>double 8字节</p>
<p>其它<br>char 2字节 无符号 2（15）-1<br>boolean 1字节 代表真true or 假false</p>
</li>
</ul>
<p><strong>引用类型（reference type）</strong></p>
<p>String 字符串 数组  类 接口</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210202172715.png" alt="image-20210202172711205"></p>
<h3 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h3><ul>
<li><strong>位（bit）:是计算机 内部数据 储存的最小单位，11001100是一个八位二进制数。</strong></li>
<li><strong>字节（byte）：是计算机中 数据处理 的基本单位，习惯上用大写B来表示。</strong></li>
<li><strong>1B（byte,字节） = 8bit（位）</strong></li>
<li><strong>字符：是指计算机中使用的字母、数字、字和符号</strong></li>
<li>1bit表示1位</li>
<li>1Byte表示一个字节 1B=8b</li>
<li>1024B=1KB</li>
<li>1024KB=1M</li>
<li>1024M=1G</li>
</ul>
<h3 id="整数拓展："><a href="#整数拓展：" class="headerlink" title="整数拓展："></a>整数拓展：</h3><h4 id="进制："><a href="#进制：" class="headerlink" title="进制："></a>进制：</h4><ul>
<li><p>二进制0b （Integer.toBinaryString）二进制代码</p>
<p>1010转换0* 2（0）+1* 2（1）+0* 2（2）+1* 2（3）=0+2+0+8===&gt;10</p>
</li>
<li><p>十进制</p>
<p>(1011)2次方，转换1* 2(3)+0* 2（2）+1* 2（1）+1* 2（0）=8+0+2+1=11（11）10次方</p>
<p>123转换3* 10（0）+2* 10（1）+1* 10（2）=3+20+100</p>
</li>
<li><p>八进制0 (0-7)</p>
<p>067转换7* 8（0）+6* 8（1）=48+7=（55）10次方</p>
</li>
<li><p>十六进制0x 0-9 A-F(10-16) （Integer.toHexString）十六进制代码</p>
<p>转换10* 16（0）+15* 16（1）+14* 16（2）+9* 16（3）=10+240+3584+36864</p>
</li>
</ul>
<h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><h5 id="n进制转换10进制"><a href="#n进制转换10进制" class="headerlink" title="n进制转换10进制"></a>n进制转换10进制</h5><p><strong>公式：第一位* n(0）+第二位* n（1）+…+第x位* n（x-1)次方</strong></p>
<p> 二进制转十进制<br>​ 十进制转二进制<br>​ 十进制 二进制<br>​</p>
<h5 id="10进制转2进制"><a href="#10进制转2进制" class="headerlink" title="10进制转2进制"></a>10进制转2进制</h5><ul>
<li><p><strong>短除法：</strong></p>
<p>35：（35/2=17（余1）/2=8（1）/2=4（0）/2=2（0）/2=1（0）/2=0（1）反读）=100011<br>100011 1* 2（0）+1* 2（1）+0* 2（2）+1* 2（5）=1+2+32=35（正向的）</p>
</li>
<li><p><strong>找次方数：</strong></p>
<p>35：35-2（5）=3-2（1）=1-2（0）=100011（有数的次方上加1，没有的补0）</p>
<p>216：216-2（7）=88-2（6）=24-2（4）=8-2（3）=11011000</p>
</li>
</ul>
<h4 id="负数转换"><a href="#负数转换" class="headerlink" title="负数转换"></a>负数转换</h4><p>java采用二进制补码方式<br>0000 0<br>0001 1<br>0010 2<br>0011 3<br>0100 4<br>0101 5<br>0110 6<br>0111 7<br>把1开头的认为负数<br>1000 -8<br>1001 -7<br>1010 -6<br>1011 -5<br>1100 -4<br>1101 -3<br>1110 -2<br>1111 -1</p>
<h3 id="浮点数拓展："><a href="#浮点数拓展：" class="headerlink" title="浮点数拓展："></a>浮点数拓展：</h3><ul>
<li>float; double 不够准确； 实际过程中浮点数无限且离散的，但是float是有限的，他会自动舍入误差，大约接近，但不等于；</li>
<li>银行等准确的计算工具最好使用BigDecimal 数学工具类</li>
<li><strong>精确的对账最好完全避免使用浮点数进行比较</strong></li>
<li><strong>精确的对账最好完全避免使用浮点数进行比较</strong></li>
<li><strong>精确的对账最好完全避免使用浮点数进行比较</strong></li>
</ul>
<h3 id="字符拓展："><a href="#字符拓展：" class="headerlink" title="字符拓展："></a>字符拓展：</h3><p>所有的字符本质还是数字</p>
<p>Java使用Unicode字符集编码,格式’\u0000’-’\uffff’</p>
<p>（Unicode是世界通用的定长字符集，所有的字符都是16位，2个字节）</p>
<p>对于不方便输入的字符采用转义字符表示</p>
<p><strong>转义字符：</strong></p>
<p>如：’\n’“换行”,‘\t’“空格”，‘\’,‘\b’,‘\r’,‘“’,‘\u4e2d’.<br>数字编码：‘0’：48，‘1’: 49…<br>英文编码：‘A’：65，‘B’：66…<br>小写英文：‘a’ : 97，‘b’：98…</p>
<h4 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h4><ul>
<li><p><strong>由于Java是强类型语言，所有需要有些运算的时候的，需要用到类型转换。</strong></p>
<p><strong>低 ————————————————————–&gt;高</strong></p>
<p>byte， short， char -&gt; int -&gt; long -&gt; float -&gt; double</p>
<p> （小数的优先级高于整数）</p>
</li>
<li><p><strong>运算中，不同类型的数据先转换为同一类型，然后进行运算。</strong></p>
</li>
<li><p><strong>强制类型转换</strong> 高 - - 低</p>
<p>​        int i=128；</p>
<p>​        byte a=（byte）i；（强制转换 把高转低）</p>
</li>
<li><p><strong>自动类型转换</strong></p>
<p>由低到高直接输入，无需强制转换</p>
</li>
<li><p><strong>注意</strong></p>
<ol>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换为不相干的类型</li>
<li>在把高容量转换到低容量的时候，需要强制转换</li>
<li>转换的时候可能存在内存溢出，或者精度问题！</li>
</ol>
</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li><strong>变量是什么：就是可以变化的量！</strong></li>
<li><strong>Java是一种强类型语言，每个变量都必须声明其类型。</strong></li>
<li><strong>Java变量是程序中最基层的存储单元，其要素包括变量名，变量类型和作用域。</strong></li>
<li><strong>注意事项：</strong><ul>
<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li>
<li>变量名必须是合法的标识符。</li>
<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li>
</ul>
</li>
</ul>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul>
<li><p><strong>类变量</strong></p>
<p>在类里，整个类里可以使用，前面必须加static；“static int a = 666;”</p>
</li>
<li><p><strong>实例变量</strong></p>
<p>在类里，从属于对象；“int age;//0”</p>
<p>如果不自行初始化，会赋予这个类型的默认值 0,0.0</p>
<p>布尔值：默认是false；除了基本类型，其他的默认值都是null；</p>
</li>
<li><p><strong>局部变量</strong></p>
<p>在方法中，使用时<strong>必须声明和初始化值</strong>；“int cba = 666;”</p>
</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul>
<li><p><strong>常量（Constant)：初始化（initialize）后不能再改变值！不会变动的值。</strong></p>
</li>
<li><p><strong>所谓常量可以理解成一种特殊的变量，他的值被设定后，在程序运行过程中不允许被改变。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> 常量名 = 值；</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>常量名一般使用大写字符。</strong></p>
</li>
</ul>
<h4 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h4><ul>
<li><strong>所有变量、方法、类名：见名知意</strong></li>
<li><strong>类成员变量：首字母小写和驼峰原则：monthSalary</strong></li>
<li><strong>除了第一个单词外，后面的单词首字母大写</strong></li>
<li><strong>局部变量：首字母小写和驼峰原则</strong></li>
<li><strong>常量：大写字母和下划线 MAX_VALUE</strong></li>
<li><strong>类名：首字母大写和驼峰原则：Man,GoodMan</strong></li>
<li><strong>方法名：首字母小写和驼峰原则：run(),runRun()</strong></li>
</ul>
<p>（可参考我的另一篇博客：java命名规范）</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><p><strong>Java语言支持如下运算符：优先级：最好使用（）</strong></p>
<ul>
<li><p>算术运算符：+，-，*，/，%（余），++（自增），–（自减）；</p>
</li>
<li><p>赋值运算符：=；</p>
</li>
<li><p>关系运算符：&gt; , &lt; , &gt;= , &lt;= , == , != , instanceof；</p>
<p>计算结果一定是true or false；以后会和if一起用</p>
</li>
<li><p>逻辑运算符：&amp;&amp; （与）， ||（或）， ！（非）；</p>
<p>计算结果一定是true or false</p>
</li>
<li><p>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;；</p>
</li>
<li><p>条件运算符：？，：；</p>
</li>
<li><p>扩展赋值运算符：+=，-=，*=，/=；</p>
</li>
</ul>
<h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><p><strong>++（自增）</strong></p>
<p>a++:++在后时，先赋值，再自增；</p>
<p>++a:++在前时，先自增，再赋值；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;<span class="comment">//a++加在后，先给b赋值，再自增；</span></span><br><span class="line">System.out.println(a);<span class="comment">//a=6</span></span><br><span class="line">System.out.println(b);<span class="comment">//b=5</span></span><br><span class="line">================================================</span><br><span class="line"><span class="keyword">int</span> c = ++a;<span class="comment">//++a加在前，先自增，再赋值给c；</span></span><br><span class="line">System.out.println(a);<span class="comment">//a=6;</span></span><br><span class="line">System.out.println(c);<span class="comment">//c=6;</span></span><br></pre></td></tr></table></figure>

<p><strong>–（自减）同理</strong></p>
</li>
<li><p>注意事项：</p>
<ul>
<li>算术运算符使用中，有一个为long或者double类型，其结果为long或者double类型，不然为int类型。</li>
<li>很多运算java，会使用一些很多工具类来操作</li>
</ul>
<h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><ul>
<li>&amp;&amp; （与）：逻辑与运算，两个变量都为真，结果才为true</li>
<li>||（或）：逻辑或运算，两个变量有一个为真，结果才为true</li>
<li>！（非）：如果是真，则变为假，如果是假则变为真</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> q = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>  w = <span class="number">20</span>;</span><br><span class="line">System.out.println(q&lt;w &amp;&amp; w&gt;<span class="number">30</span>);<span class="comment">//（false)，q&lt;w正确，w&gt;30错误,</span></span><br><span class="line"><span class="comment">// 可解释为:q&lt;w与w&gt;30同时两条成立，结果为true，所以最后结果为"false"</span></span><br><span class="line">System.out.println(q&lt;w || w&gt;<span class="number">30</span>);<span class="comment">//（true),q&lt;w正确，w&gt;30错误,</span></span><br><span class="line"><span class="comment">// 可以解释为:q&lt;w或w&gt;30其中一条成立，结果就为true，所以最后结果为"true"</span></span><br><span class="line">System.out.println(!(q&lt;w));<span class="comment">//（false),q&lt;w正确。</span></span><br><span class="line"><span class="comment">// 可以解释为:q应该不（非）小于w，但是实际上q&lt;w，所以为”false"</span></span><br></pre></td></tr></table></figure>

<h5 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h5><p>当前面为“false”时，后面的将不执行，只有“true”才会运行，这就叫短路运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> z = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">boolean</span> x = (z&lt;<span class="number">4</span>)&amp;&amp;(z++&lt;<span class="number">4</span>);<span class="comment">//由于（z&lt;4）不成立为false，（z++&lt;4)就不运行</span></span><br><span class="line">System.out.println(x);<span class="comment">//(false)</span></span><br><span class="line">System.out.println(z);<span class="comment">//(5)由于（z++&lt;4)没有运算，所以z没有自增</span></span><br></pre></td></tr></table></figure>

<h5 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h5><p>&amp; （1）：全部为1才为1，否者为0</p>
<p>| （0）：全部为0才为0，否者为1</p>
<p>^（同0）：相同为0，否者为1</p>
<p>~（取反）：取二进制相反的数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> A = <span class="number">1100</span> <span class="number">0011</span></span><br><span class="line"> B = <span class="number">1001</span> <span class="number">0110</span></span><br><span class="line">---------------</span><br><span class="line">A&amp;B= <span class="number">1000</span> <span class="number">0010</span></span><br><span class="line">A|B= <span class="number">1101</span> <span class="number">0111</span></span><br><span class="line">A^B= <span class="number">0101</span> <span class="number">0101</span></span><br><span class="line">~B = <span class="number">0110</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure>

<p>“&lt;&lt;”二进制左位移=代表*2</p>
<p>“&gt;&gt;”二进制右位移=代表/2</p>
<h5 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h5><p>+=，-=，*=，/=;()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">a+=b;<span class="comment">//a=a+b(15)</span></span><br><span class="line">a-=b;<span class="comment">//a=a-b(-5)</span></span><br><span class="line">a*=b;<span class="comment">//a=a*b(50)</span></span><br><span class="line">a/=b;<span class="comment">//a=a/b(0.5)</span></span><br></pre></td></tr></table></figure>

<h5 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h5><p>在“+”号前出现string类型时，他会把“+”后面的一操作数，转换成string类型，进行拼接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">"yes"</span>+a+b);<span class="comment">//(yes520)</span></span><br><span class="line">System.out.println(a+b+<span class="string">"yes"</span>);<span class="comment">//(25yes)</span></span><br><span class="line">System.out.println(<span class="string">"yes"</span>+(a+b));<span class="comment">//(yes25)</span></span><br><span class="line">System.out.println(<span class="string">""</span>+a+b+<span class="string">"yes"</span>);<span class="comment">//(520yes)</span></span><br><span class="line">System.out.println(<span class="string">""</span>+a+b+(a+b)+<span class="string">"yes"</span>);<span class="comment">//(52025yes)</span></span><br></pre></td></tr></table></figure>

<h5 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h5><p>x？ y：z //x值如果为true=y，如果为false=z；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> xm = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">int</span> xg = <span class="number">49</span>;</span><br><span class="line"><span class="keyword">int</span> xh = <span class="number">60</span>;</span><br><span class="line">System.out.println(<span class="string">"xm:"</span>+(xm&gt;=score ?<span class="string">"及格"</span>:<span class="string">"不及格"</span>));<span class="comment">//(xm:及格)</span></span><br><span class="line">System.out.println(<span class="string">"xg:"</span>+(xg&gt;=score ?<span class="string">"及格"</span>:<span class="string">"不及格"</span>));<span class="comment">//(xg:及格)</span></span><br><span class="line">System.out.println(<span class="string">"xh:"</span>+(xh&gt;=score ?<span class="string">"及格"</span>:<span class="string">"不及格"</span>));<span class="comment">//(xh:及格)</span></span><br></pre></td></tr></table></figure>

<p>后期可以使用”if”做</p>
<p><strong>注意：byte类型再相加的时候，会自动转换成int类型</strong></p>
</li>
<li><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3></li>
</ul>
<p>“包的本质就是文件夹”</p>
<ul>
<li><p><strong>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。</strong></p>
</li>
<li><p><strong>包语句的语法格式为：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3...]]<span class="comment">//定义包</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一般利用公司域名倒置作为包名；</strong></p>
</li>
<li><p><strong>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用”import”完成此功能</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*);<span class="comment">//导入包，*导入这个包下所以的类</span></span><br></pre></td></tr></table></figure>

<p>尽量不要把包名字重复</p>
<h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><ul>
<li><p><strong>javadoc命令是用来生成自己API文档的</strong></p>
</li>
<li><p><strong>参数信息</strong></p>
<ul>
<li><strong>@author 作者名</strong></li>
<li><strong>@version 版本号</strong></li>
<li><strong>@since 指明需要最早使用的jdk版本</strong></li>
<li><strong>@param 参数名</strong></li>
<li><strong>@return 返回值情况</strong></li>
<li><strong>@throws 异常抛出情况</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>生产文档：javadic+参数+java文件</p>
<p>javadoc -encoding UTF-8 -charset UTF-8 Doc.java</p>
</li>
</ul>
<h3 id="如何在IDEA中生成一个Javadoc文档"><a href="#如何在IDEA中生成一个Javadoc文档" class="headerlink" title="如何在IDEA中生成一个Javadoc文档"></a>如何在IDEA中生成一个Javadoc文档</h3><ol>
<li>首先新建一个文件夹，用于存放要生成的Javadoc文档。</li>
<li>接下来点击IntelliJ IDEA顶部的Tools菜单，选择Generate JavaDoc选项，如下图所示<img src="https://gitee.com/summer502/img/raw/master/images/20210202211246.png" alt="在这里插入图片描述"></li>
<li>然后在弹出的界面中我们点击Output directory输入框后面的按钮，如下图所示<br><img src="https://gitee.com/summer502/img/raw/master/images/20210202211926.png" alt="image-20210202211856819"></li>
<li>在弹出的选择文件夹界面中选择刚才新建的文件夹</li>
<li>接下来在底部的Locale输入框配置语言和编码集，如下图所示，语言用zh_CN，代表中文</li>
</ol>
<blockquote>
<p>-encoding utf-8 -charset utf-8</p>
</blockquote>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210202212017.png" alt="image-20210202212015000"></p>
<ol>
<li>然后点击确定以后我们就等待IntelliJ IDEA给我们生成JavaDoc文档即可，等到输出栏出现如下图所示的提示代表生成完毕</li>
</ol>
<p>7.接下来我们打开JavaDoc文件夹，找到index.html文件,点击就能看到API文档。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础-面向对象-异常</title>
    <url>/2021/02/04/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>Java的核心思想就是oop</p>
<h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a><strong>目录：</strong></h2><ol>
<li><strong>初始面向对象</strong></li>
<li><strong>方法回顾和加深</strong></li>
<li><strong>对象的创建分析</strong></li>
<li><strong>面向对象三大特性</strong></li>
<li><strong>抽象类和接口</strong></li>
<li><strong>内部类及OOP实战</strong></li>
</ol>
<a id="more"></a>

<h2 id="初始面向对象"><a href="#初始面向对象" class="headerlink" title="初始面向对象"></a>初始面向对象</h2><h3 id="面向过程-amp-面向对象"><a href="#面向过程-amp-面向对象" class="headerlink" title="面向过程 &amp; 面向对象"></a>面向过程 &amp; 面向对象</h3><ul>
<li>面向过程思想<ul>
<li>步骤清晰简单，第一步做什么，第二步做什么…</li>
<li>面对过程适合处理一些较为简单的问题</li>
</ul>
</li>
<li>面向对象思想<ul>
<li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>
<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>
</ul>
</li>
<li><strong>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思维去处理。</strong></li>
</ul>
<h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul>
<li><strong>面向对象编程（Object-Oriented Programming, OOP）</strong></li>
<li><strong>面向对象编程的本质就是：以类的方式组织代码，以对象的组织（封装）数据。</strong></li>
<li><strong>核心：抽象</strong></li>
<li>三大特性：<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
<li><strong>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</strong></li>
<li><strong>从代码运行角度考虑是先有类后有对象。类是对象的模板。</strong></li>
</ul>
<h2 id="回顾方法及加深"><a href="#回顾方法及加深" class="headerlink" title="回顾方法及加深"></a>回顾方法及加深</h2><ul>
<li><p><strong>方法的定义</strong></p>
<ul>
<li><p>修饰符</p>
</li>
<li><p>返回类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名（...）｛</span></span><br><span class="line"><span class="comment">      //方法体</span></span><br><span class="line"><span class="comment">      return 返回值；</span></span><br><span class="line"><span class="comment">｝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHellp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello,world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a : b ;<span class="comment">//三元运算符！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>break 和 return 的区别(break:跳出switch，结束循环。return：结束循环，返回值)</p>
</li>
<li><p>方法名（注意规范，见名知意）</p>
</li>
<li><p>参数列表（参数类型，参数名）</p>
</li>
<li><p>异常抛出</p>
</li>
</ul>
</li>
<li><p><strong>方法的调用：递归</strong></p>
<ul>
<li><p>静态方法</p>
</li>
<li><p>非静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*静态方法 stutic</span></span><br><span class="line"><span class="comment">        输出：类名+方法名</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*非静态方法</span></span><br><span class="line"><span class="comment">   1.实例化这个类 new+类名+.方法名</span></span><br><span class="line"><span class="comment">   2.对象类型 对象名 = 对象值；</span></span><br><span class="line"><span class="comment">   类名+.方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Student student = <span class="keyword">new</span> Student();</span><br><span class="line">     student.say();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">   b()<span class="comment">//不可以调b</span></span><br><span class="line">&#125;<span class="comment">//因为static静态方法是和类一起加载，在创建的时候就已经有了</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">   a();<span class="comment">//可以调a</span></span><br><span class="line">&#125;<span class="comment">//而非静态需要类实例化以后（new）才存在</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>形参和实参</p>
</li>
<li><p>值传递和引用传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    值传递：</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo4</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        demo4.change(a);</span><br><span class="line">        System.out.println(a);<span class="comment">//上下没中</span></span><br><span class="line">    	&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">            a=<span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//引用传递：对象，本质还是值传递</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Perosn perosn = <span class="keyword">new</span> Perosn();</span><br><span class="line">        System.out.println(perosn.name);<span class="comment">//null</span></span><br><span class="line">        Demo03.change(perosn);</span><br><span class="line">        System.out.println(perosn.name);<span class="comment">//上下没中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Perosn erosn)</span></span>&#123;</span><br><span class="line">        <span class="comment">//perosn 是一个对象：指向的 ---&gt; Perosn perosn = new Perosn();</span></span><br><span class="line">        <span class="comment">// 这是一个具体的人，可以改变属性</span></span><br><span class="line">        erosn.name = <span class="string">"上下没中"</span>;<span class="comment">//它赋值的是</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个perosn类，有一个属性：name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perosn</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>this关键字（代表当前这个类）</p>
</li>
</ul>
</li>
</ul>
<h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul>
<li>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。<ul>
<li>动物、植物、手机、电脑…</li>
<li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</li>
</ul>
</li>
<li>对象是抽象概念的具体实例<ul>
<li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体实例。</li>
<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>
</ul>
</li>
</ul>
<h2 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h2><ul>
<li><p>使用new关键字创建对象</p>
</li>
<li><p><strong>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</strong></p>
<p>一个类里面只有属性和方法。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类是抽象的，必须用new实例化</span></span><br><span class="line"><span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line"><span class="comment">//返回后的对象就是抽象类的具体实例</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩个特点：</strong></p>
<ul>
<li>1.必须和类的名字相同</li>
<li>2.必须没有返回类型，也不能写void</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个类即使什么都不写,它也会存在一个方法（无参构造）</span></span><br><span class="line"><span class="comment">//显示的定义构造器</span></span><br><span class="line"> String name;</span><br><span class="line"> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">//1.使用new关键字，本质是在调用构造器</span></span><br><span class="line"><span class="comment">//2.无参构造器，用来初始化值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一旦定义了有参构造，无参就必须显示定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo02</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//alt + insert 生产构造器</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210203211046.png" alt="image-20210203211043790"></p>
<h3 id="近期总结"><a href="#近期总结" class="headerlink" title="近期总结"></a>近期总结</h3><ol>
<li><p><strong>类与对象</strong></p>
<p>类是一个模板、抽象的；对象是一个具体的实例。</p>
</li>
<li><p><strong>方法</strong></p>
<p>定义与调用！</p>
</li>
<li><p><strong>对应的引用</strong></p>
<p>引用类型：</p>
<p>基本类型（8）</p>
<p>对象是通过引用来操作的：栈—&gt;堆</p>
</li>
<li><p><strong>属性：字段Field 成员变量</strong></p>
<p>默认初始化：</p>
<p> 数字： 0 0.0</p>
<p> char : u0000</p>
<p> boolean : false</p>
<p> 引用 ： null</p>
<p>修饰符 属性类型 属性名 = 属性值！</p>
</li>
<li><p><strong>对象的创建和使用</strong></p>
<ul>
<li>必须使用 new 关键字创造对象，构造器 Person sxmz = new person();</li>
<li>对象的属性 sxmz.name</li>
<li>对象的方法 sxmz.sleep()</li>
</ul>
</li>
<li><p><strong>类：</strong></p>
<p>静态的属性 属性</p>
<p>动态的行为 方法</p>
<p>类里只写这两个。</p>
</li>
</ol>
<h2 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul>
<li><p><strong>该露的露，该藏得藏</strong></p>
<ul>
<li>我们程序设计要追求 “高内聚，低耦合”。高内聚就是将类的内部数据操作细节自己完成，不允许外部干涉；</li>
<li>低耦合：尽量暴露少量的方法给外部使用。</li>
</ul>
</li>
<li><p><strong>封装（数据的隐藏）</strong></p>
<ul>
<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>
</ul>
</li>
<li><p><strong>属性私有，private ; get / set ;</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类 private:属性私有</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//public 的 get/set 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get 获得这个数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Student s1 = new Student();</span></span><br><span class="line"><span class="comment">         String name = s1.getName();</span></span><br><span class="line"><span class="comment">         name = "小白";</span></span><br><span class="line"><span class="comment">         System.out.println(name);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set 给这个数据设置值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;&#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          Student s1 = new Student();</span></span><br><span class="line"><span class="comment">          s1.setName("小黑");</span></span><br><span class="line"><span class="comment">          System.out.println(s1.getName());</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快捷键 alt + insert</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul>
<li><p><strong>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</strong></p>
</li>
<li><p><strong>extends 的意思是“扩展”。子类是父类的扩展。</strong></p>
</li>
<li><p><strong>Java 中类只有单继承，没有多继承！</strong></p>
</li>
<li><p><strong>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</strong></p>
</li>
<li><p><strong>继承关系的俩个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字extends 来表示。</strong></p>
</li>
<li><p><strong>子类和父类之间，从意义上讲应该具有“is a”的关系。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类名 + extends + 父类名</span><br></pre></td></tr></table></figure>

<p>Public 公共的</p>
<p>protected 受保护的</p>
<p>default 默认的</p>
<p>private 私有的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="comment">//公共的</span></span><br><span class="line"><span class="keyword">protected</span> <span class="comment">//受保护的</span></span><br><span class="line"><span class="keyword">default</span> <span class="comment">//默认的</span></span><br><span class="line"><span class="keyword">private</span> <span class="comment">//私有的，无法被继承</span></span><br><span class="line"><span class="comment">//ctrl+h 继承树</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>object类</strong></p>
<p>在 Java 中，所有的类，都默认、直接或者间接继承object</p>
</li>
<li><p><strong>super</strong>—this</p>
<p>this 调用当前类，super 调用父类。</p>
<p><strong>super注意点：</strong></p>
<ol>
<li>super 调用父类的构造方法，必须在构造方法的第一个</li>
<li>super 必须只能出现在子类的方法或者构造方法中!</li>
<li>super 和 this 不能同时调用构造方法！</li>
</ol>
<p><strong>Vs this:</strong></p>
<p> 代表的对象不同：</p>
<p> this：本身调用者这个对象</p>
<p> super：代表父类对象的应用</p>
<p> 前提：</p>
<p> this：没有继承也可以使用</p>
<p> super：只能在继承条件才可以使用</p>
<p> 构造方法：</p>
<p> this()：本类的构造</p>
<p> super()：父类的构造</p>
</li>
<li><p><strong>方法重写</strong> Override</p>
<p>重写都是方法的重写，和属性无关。</p>
<p>重写值和非静态方法有关，静态没用，只能 Public 。</p>
<p>需要有继承关系，子类重写父类的方法！</p>
<ol>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大，但不能缩小；public &gt; protected &gt; Default &gt; private</li>
<li>抛出的异常： 范围，可以被缩小但不能扩大；ClassNotFoundException &lt;— Exception(大)</li>
</ol>
<p>重写，子类的方法和父类必须一致，但方法体不同！</p>
<p>为什么需要从写：</p>
<ol>
<li><p>父类的功能，子类不一定需要，或者不一定满足！</p>
<p><strong>Alt + Insert : override;</strong></p>
</li>
</ol>
</li>
</ul>
<p><strong>静态的方法和非静态的方法区别很大</strong></p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>父类的引用可以指向子类，但不能调用子类独有的方法。</p>
<p>方法的调用只和左边定义的数据类型有关，和右边关系不大。</p>
<p>动态编译：类型：可扩展性更强</p>
<ul>
<li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p>
</li>
<li><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多（父类，有关系的类）</p>
</li>
<li><p>多态存在的条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类方法</li>
<li>父类引用指向子类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//子类能调用的方法都是自己的或继承父类的</span></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();<span class="comment">//子类</span></span><br><span class="line"><span class="comment">//父类可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">Person s2 = <span class="keyword">new</span> Student();<span class="comment">//父类</span></span><br><span class="line">Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">/*一个对象的实际类型是确定的</span></span><br><span class="line"><span class="comment">可指向的引用类型不确定，父类的引用指向子类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//但是子类重写父类方法后，指向子类的方法</span></span><br><span class="line">s2.run();<span class="comment">//父类有，子类没有，子类继承父类方法</span></span><br><span class="line">s1.run();<span class="comment">//子类重写后，执行子类方法</span></span><br><span class="line">s1.eat();<span class="comment">//子类独有方法</span></span><br><span class="line">((Student) s2).eat();</span><br><span class="line"><span class="comment">//父类不能调用子类独有方法，会被强制转换为子类</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意：</strong></p>
<p>多态是方法的多态，属性没有多态性</p>
<p>父类和子类，有联系才能转换，不然会异常！类型转换异常：ClassCastException</p>
<p>存在条件：继承关系，方法需要重写，父类引用指向子类对象！Father f1 = new son();</p>
<p>不能重写的方法：</p>
<ol>
<li>static 方法，属于类，它不属于实例</li>
<li>final 常量 ，被final修饰的无法修改，属于常量池</li>
<li>private 私有方法，不能被重写</li>
</ol>
</li>
<li><p>instanceof 判断一个对象是什么类型。（类型转换—引用类型之间的转换）</p>
<p>System.out.println（x instanceof y）; ：true or false （能不能编译通过，看x所指向的实际类型是不是y的子类型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//比较 X instanceof Y 之间是否存在父子关系</span></span><br><span class="line">    <span class="comment">//Object&gt;String</span></span><br><span class="line">    <span class="comment">//Object&gt;Person（父类）&gt;Teacher（另一子类）</span></span><br><span class="line">    <span class="comment">//Object&gt;Person（父类）&gt;Student（子类）</span></span><br><span class="line">    Object object = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//false</span></span><br><span class="line">    <span class="comment">//Student类在Object类之内存在的关系，</span></span><br><span class="line">    <span class="comment">// Student,Person,Object,Teacher,String都属于Object类内</span></span><br><span class="line">    <span class="comment">//Teacher和String与Student不存在父子关系所以显示false</span></span><br><span class="line">    System.out.println(<span class="string">"==================================="</span>);</span><br><span class="line">    Person person = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">   <span class="comment">// System.out.println(person instanceof String);编译错误</span></span><br><span class="line">    <span class="comment">//Student类在Peron类范围内存在的关系；</span></span><br><span class="line">    <span class="comment">// 由于String在Peron类之外，没有直接联系，所以提示错误</span></span><br><span class="line">    System.out.println(<span class="string">"==================================="</span>);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(student <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">    System.out.println(student <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">    System.out.println(student <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    <span class="comment">//System.out.println(student instanceof Teacher);编译错误</span></span><br><span class="line">    <span class="comment">//System.out.println(student instanceof String);编译错误</span></span><br><span class="line">    <span class="comment">//Student类在Student类范围内存在的关系，</span></span><br><span class="line">    <span class="comment">//由于String和Teacher在Student类之外，所以提示错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>转换</strong>：</p>
<ol>
<li>父类引用指向子类的对象，不可以子类引用指向父类。</li>
<li>把子类转换为父类，向上转型；</li>
<li>把父类转换为子类，向下转型，强制转换（可能会丢失方法）</li>
<li>方便方法的调用，减少重复的代码，简介</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型之间的转化 ： 父---子</span></span><br><span class="line"><span class="comment">//高               低</span></span><br><span class="line">Person s1 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//高转低可以直接转；低转高，需要强制转</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Student s2 = (Student) s1;</span><br><span class="line">s2.go();</span><br><span class="line"><span class="comment">//或((Student) s1).go();</span></span><br></pre></td></tr></table></figure>

<h4 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a>static关键字详解</h4></li>
</ul>
<p>静态方法在类的时候就已经加载了</p>
<p>Static加上方式上叫静态方式，加上属性上叫静态属性。<br><strong>静态属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;<span class="comment">//静态的变量，可以被类中共享，多线程比较常用</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">double</span> score;<span class="comment">//非静态变量</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">      System.out.println(s1.age);<span class="comment">//通过方法可以正常调用</span></span><br><span class="line">      System.out.println(s1.score);</span><br><span class="line">      System.out.println(Student.age);<span class="comment">//静态变量，可以直接用类名进行调用</span></span><br><span class="line">      <span class="comment">//System.out.println(Student.score);//非静态变量不可以。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Student.go();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Student.go();<span class="comment">//静态方法不需要 new 可以直接调用</span></span><br><span class="line">      <span class="comment">//由于静态方法在类生成的时候就已经存在，所以可以调用静态的</span></span><br><span class="line">      <span class="comment">//Student.run(); 但不能调用非静态的，非静态方法需要 new 出来</span></span><br><span class="line">      <span class="keyword">new</span> Student().run();</span><br><span class="line">  &#125;<span class="comment">//注解和反射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码块</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//代码块（匿名代码块）</span></span><br><span class="line">&#125;<span class="comment">//创建对象的时候就已经创建了，在构造器之前</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">&#125;<span class="comment">//在类一加载就已经执行，而且只加载一次</span></span><br></pre></td></tr></table></figure>

<p><strong>排序，static只执行一次</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第二加载；适用于赋初值</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一加载；只在第一次执行</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo03 s1 = <span class="keyword">new</span> Demo03();</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        Demo03 s2 = <span class="keyword">new</span> Demo03();</span><br><span class="line">        <span class="comment">//第二次执行static不在执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态导入包</strong><br>静态导入包后可以直接调用其方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)(Math.random()*<span class="number">50</span>));</span><br><span class="line">        <span class="comment">//random()随机值，整数，范围（0-50）</span></span><br><span class="line">        <span class="comment">//使用静态导入包后可以直接System.out.println(random());</span></span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>final修饰的类不能被继承</strong></p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul>
<li>abstract 修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</li>
<li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li>
<li>抽象类，不能使用 new 关键字来创建对象，它是用来让子类继承的。</li>
<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>
<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法；否者该子类也要声明为抽象类，然后由子子类实现抽象方法。<br>“Abstract method in non-abstract class”</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//abstract 抽象类 类 extends,单继承；       （接口可以多继承）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">   <span class="comment">//约束~有人帮我们实现</span></span><br><span class="line">   <span class="comment">//abstract,抽象方法，只有方法名字，没有方法的实现！</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类的所有方法，必继承了它的子类，都必须要实现它的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">   <span class="comment">//除非子类也是抽象方法，那就由子子类实现</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>不能 new 这个抽象类，只能靠子类去实现它；只是约束</li>
<li>抽象类中可以写普通方法</li>
<li>抽象方法必须在抽象类中</li>
</ol>
<p>报错“Missing method body, or declare abstract”</p>
<p><strong>思考题</strong>：</p>
<ol>
<li>抽象类存在构造器吗?</li>
</ol>
<p>答：抽象类可以有构造方法，只是不能直接创建抽象类的实例对象而已。在继承了抽象类的子类中通过super()或super(参数列表)调用抽象类中的构造方法。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	a=<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    	a=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo01</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Demo01 demo=<span class="keyword">new</span> Demo01();</span><br><span class="line">	    System.out.println(demo.a);</span><br><span class="line">	    Demo01 demo1=<span class="keyword">new</span> Demo01(<span class="number">9</span>);</span><br><span class="line">	    System.out.println(demo1.a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   2.抽象类存在的意义？</p>
<p>提高开发效率，可扩展行高</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul>
<li><p><strong>普通类</strong>：只有具体实现</p>
</li>
<li><p><strong>抽象类</strong>：具体实现和规范（抽象方法）都有！</p>
</li>
<li><p><strong>接口</strong>：只有规范！自己无法写方法，专业的约束！约束和实现分离：面向接口编程~</p>
</li>
<li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…则必须能…”的思想。</p>
<p>“如果你是天使，则必须能飞。如果你是汽车，则必须能跑。”</p>
</li>
<li><p><strong>接口的本质是契约</strong>，就像我们人间的法律一样。制定好后大家都遵守。</p>
</li>
<li><p>OO的精髓，是对对象的抽象，最能体现这一点的就是接口，为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、java、c#等），就是因为设计模式所研究的，实际上就是如何合理的去抽象。</p>
<p><strong>声明类的关键字是class，声明接口的关键字是interface</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//interface 接口定义的关键字；接口都需要实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserSerbice</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public void ss()&#123; &#125;     报错；接口内不能写方法</span></span><br><span class="line">    <span class="comment">//接口中的所有定义其实都是抽象的，默认 public abstract</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口还可以定义变量，所有定义的属性都是静态的常量</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">99</span>;</span><br><span class="line">                       <span class="keyword">int</span> ABC = <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：</p>
<ol>
<li>约束，规范</li>
<li>定义一些方法，让不同的人实现。多个人完成共同的工作。</li>
<li>接口中所有默认的方法public abstract</li>
<li>所有常量默认public static final</li>
<li>接口不能被实例化，接口中没有构造方法。</li>
<li>可以实现多个接口</li>
<li>必须要重写接口中的方法。</li>
<li>声明接口interface,实现接口implements，可以实现多个方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        xiaduan sxmz = <span class="keyword">new</span> xiaduan();</span><br><span class="line">        sxmz.mingzi(<span class="string">"上下没中"</span>);</span><br><span class="line">        sxmz.nianling(<span class="number">31</span>);</span><br><span class="line">        sxmz.shengao(<span class="number">175.8</span>);</span><br><span class="line">        sxmz.zhuzhi(<span class="string">"内蒙古"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  //抽象类：extende</span></span><br><span class="line"><span class="comment">  //类 可以实现接口 implements 接口</span></span><br><span class="line"><span class="comment">  //实现了接口的类，就需要重写接口中的方法</span></span><br><span class="line"><span class="comment">public class xiaduan implements jiekou,jiekou2 &#123;</span></span><br><span class="line"><span class="comment">  //利用接口实现多继承（jiekou,jiekou2）</span></span><br><span class="line"><span class="comment">  //继承类可以方法的实现，但接口只有方法的定义</span></span><br><span class="line"><span class="comment">    @Override//jiekou</span></span><br><span class="line"><span class="comment">    public void mingzi(String name) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println("名字："+name);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override//jiekou</span></span><br><span class="line"><span class="comment">    public void nianling(int nl) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println("岁数："+nl);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override//jiekou</span></span><br><span class="line"><span class="comment">    public void shengao(double sg) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println("身高："+sg);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override//jiekou2</span></span><br><span class="line"><span class="comment">    public void zhuzhi(String zz) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println("住宅："+zz);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="内部类-扩展知识"><a href="#内部类-扩展知识" class="headerlink" title="内部类(扩展知识)"></a>内部类(扩展知识)</h2><ul>
<li><strong>内部类就是在一个类的内部在定义一个类，比如A类中定义一个B类，那么B累相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是外部类的方法！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"这是内部类的方法！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内部类可以获得外部类的私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//外部类通过 new 获取</span></span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//内部类通过 外部类 . new 内部类 获得</span></span><br><span class="line">        Outer.Inner inner = outer.<span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>成员内部类</strong>；类中加类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先实例化外部类，再用外部类实例化内部类</span></span><br><span class="line">Outer outer = <span class="keyword">new</span> Outer();<span class="comment">//new外部</span></span><br><span class="line">Outer.Inner inner = outer.<span class="keyword">new</span> Inner();<span class="comment">//new内部</span></span><br><span class="line">inner.in（）；</span><br></pre></td></tr></table></figure>

<p>内部类可以获得外部类的私有属性</p>
</li>
<li><p><strong>静态内部类；不能直接访问非静态的外部类属性</strong>（static先于非静态类生成）</p>
</li>
<li><p><strong>局部内部类；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匿名内部类；没有名字去初始化类，不用将实例保存到变量中</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不起名直接使用</span></span><br><span class="line"><span class="keyword">new</span> Apple().eat(); </span><br><span class="line"><span class="comment">//new接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> UserService()&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>一个java类中，可以有多个 class 类，但只能有一个 public class 类</p>
<h1 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h1><h2 id="目录：-1"><a href="#目录：-1" class="headerlink" title="目录："></a><strong>目录：</strong></h2><ol>
<li><strong>什么是异常</strong></li>
<li><strong>异常体系结构</strong></li>
<li><strong>Java异常处理机制</strong></li>
<li><strong>处理异常</strong></li>
<li><strong>自定义异常</strong></li>
<li><strong>总结</strong></li>
</ol>
<h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><ul>
<li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求；你的程序要打开某个文件，这个文件可能不存在或者文件格式不对；你要读取数据库的数据，数据可能是空的等；我们的程序再跑着，内存或硬盘可能满了。等等。</li>
<li>软件程序在运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思就是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃。</li>
<li>异常值程序运行中出现不期而至的各种状况，如：文件找不到，网络连接失败，非法参数等。</li>
<li>异常发现在程序运行期间，它影响了正常的程序执行流程。</li>
</ul>
<h3 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h3><ul>
<li><p>要理解 Java 异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>
<ul>
<li><p><strong>检查性异常</strong>：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。</p>
<p>例如：打卡一个不存在文件时，一个异常就会发生了，这些异常在编译时不能被简单地忽略。</p>
</li>
<li><p><strong>运行时异常</strong>：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</p>
</li>
<li><p><strong>错误 ERROR</strong>：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。编译时不容易被发现。</p>
<p>例如：当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</p>
</li>
</ul>
</li>
</ul>
<h2 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h2><ul>
<li><p>Java 把异常当做对象来处理，并定义一个基础类 java.lang.Throwable 作为所有异常的超类。</p>
</li>
<li><p>在 Java API 中已经定义了许多异常类，这些异常类分为两大类，错误Error和异常Exception 。</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210203234342.png" alt="image-20210203234339967"></p>
</li>
</ul>
<h3 id="Error错误"><a href="#Error错误" class="headerlink" title="Error错误"></a>Error错误</h3><ul>
<li>Error 类对象有 Java 虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li>
<li>Java 虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时， Java 虚拟机（JVM）一般会选择线路终止。</li>
<li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的情况。</li>
</ul>
<h3 id="Exception异常"><a href="#Exception异常" class="headerlink" title="Exception异常"></a>Exception异常</h3><ul>
<li>在 Exception 分支中有一个重要的子类 RuntimeException （运行时异常）<ul>
<li>ArrayIndexOutOfBoundsException（数组下标越界）</li>
<li>NullPointerException（空指针异常）</li>
<li>ArithmeticException（算术异常）</li>
<li>MissingResourceException（丢失资源）</li>
<li>ClassNotFoundException（找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</li>
</ul>
</li>
<li>一些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发现；</li>
<li><strong>Error 和 Exception 的区别：Error 通常是灾难性的致命错误，是程序无法控制和处理的，当出现这些异常时，Java 虚拟机（JVM）一般会选择终止线程；Exception 通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这类异常。</strong></li>
</ul>
<h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ul>
<li><p>抛出异常</p>
</li>
<li><p>捕获异常</p>
</li>
<li><p>异常处理五个关键字</p>
<ul>
<li>try、catch、finally、throw、throws</li>
</ul>
<p>可以当出现异常时，捕获它，防止程序停止。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//假设要捕获多个异常：从小到大！不然会报错，提示大异常以及覆盖小异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;   <span class="comment">//try 监控区域</span></span><br><span class="line">        System.out.println(a / b);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Error e) &#123;   <span class="comment">//catch（想要捕获的异常类型！）捕获异常</span></span><br><span class="line">        System.out.println(<span class="string">"Error"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;<span class="comment">//“e”,代表异常消息</span></span><br><span class="line">        System.out.println(<span class="string">"Exception"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable t)&#123;		<span class="comment">//最高级，放在最后面</span></span><br><span class="line">        System.out.println(<span class="string">"Throwable"</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;    <span class="comment">//处理善后工作，不管报不报异常，都会执行。</span></span><br><span class="line">        System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//finally 可以不用，但是catch必须有。finally假设Io,资源，关闭工作</span></span><br><span class="line">    <span class="comment">//快捷键：选中需要包裹的代码，ctrl+alt+T</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      try &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(a / b);</span></span><br><span class="line"><span class="comment">    &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">        System.exit(0);//程序结束</span></span><br><span class="line"><span class="comment">        e.printStackTrace();//打印错误的栈信息</span></span><br><span class="line"><span class="comment">    &#125; finally &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>throw</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动的抛出异常</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>throws</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> linshi().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//假设这个方法中，处理不了这个异常。方法上抛出异常throws，由上一级捕获。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="keyword">throws</span> ArithmeticException</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//throw 主动的抛出异常,一般在方法内</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a / b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul>
<li><p>使用 Java 内置的异常类可以描述在编程时出现的大部分异常情况。除此之外用户还可以自定义异常。用户自定义异常类，只需继承 Exception 类即可。</p>
</li>
<li><p>在程序中使用自定义异常类，大体可分为以下几个步骤：</p>
<ol>
<li>创建自定义异常类。</li>
<li>在方法中通过 throw 关键字抛出异常对象。</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用 try-catch 语句捕获并处理；否则在方法的声明处通过 throws 关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调用者中捕获并处理异常。</li>
</ol>
<p>自定义异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="comment">//假设传递数字&gt;10异常</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tishi;<span class="comment">//创建一个提示信息</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo01</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;<span class="comment">//创建一个构造器传递消息</span></span><br><span class="line">    <span class="keyword">this</span>.tishi = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//toString打印信息：异常的打印信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"异常&#123;"</span> + <span class="string">"tishi="</span> + tishi + <span class="string">'&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>throws抛出方法捕获</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个可能会存在异常的方法</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> Demo01 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"传递的参数为："</span>+a);</span><br><span class="line">        <span class="keyword">if</span> (a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Demo01(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;   <span class="comment">//赋值并捕获</span></span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Demo01 e) &#123;</span><br><span class="line">        <span class="comment">// if( )&#123; &#125;		可以增加一些处理异常的代码块</span></span><br><span class="line">            System.out.println(<span class="string">"注意："</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>throw方法内捕获</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个可能会存在异常的方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"传递的参数为："</span>+a);</span><br><span class="line">    <span class="keyword">if</span> (a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Demo01(a);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Demo01 e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"注意："</span>+e);;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    test(<span class="number">15</span>);   <span class="comment">//赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="实际应用中的经验总结"><a href="#实际应用中的经验总结" class="headerlink" title="实际应用中的经验总结"></a>实际应用中的经验总结</h2><ul>
<li>处理运行时异常，采用逻辑去合理规避同时辅助 try-catch 处理</li>
<li>在多重 catch 块后面，可以加一个 catch（Exception）来处理可能被遗漏的异常</li>
<li>对于不确定的代码，也可以加上 try-catch ，处理潜在的异常</li>
<li>尽量去处理异常，切忌只是简单地调用 printStackTrace()去打印输出</li>
<li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li>
<li>尽量添加 finally 语句块去释放占用的资源</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-ajax-json</title>
    <url>/2021/02/04/%E5%89%8D%E7%AB%AF-ajax-json/</url>
    <content><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>AjAX=Asynchronous javaScript and XML(异步的javaScript和XML)。</p>
<p>Ajax不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术</p>
<p>C/S</p>
<p>增加B/S的体验性</p>
<p>B/S：未来的主流，并且会爆发式的持续增长；</p>
<p>H5+网页+客户端+手机端</p>
<p>使用JQuery需要先导入jQuery的js文件；</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ajax"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一种方式，服务器要返回一个字符串，直接使用response</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/a1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ajax</span><span class="params">(String name,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(name))&#123;</span><br><span class="line">            response.getWriter().print(<span class="string">"true"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.getWriter().print(<span class="string">"false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/a2"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajax2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    User user1 =<span class="keyword">new</span> User(<span class="string">"豪"</span>,<span class="number">1</span>,<span class="string">"男"</span>);</span><br><span class="line">    User user2=<span class="keyword">new</span> User(<span class="string">"豪"</span>,<span class="number">1</span>,<span class="string">"男"</span>);</span><br><span class="line">    list.add(user1);</span><br><span class="line">    list.add(user2);</span><br><span class="line">    <span class="keyword">return</span> list; <span class="comment">//由于加了@ResponseBody注解，他会返回一个字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ajax-写法"><a href="#ajax-写法" class="headerlink" title="ajax 写法"></a>ajax 写法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">a1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//所有参数：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//url:待载入页面的URL地址，Json</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//data:待发送Key/value参数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//success:载入成功时回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//data：封装了服务器返回的数据</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//status：状态</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/ajax/a1"</span>,</span></span><br><span class="line"><span class="javascript">            data:&#123;<span class="string">"name"</span>:$(<span class="string">"txtName"</span>).val()&#125;,</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(data,status)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(status)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">//将文本输入的值，</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"txtName"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// //发送给服务器，</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// //接受服务器返回的数据</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    	$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">"$&#123;pageContest.request.contextPath&#125;/ajax/a2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> html=<span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                    html+=<span class="string">"&lt;tr&gt;"</span>+</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"&lt;td&gt;"</span>+data[i].name+<span class="string">"&lt;/td&gt;"</span>+</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"&lt;td&gt;"</span>+data[i].age+<span class="string">"&lt;/td&gt;"</span>+</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"&lt;td&gt;"</span>+data[i].sex+<span class="string">"&lt;/td&gt;"</span>+</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"&lt;/tr&gt;"</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                $(<span class="string">"#content"</span>).html(html);</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/a3"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ajax3</span><span class="params">(String name,String pwd)</span></span>&#123;</span><br><span class="line">    String msg=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(name!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(name))&#123;</span><br><span class="line">            msg=<span class="string">"ok"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            msg=<span class="string">"用户名有误"</span>；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pwd != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"123456"</span>.equals(pwd))&#123;</span><br><span class="line">            msg=<span class="string">"ok"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            msg=<span class="string">"密码输入有误"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="function">function <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">                $.post(&#123;</span><br><span class="line">                    url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/ajax/a3"</span>,</span><br><span class="line">                    data:&#123;<span class="string">"name"</span>:$(<span class="string">"#name"</span>).val()&#125;,</span><br><span class="line">                    success:function(data)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(data.toString()==<span class="string">'ok'</span>)&#123;</span><br><span class="line">                            <span class="comment">//信息核对成功</span></span><br><span class="line">                            $(<span class="string">'#userInfo'</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            $(<span class="string">"#userInfo"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(<span class="string">"#userInfo"</span>).html(data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function">function <span class="title">a2</span><span class="params">()</span></span>&#123;</span><br><span class="line">                $.post(<span class="string">"$&#123;pageContext.request.contextPath&#125;/ajax/a3"</span>,&#123;<span class="string">"pwd"</span>:$(<span class="string">"pwd"</span>).val()&#125;,function(data)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.toString()=<span class="string">'ok'</span>)&#123;<span class="comment">//信息核对成功</span></span><br><span class="line">                        $(<span class="string">'#pwdInfo'</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>);                     </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">'#pwdInfo'</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">"#pwdInfo"</span>).html(data);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            用户名：</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> id=<span class="string">"name"</span> onblur=<span class="string">"a1()"</span>/&gt;</span><br><span class="line">            &lt;span id="userInfo"&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            	密码：</span><br><span class="line">        	&lt;input type=<span class="string">"text"</span> id=<span class="string">"pwd"</span> onblur=<span class="string">"a2()"</span>/&gt;</span><br><span class="line">        	&lt;span id="pwdInfo"&gt;&lt;/span&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Ajax-总结："><a href="#Ajax-总结：" class="headerlink" title="Ajax 总结："></a>Ajax 总结：</h2><p>使用jQuery需要导入JQuery，使用Vue就导入Vue，两个都用，自己原生态实现</p>
<p><strong>三步曲：</strong></p>
<p>1.编写对应处理的Controller,返回消息或者字符串汇总json格式的数据</p>
<p>2.编写ajax请求</p>
<p>​    1.url: Controller 请求</p>
<p>​    2.data： 键值对</p>
<p>​    3 . SUCCESS: 回调函数</p>
<p>3.给Ajax绑定事件，点击click，失去焦点onblur,键盘弹起keyup</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>(JavaScript Object Notation,JS对象标记.)</p>
<p>前后端分离,数据交互变得异常重要,JSON就是王者.</p>
<h3 id="1-1-什么是JSON"><a href="#1-1-什么是JSON" class="headerlink" title="1.1 什么是JSON"></a>1.1 什么是JSON</h3><ul>
<li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li>
<li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li>
<li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
<p>在 JavaScript 语言中，一切都是对象。要求和语法格式：</p>
<ul>
<li>对象表示为键值对，数据由逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"age"</span>: <span class="string">"3"</span>&#125;</span><br></pre></td></tr></table></figure>

<p>JSON 是 JavaScript 对象的<strong>字符串表示法</strong>，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">var obj = &#123;a: 'Hello', b: 'World'&#125;; //这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="line">var json = '&#123;"a": "Hello", "b": "World"&#125;'; //这是一个 JSON 字符串，本质是一个字符串</span><br></pre></td></tr></table></figure>

<p><strong>JSON 和 JavaScript 对象互转</strong></p>
<p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var obj = JSON.parse('&#123;"a": "Hello", "b": "World"&#125;');</span><br><span class="line"><span class="comment">//结果是 &#123;a: 'Hello', b: 'World'&#125;</span></span><br></pre></td></tr></table></figure>

<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var json = JSON.stringify(&#123;a: 'Hello', b: 'World'&#125;);</span><br><span class="line"><span class="comment">//结果是 '&#123;"a": "Hello", "b": "World"&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON字符串与JS对象之间的转换"><a href="#JSON字符串与JS对象之间的转换" class="headerlink" title="JSON字符串与JS对象之间的转换"></a>JSON字符串与JS对象之间的转换</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="actionscript">			name:<span class="string">"庞杰"</span>,</span></span><br><span class="line"><span class="actionscript">			age:<span class="string">"22"</span>,</span></span><br><span class="line"><span class="actionscript">			sex:<span class="string">"男"</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//将js对象转换成json字符串</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(str);</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//将json字符串转换成js对象</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(str); </span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//正常返回的时候会走视图解析器，但是json需要的是返回一个字符串。</span></span><br><span class="line">	<span class="comment">//@ResponseBody将服务器端返回的对象转换为json对象响应回去。</span></span><br><span class="line">	<span class="comment">//解决乱码问题。produces = "application/json;charset=utf-8"</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"json1"</span>,produces = <span class="string">"application/json;charset=utf-8"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User(<span class="string">"庞杰"</span>, <span class="number">22</span>, <span class="string">"男"</span>);</span><br><span class="line">		<span class="comment">//需要一个jackson的对象映射器，就是一个类，使用它可以直接将对象转换为json字符串</span></span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		<span class="comment">//将java对象转换为json字符串</span></span><br><span class="line">		String string = mapper.writeValueAsString(user);</span><br><span class="line">		<span class="comment">//@ResponseBody，使用这个注解会将string对象以json格式的字符串返回</span></span><br><span class="line">		<span class="keyword">return</span> string;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"json2"</span>,produces = <span class="string">"application/json;charset=utf-8"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> </span>&#123;<span class="comment">//produces解决乱码</span></span><br><span class="line">		<span class="keyword">return</span> JsonUtils.getJson(<span class="keyword">new</span> User(<span class="string">"吴亦凡"</span>,<span class="number">31</span>,<span class="string">"男"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"json3"</span>,produces = <span class="string">"application/json;charset=utf-8"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> JsonUtils.getJson(<span class="keyword">new</span> Date());<span class="comment">//默认返回时间戳，如何不让他返回时间戳，需关闭时间戳功能</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"json4"</span>,produces = <span class="string">"application/json;charset=utf-8"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> JsonUtils.getJson(<span class="keyword">new</span> Date(),<span class="string">"yyyy-MM-dd"</span>);<span class="comment">//默认返回时间戳，如何不让他返回时间戳，需关闭时间戳功能</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JsonUtils:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * json工具类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//需要一个jackson的对象映射器，就是一个类，使用它可以直接将对象转换为json字符串</span></span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//将java对象转换为json字符串</span></span><br><span class="line">			String string = mapper.writeValueAsString(obj);</span><br><span class="line">			<span class="comment">//关闭时间戳</span></span><br><span class="line">			mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">			SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">			mapper.setDateFormat(sdf);</span><br><span class="line">			<span class="keyword">return</span> string;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object obj,String dateFormatStr)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//需要一个jackson的对象映射器，就是一个类，使用它可以直接将对象转换为json字符串</span></span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormatStr);</span><br><span class="line">		mapper.setDateFormat(sdf);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//将java对象转换为json字符串</span></span><br><span class="line">			String string = mapper.writeValueAsString(obj);</span><br><span class="line">			<span class="comment">//关闭时间戳</span></span><br><span class="line">			<span class="keyword">return</span> string;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前后端交互</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习总结</title>
    <url>/2021/02/06/Mybatis%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1 什么是Mybatis"></a>1.1 什么是Mybatis</h3><p><img src="https://gitee.com/summer502/img/raw/master/images/20210206231641.png" alt="在这里插入图片描述"></p>
<ul>
<li><strong>MyBatis 是一款优秀的持久层框架;</strong></li>
<li>它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>官方中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></li>
</ul>
<a id="more"></a>

<h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库（Jdbc）,io文件持久化。</li>
</ul>
<p><strong>为什么要持久化？</strong></p>
<ul>
<li>有一些对象，不能让他丢掉</li>
<li>内存太贵</li>
</ul>
<h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h3><p>Dao层、Service层、Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="1-4-为什么需要MyBatis"><a href="#1-4-为什么需要MyBatis" class="headerlink" title="1.4 为什么需要MyBatis"></a>1.4 为什么需要MyBatis</h3><ul>
<li>帮助程序员将数据存入到数据库中</li>
<li>方便</li>
<li>传统的JDBC代码太复杂了，简化，框架，自动化</li>
<li>不用MyBatis也可以，技术没有高低之分</li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql</li>
</ul>
</li>
</ul>
<h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境 –&gt; 导入MyBatis –&gt; 编写代码 –&gt; 测试</p>
<h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h3><p>新建项目</p>
<ol>
<li><p>创建一个普通的maven项目</p>
</li>
<li><p>删除src目录 （就可以把此工程当做父工程了，然后创建子工程）</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysqlq驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个Module</p>
</li>
</ol>
<h3 id="2-2-创建一个模块"><a href="#2-2-创建一个模块" class="headerlink" title="2.2 创建一个模块"></a>2.2 创建一个模块</h3><ul>
<li><p>编写mybatis的核心配置文件</p>
</li>
<li><pre><code class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>
<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span>
<span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span>
<span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span>
<span class="comment">&lt;!--configuration核心配置文件--&gt;</span>
<span class="tag">&lt;<span class="name">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span>
        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span>
            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span>
            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?userSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC"</span>/&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>
        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span>
    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span>
    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span>
  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>
<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>

<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 编写mybatis工具类</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;java</span><br><span class="line">  &#x2F;&#x2F;sqlSessionFactory --&gt; sqlSession</span><br><span class="line">  public class MybatisUtils &#123;</span><br><span class="line">  </span><br><span class="line">      static SqlSessionFactory sqlSessionFactory &#x3D; null;</span><br><span class="line">  </span><br><span class="line">      static &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              &#x2F;&#x2F;使用Mybatis第一步 ：获取sqlSessionFactory对象</span><br><span class="line">              String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">              InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">              sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">          &#125; catch (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      &#x2F;&#x2F;既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例.</span><br><span class="line">      &#x2F;&#x2F; SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span><br><span class="line">      public static SqlSession getSqlSession()&#123;</span><br><span class="line">          return sqlSessionFactory.openSession();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></span>
</code></pre>
</li>
</ul>
<h3 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h3><ul>
<li><p>实体类</p>
</li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口实现类 （由原来的UserDaoImpl转变为一个Mapper配置文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个指定的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kuang.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from USER</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<p><strong>注意点：</strong></p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>MapperRegistry是什么?</strong></p>
<p>核心配置文件中注册mappers</p>
<ul>
<li><p>junit测试</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取SqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">//2.执行SQL</span></span><br><span class="line">    <span class="comment">// 方式一：getMapper</span></span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;       </span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line"></span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>可能会遇到的问题：</strong></p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ol>
<h2 id="3、CURD"><a href="#3、CURD" class="headerlink" title="3、CURD"></a>3、CURD</h2><h3 id="1-namespace"><a href="#1-namespace" class="headerlink" title="1. namespace"></a>1. namespace</h3><p>namespace中的包名要和Dao/Mapper接口的包名一致</p>
<h3 id="2-select"><a href="#2-select" class="headerlink" title="2. select"></a>2. select</h3><p>选择，查询语句；</p>
<ul>
<li><p>id：就是对应的namespace中的方法名；</p>
</li>
<li><p>resultType : Sql语句执行的返回值；</p>
</li>
<li><p>parameterType : 参数类型；</p>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    insert into user (id,name,password) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user  = <span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">"黑子"</span>,<span class="string">"666"</span>);</span><br><span class="line">    mapper.addUser(user);</span><br><span class="line">    <span class="comment">//增删改一定要提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：增删改查一定要提交事务：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h3 id="3-Insert"><a href="#3-Insert" class="headerlink" title="3. Insert"></a>3. Insert</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--对象中的属性可以直接取出来--&gt;</span><br><span class="line">&lt;insert id=<span class="string">"addUser"</span> parameterType=<span class="string">"com.mybatis.study.pojo.User"</span> &gt;</span><br><span class="line">    insert into test.teacher(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"> &lt;/insert&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-update"><a href="#4-update" class="headerlink" title="4. update"></a>4. update</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.mybatis.study.pojo.User"</span>&gt;</span><br><span class="line">    update test.teacher set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>



<h3 id="5-Delete"><a href="#5-Delete" class="headerlink" title="5. Delete"></a>5. Delete</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">    delete from test.teacher where id=#&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>标签不要匹配错</li>
<li>resource绑定mapper，需要使用路径！</li>
<li>程序配置文件必须符合规范</li>
<li>NullPointerException，没有注册到资源</li>
<li>输出xml文件存在中文乱码问题</li>
<li>maven资源没有导出问题</li>
</ul>
<h3 id="6-万能Map"><a href="#6-万能Map" class="headerlink" title="6. 万能Map"></a>6. 万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应该考虑使用Map!</p>
<ol>
<li>UserMapper接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用万能Map插入用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>UserMapper.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性可以直接取出来 传递map的key--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser2"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    insert into user (id,name,password) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;userpassword&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">"userid"</span>,<span class="number">4</span>);</span><br><span class="line">    map.put(<span class="string">"username"</span>,<span class="string">"王虎"</span>);</span><br><span class="line">    map.put(<span class="string">"userpassword"</span>,<span class="number">789</span>);</span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Map传递参数，直接在sql中取出key即可！ 【parameter=“map”】</p>
<p>对象传递参数，直接在sql中取出对象的属性即可！ 【parameter=“Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到</p>
<p>多个参数用Map , <strong>或者注解！</strong></p>
</blockquote>
<h3 id="7-模糊查询"><a href="#7-模糊查询" class="headerlink" title="7. 模糊查询"></a>7. 模糊查询</h3><p>模糊查询这么写？</p>
<ol>
<li><p>Java代码执行的时候，传递通配符% %</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">"%李%"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在sql拼接中使用通配符</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from user where name like "%"#&#123;value&#125;"%"</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1-核心配置文件"><a href="#1-核心配置文件" class="headerlink" title="1. 核心配置文件"></a>1. 核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>Mybatis的配置文件包含了会深深影响MyBatis行为的设置和属性信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">    properties（属性）</span><br><span class="line">    settings（设置）</span><br><span class="line">    typeAliases（类型别名）</span><br><span class="line">    typeHandlers（类型处理器）</span><br><span class="line">    objectFactory（对象工厂）</span><br><span class="line">    plugins（插件）</span><br><span class="line">    environments（环境配置）</span><br><span class="line">    	environment（环境变量）</span><br><span class="line">    		transactionManager（事务管理器）</span><br><span class="line">    		dataSource（数据源）</span><br><span class="line">    databaseIdProvider（数据库厂商标识）</span><br><span class="line">    mappers（映射器）</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-环境配置-environments"><a href="#2-环境配置-environments" class="headerlink" title="2. 环境配置 environments"></a>2. 环境配置 environments</h3><p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>MyBatis默认的事务管理器就是JDBC ，连接池：POOLED</p>
<h3 id="3-属性-properties"><a href="#3-属性-properties" class="headerlink" title="3. 属性 properties"></a>3. 属性 properties</h3><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.poperties】</p>
<ol>
<li><p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在核心配置文件中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引用外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的</li>
<li>“configuration” 的内容必须匹配 “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)</li>
</ul>
</li>
</ol>
<h3 id="4-类型别名-typeAliases"><a href="#4-类型别名-typeAliases" class="headerlink" title="4. 类型别名 typeAliases"></a>4. 类型别名 typeAliases</h3><ul>
<li><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置.</p>
</li>
<li><p>意在降低冗余的全限定类名书写。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.kuang.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以指定一个包，每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>,；若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kuang.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议用第二种扫描包的方式。</p>
<p>第一种可以DIY别名，第二种不行，如果非要改，需要在实体上增加注解。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"author"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-设置-Settings"><a href="#5-设置-Settings" class="headerlink" title="5. 设置 Settings"></a>5. 设置 Settings</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210205222543.png" alt="在这里插入图片描述"></p>
<h3 id="6-其他配置"><a href="#6-其他配置" class="headerlink" title="6. 其他配置"></a>6. 其他配置</h3><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" target="_blank" rel="noopener">objectFactory（对象工厂）</a></li>
<li>plugins 插件<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h3 id="7-映射器-mappers"><a href="#7-映射器-mappers" class="headerlink" title="7. 映射器 mappers"></a>7. 映射器 mappers</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p>
<p>方式一：【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/kuang/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.kuang.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意点：</strong></p>
<ul>
<li>接口和他的Mapper配置文件必须同名</li>
<li>接口和他的Mapper配置文件必须在同一个包下</li>
</ul>
<p>方式三：使用包扫描进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kuang.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意点：</strong></p>
<ul>
<li>接口和他的Mapper配置文件必须同名</li>
<li>接口和他的Mapper配置文件必须在同一个包下</li>
</ul>
<h3 id="8-作用域和生命周期"><a href="#8-作用域和生命周期" class="headerlink" title="8. 作用域和生命周期"></a>8. 作用域和生命周期</h3><p><img src="https://gitee.com/summer502/img/raw/master/images/20210205175610.png" alt=""></p>
<p>声明周期和作用域是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder:</strong></p>
<ul>
<li>一旦创建了SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory:</strong></p>
<ul>
<li>说白了就可以想象为：数据库连接池</li>
<li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建一个实例。</strong></li>
<li>因此SqlSessionFactory的最佳作用域是应用作用域（ApplocationContext）。</li>
<li>最简单的就是使用<strong>单例模式</strong>或静态单例模式。</li>
</ul>
<p><strong>SqlSession：</strong></p>
<ul>
<li>连接到连接池的一个请求</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用！</li>
</ul>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210205180138.png" alt=""></p>
<h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><p>数据库中的字段</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210205223136.png" alt="在这里插入图片描述"></p>
<p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210205223152.png" alt="在这里插入图片描述"></p>
<p>测试出现问题<br><img src="https://gitee.com/summer502/img/raw/master/images/20210205223159.png" alt="在这里插入图片描述"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// select * from user where id = #&#123;id&#125;</span><br><span class="line">// 类型处理器</span><br><span class="line">// select id,name,pwd from user where id = #&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ul>
<li>起别名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from USER where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-resultMap"><a href="#2-resultMap" class="headerlink" title="2. resultMap"></a>2. resultMap</h3><p>结果集映射</p>
<blockquote>
<p>id name pwd</p>
<p>id name password</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from USER</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li>
<li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li>
<li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。</li>
<li>如果这个世界总是这么简单就好了。</li>
</ul>
<h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错，日志就是最好的助手！</p>
<p>曾经：sout、debug</p>
<p>现在：日志工厂</p>
<p><img src="https://img-blog.csdnimg.cn/20200623164920502.png" alt="img"></p>
<ul>
<li>SLF4J</li>
<li>LOG4J 【掌握】</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING 【掌握】</li>
<li>NO_LOGGING</li>
</ul>
<p>在MyBatis中具体使用哪一个日志实现，在设置中设定</p>
<p><strong>STDOUT_LOGGING</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2020062316493391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="6-2-Log4j"><a href="#6-2-Log4j" class="headerlink" title="6.2 Log4j"></a>6.2 Log4j</h3><p>什么是Log4j？</p>
<ul>
<li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995" target="_blank" rel="noopener">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件；</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程；</li>
<li>最令人感兴趣的就是，这些可以通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>log4j.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="line">log4j.rootLogger=DEBUG,console,file</span><br><span class="line"></span><br><span class="line">#控制台输出的相关设置</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><br><span class="line">#文件输出的相关设置</span><br><span class="line">log4j.appender.file = org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/rzp.log</span><br><span class="line">log4j.appender.file.MaxFileSize=10mb</span><br><span class="line">log4j.appender.file.Threshold=DEBUG</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line">#日志输出级别</span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sq1.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置settings为log4j实现</p>
</li>
<li><p>测试运行</p>
</li>
</ol>
<p><strong>Log4j简单使用</strong></p>
<ol>
<li><p>在要使用Log4j的类中，导入包 import org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，参数为当前类的class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = Logger.getLogger(UserDaoTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">"info: 测试log4j"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug: 测试log4j"</span>);</span><br><span class="line">logger.error(<span class="string">"error:测试log4j"</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>info</li>
<li>debug</li>
<li>error</li>
</ol>
</li>
</ol>
<h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h3 id="7-1-使用Limit分页"><a href="#7-1-使用Limit分页" class="headerlink" title="7.1 使用Limit分页"></a>7.1 <strong>使用Limit分页</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">limit</span> startIndex,pageSize</span><br></pre></td></tr></table></figure>

<p><strong>使用MyBatis实现分页，核心SQL</strong></p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLimit"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">"startIndex"</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"pageSize"</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; list = mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h3><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//分页2</span><br><span class="line">List<span class="tag">&lt;<span class="name">User</span>&gt;</span> getUserByRowBounds();</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页查询2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByRowBounds"</span>&gt;</span></span><br><span class="line">    select * from user </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">//RowBounds实现</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//通过Java代码层面实现分页</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.kaung.dao.UserMapper.getUserByRowBounds"</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p><a href="https://pagehelper.github.io/" target="_blank" rel="noopener">MyBatis 分页插件 PageHelper</a></p>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1-面向接口开发"><a href="#8-1-面向接口开发" class="headerlink" title="8.1 面向接口开发"></a>8.1 面向接口开发</h3><p><strong>三个面向区别</strong></p>
<ul>
<li>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性和方法；</li>
<li>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现；</li>
<li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构；</li>
</ul>
<h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要在核心配置文件中绑定接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.kuang.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<p>本质：反射机制实现</p>
<p>底层：动态代理<br><img src="https://gitee.com/summer502/img/raw/master/images/20210206141557.png" alt="image-20210206141555404"></p>
<p><strong>MyBatis详细执行流程</strong></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210206142546.png" alt="在这里插入图片描述"></p>
<ol>
<li>将sql语句和数据库配置信息保存在配置文件</li>
<li>在MyBatis运行时，将配置信息存储Configuration对象</li>
<li>在创建SqlSession对象提供属性<ol>
<li>Configuration对象</li>
<li>dirty:true sql语句执行完毕后 可以事务提交<br>false sql语句执行发送错误 事务进行回滚</li>
<li>Executor执行器对象：<br>创建Statement对象，在创建过程中<br>依靠MapperStatement对象将赋值内容与sql占位符<br>进行绑定</li>
</ol>
</li>
<li>SqlSession.commit(): 根据此时dirty属性决定提交和回滚</li>
</ol>
<h3 id="8-3-注解CURD"><a href="#8-3-注解CURD" class="headerlink" title="8.3 注解CURD"></a>8.3 注解CURD</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/<span class="meta">@Select</span>(<span class="string">"select * from teacher"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有多个参数时要加@Param()</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from teacher where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">getUserByID</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into teacher(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update</span>(<span class="string">"update teacher set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from teacher where id=#&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>关于@Param( )注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上</li>
<li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名</li>
<li>@Param(“”) 是 @Param(value=””) 的简写</li>
</ul>
<p><strong>#{} 和 ${}</strong></p>
<p>${} 注入什么就是什么，且如果是简单类型的值需要用 value 来接收<br>#{} 将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号</p>
<p>#方式能够很大程度防止sql注入；$方式无法防止Sql注入。<br> $方式一般用于传入数据库对象，例如传入表名。<br> 一般能用#的就别用$。MyBatis排序时使用order by 动态参数时需要注意，用$而不是#。</p>
<h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><p>Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。</p>
<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件</p>
</li>
<li><p>在项目中导入lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在程序的实体类上加注解</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log</span>4j, <span class="meta">@Log</span>4j2, <span class="meta">@Slf</span>4j, <span class="meta">@XSlf</span>4j, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@val</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/summer502/img/raw/master/images/20210206164744.png" alt="在这里插入图片描述"></p>
<h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><blockquote>
<p>多个学生一个老师；</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_tid <span class="keyword">foreign</span> <span class="keyword">key</span> (tid) <span class="keyword">references</span> teacher(<span class="keyword">id</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-测试环境搭建"><a href="#1-测试环境搭建" class="headerlink" title="1. 测试环境搭建"></a><strong>1. 测试环境搭建</strong></h3><ol>
<li>导入lombok</li>
<li>新建实体类Teacher,Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.xml文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件 【方式很多，随心选】</li>
<li>测试查询是否能够成功</li>
</ol>
<h3 id="2-按照查询嵌套处理"><a href="#2-按照查询嵌套处理" class="headerlink" title="2. 按照查询嵌套处理"></a>2. 按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     思路：</span></span><br><span class="line"><span class="comment">        1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2. 根据查询出来的学生的tid寻找特定的老师 (子查询)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独出来 对象：association 集合：collection--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-按照结果嵌套处理"><a href="#3-按照结果嵌套处理" class="headerlink" title="3.按照结果嵌套处理"></a>3.按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果进行查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span>&gt;</span></span><br><span class="line">    select s.id sid , s.name sname, t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果封装，将查询出来的列封装到对象属性中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>回顾Mysql多对一查询方式:</p>
<ul>
<li>子查询 （按照查询嵌套）</li>
<li>联表查询 （按照结果嵌套）</li>
</ul>
<h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><blockquote>
<p>一个老师多个学生；</p>
<p>对于老师而言，就是一对多的关系；</p>
</blockquote>
<h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-按照结果嵌套嵌套处理"><a href="#2-按照结果嵌套嵌套处理" class="headerlink" title="2. 按照结果嵌套嵌套处理"></a>2. <strong>按照结果嵌套嵌套处理</strong></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    SELECT s.id sid, s.name sname,t.name tname,t.id tid FROM student s, teacher t</span><br><span class="line">    WHERE s.tid = t.id AND tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象：association 集合：collection</span></span><br><span class="line"><span class="comment">    javaType=""指定属性的类型！</span></span><br><span class="line"><span class="comment">    集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--===================================================== --&gt;</span><br><span class="line">    &lt;!--按照查询嵌套处理   子查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getTeacher2"</span> resultMap=<span class="string">"TeacherStudent2"</span>&gt;</span><br><span class="line">    select * from test.teacher1 where id=#&#123;tid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"TeacherStudent2"</span> type=<span class="string">"Teacher"</span>&gt;</span><br><span class="line">    &lt;collection property=<span class="string">"students"</span> javaType=<span class="string">"ArrayList"</span> ofType=<span class="string">"Student"</span> select=<span class="string">"getStudentByTeacherId"</span> column=<span class="string">"id"</span>&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getStudentByTeacherId"</span> resultType=<span class="string">"Student"</span>&gt;</span><br><span class="line">    select * from test.student1 where tid=#&#123;tid&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>关联 - association 【多对一】</li>
<li>集合 - collection 【一对多】</li>
<li>javaType &amp; ofType<ol>
<li>JavaType用来指定实体类中的类型</li>
<li>ofType用来指定映射到List或者集合中的pojo类型，泛型中的约束类型</li>
</ol>
</li>
</ol>
<p><strong>注意点：</strong></p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一，属性名和字段的问题</li>
<li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li>
</ul>
<p>面试高频</p>
<ul>
<li><strong>Mysql引擎</strong></li>
<li><strong>InnoDB底层原理</strong></li>
<li><strong>索引</strong></li>
<li><strong>索引优化</strong></li>
</ul>
<h2 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h2><p><strong>什么是动态SQL：动态SQL就是根据不同的条件生成不同的SQL语句</strong></p>
<p><strong>所谓的动态SQL，本质上还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码</strong></p>
<hr>
<blockquote>
<p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p>
</blockquote>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span>(</span><br><span class="line">                       <span class="string">`id`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客id'</span>,</span><br><span class="line">                       <span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客标题'</span>,</span><br><span class="line">                       <span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客作者'</span>,</span><br><span class="line">                       <span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">                       <span class="string">`views`</span> <span class="built_in">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'浏览量'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<p>创建一个基础工程</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">// 属性名和字段名不一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类对应Mapper接口和Mapper.xml文件</p>
</li>
<li><pre><code class="xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>#使得只能在test模块下测试
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### IF</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">&lt;select id&#x3D;&quot;queryBlogIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;blog&quot;&gt;</span><br><span class="line">    select * from blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;</span><br><span class="line">            and title &#x3D; #&#123;title&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;</span><br><span class="line">            and author &#x3D; #&#123;author&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;select id&#x3D;&quot;queryBlogIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;blog&quot;&gt;</span><br><span class="line">    select * from blog where 1&#x3D;1 </span><br><span class="line">        &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;</span><br><span class="line">            and title &#x3D; #&#123;title&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;</span><br><span class="line">            and author &#x3D; #&#123;author&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></span>
</code></pre>
</li>
</ol>
<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from test.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span></span><br><span class="line">                and author=#&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views=#&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update test.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span>title=#&#123;title&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span>author=#&#123;author&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select * from test.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"and ("</span> <span class="attr">separator</span>=<span class="string">"or"</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p>
<p><strong>提示</strong> 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 <em>foreach</em>。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便服用！</p>
<ol>
<li><p>使用SQL标签抽取公共部分可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意事项：</p>
<ul>
<li>最好基于单标来定义SQL片段</li>
<li>不要存在where标签</li>
</ul>
<p><strong>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</strong></p>
<p>建议：</p>
<ul>
<li>先在Mysql中写出完整的SQL，再对应的去修改成我们的动态SQL实现通用即可</li>
</ul>
<h2 id="13、缓存"><a href="#13、缓存" class="headerlink" title="13、缓存"></a>13、缓存</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><blockquote>
<p>查询 ： 连接数据库，耗资源</p>
<p>一次查询的结果，给他暂存一个可以直接取到的地方 –&gt; 内存：缓存</p>
<p>我们再次查询的相同数据的时候，直接走缓存，不走数据库了</p>
</blockquote>
<ol>
<li>什么是缓存[Cache]？<ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题</li>
</ul>
</li>
<li>为什么使用缓存？<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率</li>
</ul>
</li>
<li>什么样的数据可以使用缓存？<ul>
<li>经常查询并且不经常改变的数据 【可以使用缓存】</li>
</ul>
</li>
</ol>
<h3 id="13-2-MyBatis缓存"><a href="#13-2-MyBatis缓存" class="headerlink" title="13.2 MyBatis缓存"></a>13.2 MyBatis缓存</h3><ul>
<li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便的定制和配置缓存，缓存可以极大的提高查询效率。</p>
</li>
<li><p>MyBatis系统中默认定义了两级缓存：</p>
<p>一级缓存</p>
<p>和</p>
<p>二级缓存</p>
<ul>
<li>默认情况下，只有一级缓存开启（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高可扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来定义二级缓存。</li>
</ul>
</li>
</ul>
<h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><ul>
<li>一级缓存也叫本地缓存：SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li><p>开启日志</p>
</li>
<li><p>测试在一个Session中查询两次记录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"====================================="</span>);</span><br><span class="line"></span><br><span class="line">    User user2 =  mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2 == user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看日志输出</p>
</li>
</ol>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210206213236.png" alt="image-20210206213233582"></p>
<p><strong>缓存失效的情况：</strong></p>
<ol>
<li><p>查询不同的东西</p>
</li>
<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存</p>
</li>
<li><p>查询不同的Mapper.xml</p>
</li>
<li><p>手动清理缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.clearCache();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>小结：一级缓存默认是开启的，只在远程sqlsession中有效，也就是拿到连接到关闭连接这个区间段！一级缓存就是一个Map。</strong></p>
<h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>
<li>如果会话关闭了，这个会员对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容</li>
<li>不同的mapper查询出的数据会放在自己对应的缓存（map）中</li>
</ul>
</li>
</ul>
<p>一级缓存开启（SqlSession级别的缓存，也称为本地缓存）</p>
<ul>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高可扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来定义二级缓存。</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Mapper.xml中使用缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">       <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ol>
<li>问题：我们需要将实体类序列化，否则就会报错</li>
</ol>
</li>
</ol>
<p><strong>小结：</strong></p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会放在一级缓存中</li>
<li>只有当前会话提交，或者关闭的时候，才会提交到二级缓存中</li>
</ul>
<h3 id="13-5-缓存原理"><a href="#13-5-缓存原理" class="headerlink" title="13.5 缓存原理"></a>13.5 缓存原理</h3><p><img src="https://gitee.com/summer502/img/raw/master/images/20210206224349.png" alt="image-20210206224345526"></p>
<p><strong>注意：</strong></p>
<ul>
<li><p>只有查询才有缓存，根据数据是否需要缓存（修改是否频繁选择是否开启）useCache=“true”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="13-6-自定义缓存-ehcache"><a href="#13-6-自定义缓存-ehcache" class="headerlink" title="13.6 自定义缓存-ehcache"></a>13.6 自定义缓存-ehcache</h3><blockquote>
<p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</p>
</blockquote>
<ol>
<li><p>导包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在mapper中指定使用我们的ehcache缓存实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>spring5</title>
    <url>/2021/02/08/spring5/</url>
    <content><![CDATA[<h2 id="1、Spring（2020-11-9）"><a href="#1、Spring（2020-11-9）" class="headerlink" title="1、Spring（2020-11-9）"></a>1、Spring（2020-11-9）</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><ul>
<li>Spring：春天——&gt;给软件行业带来了春天！</li>
<li>2002，首次推出了Spring框架的雏形：interface21框架！</li>
<li>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版。</li>
<li><strong>Rod Johnson</strong>，Spring Framework创始人，著名作者。很难想象Rod Johnson的学历，真的让好多人大吃一惊，他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</li>
<li>Spring理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架！</li>
<li>SSH：Struct2 + Spring + Hibernate!</li>
<li>SSM：SpringMVC + Spring + Mybatis!</li>
</ul>
<p>官网：<a href="https://spring.io/projects/spring-framework#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-framework#overview</a><br>官方下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a><br>GitHub：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ul>
<li>Spring是一个开源的免费的框架（容器）！</li>
<li>Spring是一个轻量级的、非入侵式的框架！</li>
<li>控制反转（IOC），面向切面编程（AOP）！</li>
<li>支持事务的处理，对框架整合的支持！</li>
</ul>
<p>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！</p>
<h3 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h3><p><img src="https://gitee.com/summer502/img/raw/master/images/20210207123405.png" alt=""></p>
<h3 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h3><p>现代化的Java开发！说白就是基于Spring的开发！</p>
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架。</li>
<li>基于SpringBoot可以快速的开发单个微服务。</li>
<li>约定大于配置。</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>SpringCloud是基于SpringBoot实现的。</li>
</ul>
</li>
</ul>
<p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！<strong>承上启下的作用！</strong></p>
<p><strong>弊端：发展了太久之后，违背了原来的理念！配置十分繁琐，人称：“配置地狱！”</strong></p>
<h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><ol>
<li>UserDao 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>UserDaoImpl 实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"默认获取用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>UserService 业务接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>UserServiceImpl 业务实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，dao层他们不需要接触！</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！<br><img src="https://gitee.com/summer502/img/raw/master/images/20210207142642.png" alt="image-20210207142639728"></p>
<p>我们使用一个Set接口实现，已经发生了革命性的变化！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用set进行动态实现值的注入！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>之前，程序是主动创建对象！控制权在程序猿手上！</li>
<li>使用了set注入后，程序不再具有主动性，而是变成了被动的接收对象！</li>
</ul>
<p>这种思想，从本质上解决了问题，我们程序猿不用再去管理对象的创建了。系统的耦合性大大降低~，可以更加专注的在业务的实现上！这是IOC的原型！<br><img src="https://gitee.com/summer502/img/raw/master/images/20210207144636.png" alt="image-20210207144634848"></p>
<h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><strong>控制反转IoC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p>
<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。<br><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection，DI）。</strong></p>
<h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><ol>
<li>新建一个maven项目，编写实体类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello&#123;"</span> +</span><br><span class="line">                <span class="string">"str='"</span> + str + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>编写xml配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean</span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    id = 变量名</span></span><br><span class="line"><span class="comment">    class = new的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置一个值！</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象！</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们的对象现在都在Spring中的管理了，我们需要使用，直接去里面取出来就可以！</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>思考问题？</strong></p>
<ul>
<li>Hello对象是谁创建的？<br>Hello对象是由Spring创建的。</li>
<li>Hello对象的属性是怎么设置的？<br>Hello对象的属性是由Spring容器设置的。</li>
</ul>
<p>这个过程就叫控制反转：</p>
<p><strong>控制</strong>：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。</p>
<p><strong>反转</strong>：程序本身不创建对象，而变成被动的接收对象。</p>
<p><strong>依赖注入</strong>：就是利用set方法来进行注入的。</p>
<p>IOC是一种编程思想，由主动的编程变成被动的接收。</p>
<p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码。</p>
<p><strong>OK，到了现在，我们彻底不用在程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IOC，一句话搞定：对象由Spring来创建，管理，装配！</strong></p>
<h2 id="4、IOC创建对象的方式（2020-11-10）"><a href="#4、IOC创建对象的方式（2020-11-10）" class="headerlink" title="4、IOC创建对象的方式（2020-11-10）"></a>4、IOC创建对象的方式（2020-11-10）</h2><ol>
<li><p>使用无参构造创建对象，默认！</p>
</li>
<li><p>假设我们要使用有参构造创建对象。</p>
<ol>
<li>下标赋值</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种方式：下标赋值    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"狂神说Java"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>类型</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式：通过类型的创建，不建议使用    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"lifa"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>参数名</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种方式：直接通过参数名来设置    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李发"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</p>
<h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名，如果添加了别名，我们也可以使用别名获取到这个对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"userNew"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id：bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">class：bean对象所对应的全限定名：包名+类名</span></span><br><span class="line"><span class="comment">name：也是别名，而且name可以同时取多个别名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userT"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.UserT"</span> <span class="attr">name</span>=<span class="string">"user2 u2,u3;u4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"黑心白莲"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>这个import。一般用于团队开发使用，它可以将多个配置文件，导入合并为一个。<br>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p>
<ul>
<li><p>张三</p>
</li>
<li><p>李四</p>
</li>
<li><p>王五</p>
</li>
<li><p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"bean.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"bean2.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"bean3.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>使用的时候，直接使用总的配置就可以了。</p>
<h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h3 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h3><p>前面已经介绍过，参考<strong>4、IOC创建对象的方式</strong></p>
<h3 id="6-2-Set方式注入【重点】"><a href="#6-2-Set方式注入【重点】" class="headerlink" title="6.2 Set方式注入【重点】"></a>6.2 Set方式注入【重点】</h3><ul>
<li>依赖注入：Set注入<ul>
<li>依赖：bean对象的创建依赖于容器！</li>
<li>注入：bean对象中的所有属性，由容器来注入！</li>
</ul>
</li>
</ul>
<p>【环境搭建】</p>
<ol>
<li>复杂类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>真实测试对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>beans.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"黑心白莲"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>完善注入信息</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"西安"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"黑心白莲"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第二种：        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数组        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--List        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Map        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"身份证"</span> <span class="attr">value</span>=<span class="string">"123456789987456321"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"银行卡"</span> <span class="attr">value</span>=<span class="string">"359419496419481649"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Set        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--NULL        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Properties        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driver"</span>&gt;</span>20191029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>102.0913.524.4585<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"user"</span>&gt;</span>黑心白莲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-拓展方式注入"><a href="#6-3-拓展方式注入" class="headerlink" title="6.3 拓展方式注入"></a>6.3 拓展方式注入</h3><p>我们可以使用p命名空间和c命名空间进行注入<br>使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span> <span class="attr">p:name</span>=<span class="string">"黑心白莲"</span> <span class="attr">p:age</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间注入，通过构造器注入：constructor-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span> <span class="attr">c:name</span>=<span class="string">"狂神"</span> <span class="attr">c:age</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"userbeans.xml"</span>);</span><br><span class="line"></span><br><span class="line">    User user = context.getBean(<span class="string">"user"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    User user2 = context.getBean(<span class="string">"user2"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点：p命名和c命名空间不能直接使用，需要导入xml约束！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span><br></pre></td></tr></table></figure>

<h3 id="6-4-bean的作用域"><a href="#6-4-bean的作用域" class="headerlink" title="6.4 bean的作用域"></a>6.4 bean的作用域</h3><p><img src="https://gitee.com/summer502/img/raw/master/images/20210208133858.png" alt="image-20210208133857126"></p>
<ol>
<li>单例模式（Spring默认机制）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span> <span class="attr">c:name</span>=<span class="string">"狂神"</span> <span class="attr">c:age</span>=<span class="string">"22"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>原型模式：每次从容器中get的时候，都会产生一个新对象！</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span> <span class="attr">c:name</span>=<span class="string">"狂神"</span> <span class="attr">c:age</span>=<span class="string">"22"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>其余的request、session、application、这些只能在web开发中使用到！</li>
</ol>
<h2 id="7、Bean的自动装配（2020-11-11）"><a href="#7、Bean的自动装配（2020-11-11）" class="headerlink" title="7、Bean的自动装配（2020-11-11）"></a>7、Bean的自动装配（2020-11-11）</h2><ul>
<li>自动装配是Spring满足bean依赖一种方式！</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性！</li>
</ul>
<p>在Spring中有三种装配的方式：</p>
<ol>
<li>在xml中显式的配置；</li>
<li>在java中显式配置；</li>
<li>隐式的自动装配bean【重要】</li>
</ol>
<h3 id="7-1-测试"><a href="#7-1-测试" class="headerlink" title="7.1 测试"></a>7.1 测试</h3><p>环境搭建：创建项目，一个人有两个宠物！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Dog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.People"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小白莲"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-ByName自动装配"><a href="#7-2-ByName自动装配" class="headerlink" title="7.2 ByName自动装配"></a>7.2 ByName自动装配</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byName：会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id！</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小白莲"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-ByType自动装配"><a href="#7-3-ByType自动装配" class="headerlink" title="7.3 ByType自动装配"></a>7.3 ByType自动装配</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean！</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小白莲"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>ByName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致！</li>
<li>ByType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致！</li>
</ul>
<h3 id="7-4-使用注解实现自动装配"><a href="#7-4-使用注解实现自动装配" class="headerlink" title="7.4 使用注解实现自动装配"></a>7.4 使用注解实现自动装配</h3><p>jdk1.5支持的注解，Spring2.5就支持注解了！</p>
<p>要使用注解须知：</p>
<ol>
<li><p>导入约束</p>
</li>
<li><p>配置注解的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--开启注解的支持    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>@Autowired</strong></p>
<p>直接在属性上使用即可！也可以在set方法上使用！</p>
<p>使用Autowired我们就可以不用编写set方法了，前提是你这个自动配置的属性在IOC（Spring）容器中存在，且符合名字ByName！</p>
<p><strong>科普：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="comment">//字段标记了了这个注解，说明这个字段可以为null;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value = “xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"cat111"</span>)</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"dog222"</span>)</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Resource</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>@Resource和@Autowired的区别：</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired通过byType的方式实现，而且必须要求这个对象存在！【常用】</li>
<li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li>
<li>执行顺序不同：@Autowired通过byType的方式实现。</li>
</ul>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了<br><img src="https://gitee.com/summer502/img/raw/master/images/20210208121205.png" alt="image-20210208121204517"><br>使用注解需要导入约束，配置注解的支持！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--开启注解的支持    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>bean</p>
</li>
<li><p>属性如何注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id="user" class="com.kuang.pojo.User"/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于  &lt;property name="name" value="白莲"/&gt;</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"白莲"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>衍生的注解<br>@Component有几个衍生注解，我们在web开发中，会按照mvc三层架构分层！</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">dao 【@Repository】</span><br><span class="line">service 【@Service】</span><br><span class="line">controller 【@Controller】</span><br></pre></td></tr></table></figure>

<p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</p>
</li>
<li><p>自动装配</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>@Autowired：自动装配通过类型，名字。如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value = "xxx")去配置。</span><br><span class="line"><span class="bullet">- </span>@Nullable 字段标记了了这个注解，说明这个字段可以为null;</span><br><span class="line"><span class="bullet">- </span>@Resource：自动装配通过名字，类型。</span><br></pre></td></tr></table></figure>
</li>
<li><p>作用域</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>) <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于  &lt;property name="name" value="白莲"/&gt;</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"白莲"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>小结<br><strong>xml与注解：</strong><br>xml更加万能，适用于任何场合！维护简单方便<br>注解不是自己类使用不了，维护相队复杂！<br><strong>xml与注解最佳实践：</strong><br>xml用来管理bean；<br>注解只负责完成属性的注入；<br>我们在使用的过程中，只需要注意一个问题：必须让注解生效，就需要开启注解的支持</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解的支持    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9、使用Java的方式配置Spring"><a href="#9、使用Java的方式配置Spring" class="headerlink" title="9、使用Java的方式配置Spring"></a>9、使用Java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了，全权交给Java来做！<br>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能！<br><img src="https://gitee.com/summer502/img/raw/master/images/20210208133818.png" alt="image-20210208133817873"><br>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里这个注解的意思，就是说明这个类被Spring接管了，注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"黑心白莲"</span>) <span class="comment">//属性注入值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个也会Spring容器托管，注册到容器中，因为它本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.kuang.pojo"</span>)</span><br><span class="line"><span class="meta">@Import</span>(KuangConfig2<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">KuangConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个bean，就相当于我们之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">// 这个方法的名字，就相当于bean标签中id属性</span></span><br><span class="line">    <span class="comment">// 这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(); <span class="comment">// 就是返回要注入到bean的对象！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果完全使用了配置类方式去做，我们就只能通过 AnnotationConfig 上下文来获取容器，通过配置类的class对象加载！</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(KuangConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        User user = context.getBean(<span class="string">"user"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种纯Java的配置方式，在SpringBoot中随处可见！</p>
<h2 id="10、代理模式（2020-11-12）（2020-11-20）"><a href="#10、代理模式（2020-11-12）（2020-11-20）" class="headerlink" title="10、代理模式（2020-11-12）（2020-11-20）"></a>10、代理模式（2020-11-12）（2020-11-20）</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p>
<p>代理模式的分类：</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210208133734.png" alt="image-20210208133722015"></p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h3 id="10-1-静态代理"><a href="#10-1-静态代理" class="headerlink" title="10.1 静态代理"></a>10.1 静态代理</h3><p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li>
<li>客户：访问代理对象的人！</li>
</ul>
<p>代码步骤：</p>
<ol>
<li>接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>真实角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东出租房子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>代理角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        host.rent();</span><br><span class="line">        seeHouse();</span><br><span class="line">        sign();</span><br><span class="line">        fee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介带着看房子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//签合同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"和中介签署租赁合同！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收费用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介收取费用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>客户端访问代理角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房东要出租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"><span class="comment">//        host.rent();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理，中介帮房东出租房子，并且代理角色一般会有一些附属操作！</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不用面对房东，直接找中介租房即可！</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共角色就交给代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低~</li>
</ul>
<h3 id="10-2-加深理解"><a href="#10-2-加深理解" class="headerlink" title="10.2 加深理解"></a>10.2 加深理解</h3><p>代码步骤：</p>
<ol>
<li>接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>真实角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>代理角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"add"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"delete"</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"update"</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"query"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[Debug] 使用了一个"</span>+msg+<span class="string">"方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>客户端访问代理角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line"></span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>聊聊AOP</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210208140655.png" alt="image-20210208140653807"></p>
<h3 id="10-3-动态代理"><a href="#10-3-动态代理" class="headerlink" title="10.3 动态代理"></a>10.3 动态代理</h3><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成的，不是我们直接写好的！</li>
<li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul>
<li>基于接口 — JDK动态代理【我们在这里使用】</li>
<li>基于类：cglib</li>
<li>java字节码实现：javassist</li>
</ul>
</li>
</ul>
<p>需要了解两个类：Proxy：代理；InvocationHandler：调用处理程序。</p>
<p>代码步骤：</p>
<ol>
<li>接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>真实角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>ProxyInvocationHandler类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们会用这个类，自动生成代理类！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//动态代理的本质，就是使用反射机制实现！</span></span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line">        seeHose();</span><br><span class="line">        fee();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介带着看房子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介收取费用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色：现在没有</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过调用程序处理角色来处理我们要调用的接口对象！</span></span><br><span class="line">        pih.setRent(host);</span><br><span class="line">        Rent proxy = (Rent) pih.getProxy(); <span class="comment">//这里的proxy就是动态生成的，我们并没有写</span></span><br><span class="line">        proxy.rent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此，我们可以提炼出ProxyInvocationHandler作为工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用这个类自动生成代理类！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[Debug] 使用了一个"</span>+msg+<span class="string">"方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共角色就交给代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>
<li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可！</li>
</ul>
<h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1-什么是AOP"><a href="#11-1-什么是AOP" class="headerlink" title="11.1 什么是AOP"></a>11.1 什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br><img src="https://gitee.com/summer502/img/raw/master/images/20210208182803.png" alt="image-20210208182759709"></p>
<h3 id="11-2-AOP在Spring中的作用"><a href="#11-2-AOP在Spring中的作用" class="headerlink" title="11.2 AOP在Spring中的作用"></a>11.2 AOP在Spring中的作用</h3><p>提供声明式事务；允许用户自定义切面</p>
<ul>
<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等…</li>
<li>切面（ASPECT）：横切关注点被模块化的特殊对象。即，它是一个类。</li>
<li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li>
<li>目标（Target）：被通知对象。</li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li>
<li>切入点（PointCut）：切面通知执行的“地点”的定义。</li>
<li>连接点（JointPoint）：与切入点匹配的执行点。</li>
</ul>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210208182941.png" alt="image-20210208182939064"><br>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice：<br><img src="https://gitee.com/summer502/img/raw/master/images/20210208183023.png" alt="image-20210208183022259"><br><img src="https://gitee.com/summer502/img/raw/master/images/20210208183058.png" alt="image-20210208183057356"><br>即AOP在不改变原有代码的情况下，去增加新的功能。</p>
<h3 id="11-3-使用Spring实现AOP"><a href="#11-3-使用Spring实现AOP" class="headerlink" title="11.3 使用Spring实现AOP"></a>11.3 使用Spring实现AOP</h3><p>【重点】使用AOP织入，需要导入一个依赖包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式一：</strong> 使用Spring的API接口【主要是SpringAPI接口实现】</p>
<ol>
<li>在service包下，定义UserService业务接口和UserServiceImpl实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>在log包下，定义我们的增强类，一个Log前置增强和一个AfterLog后置增强类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//method: 要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args：参数</span></span><br><span class="line">    <span class="comment">//target：目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] agrs, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">"的"</span>+method.getName()+<span class="string">"被执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//returnValue： 返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了"</span>+method.getName()+<span class="string">"方法，返回结果为："</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束，配置applicationContext.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.kuang.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.kuang.log.Log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.kuang.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop:需要导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点：expression：表达式，execution(要执行的位置！* * * * *)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.kuang.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态代理代理的是接口：注意点</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line"><span class="comment">//        userService.select();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong> 自定义类来实现AOP【主要是切面定义】</p>
<ol>
<li>在diy包下定义自己的DiyPointCut切入类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======方法执行前======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======方法执行后======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>去spring中配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diy"</span> <span class="attr">class</span>=<span class="string">"com.kuang.diy.DiyPointCut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面，ref 要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.kuang.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<p><strong>方式三：</strong> 使用注解实现！</p>
<ol>
<li>在diy包下定义注解实现的AnnotationPointCut增强类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明式事务！</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.kuang.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====方法执行前===="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.kuang.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====方法执行后===="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给定一个参数，代表我们要获取处理切入的点；</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.kuang.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line"></span><br><span class="line">        Signature signature = jp.getSignature();<span class="comment">// 获得签名</span></span><br><span class="line">        System.out.println(<span class="string">"signature:"</span>+signature);</span><br><span class="line"></span><br><span class="line">        Object proceed = jp.proceed(); <span class="comment">//执行方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>在Spring配置文件中，注册bean，并增加支持注解的配置。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三：使用注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"annotationPointCut"</span> <span class="attr">class</span>=<span class="string">"com.kuang.diy.AnnotationPointCut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持！ JDK(默认是 proxy-target-class="false")  cglib（proxy-target-class="true"）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<h2 id="12、整合Mybatis（2020-11-21）"><a href="#12、整合Mybatis（2020-11-21）" class="headerlink" title="12、整合Mybatis（2020-11-21）"></a>12、整合Mybatis（2020-11-21）</h2><p>步骤：</p>
<ol>
<li>导入相关jar包<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring相关</li>
<li>aop织入器</li>
<li>mybatis-spring整合包【重点】在此还导入了lombok包。</li>
<li>配置Maven静态资源过滤问题！</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring操作数据库的话，还需要一个spring-jdbc</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>编写配置文件</li>
<li>测试</li>
</ol>
<h3 id="12-1-回忆mybatis"><a href="#12-1-回忆mybatis" class="headerlink" title="12.1 回忆mybatis"></a>12.1 回忆mybatis</h3><ol>
<li>编写pojo实体类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>编写实现mybatis的配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kuang.pojo"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kuang.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>编写UserMapper接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>编写UserMapper.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kuang.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">   String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">   InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">   SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">   SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">   UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">   List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">   <span class="keyword">for</span> (User user: userList)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-2-Mybatis-Spring"><a href="#12-2-Mybatis-Spring" class="headerlink" title="12.2 Mybatis-Spring"></a>12.2 Mybatis-Spring</h3><p><strong>什么是MyBatis-Spring？</strong></p>
<p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</p>
<p>文档链接：<a href="http://mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/index.html</a></p>
<p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>整合实现一：</strong></p>
<ol>
<li>引入Spring配置文件spring-dao.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="GBK"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/beans&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li>配置数据源替换mybaits的数据源</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DataSource:使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid</span></span><br><span class="line"><span class="comment">我们这里使用Spring提供的JDBC：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>配置SqlSessionFactory，关联MyBatis</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联mybatis配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/kuang/mapper/*.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>注册sqlSessionTemplate，关联sqlSessionFactory</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SqlSessionTemplate:就是我们使用的sqlSession--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>需要UserMapper接口的UserMapperImpl 实现类，私有化sqlSessionTemplate</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们的所有操作，都使用sqlSession来执行，在原来，现在都使用SqlsessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>将自己写的实现类，注入到Spring配置文件中。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.kuang.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试使用即可！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-dao.xml"</span>);</span><br><span class="line">    </span><br><span class="line">    UserMapper userMapper = context.getBean(<span class="string">"userMapper"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (User user : userMapper.selectUser()) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="GBK" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration core file--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kuang.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>整合实现二：</strong></p>
<p>mybatis-spring1.2.3版以上的才有这个，官方文档截图：</p>
<p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起整合方式一 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看。<br><img src="https://gitee.com/summer502/img/raw/master/images/20210208183224.png" alt="image-20210208183222408"><br>测试：</p>
<ol>
<li>将我们上面写的UserMapperImpl修改一下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper<span class="class">.<span class="keyword">class</span>).<span class="title">selectUser</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>注入到Spring配置文件中。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.kuang.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-dao.xml"</span>);</span><br><span class="line">    </span><br><span class="line">    UserMapper userMapper = context.getBean(<span class="string">"userMapper"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (User user : userMapper.selectUser()) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h2><h3 id="13-1-回顾事务"><a href="#13-1-回顾事务" class="headerlink" title="13.1 回顾事务"></a>13.1 回顾事务</h3><ul>
<li>把一组业务当成一个业务来做；要么都成功，要么都失败！</li>
<li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎！</li>
<li>确保完整性和一致性。</li>
</ul>
<p><strong>事务ACID原则：</strong></p>
<ul>
<li>原子性（atomicity）<ul>
<li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用。</li>
</ul>
</li>
<li>一致性（consistency）<ul>
<li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中。</li>
</ul>
</li>
<li>隔离性（isolation）<ul>
<li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li>
</ul>
</li>
<li>持久性（durability）<ul>
<li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中。</li>
</ul>
</li>
</ul>
<p><strong>测试：</strong></p>
<p>将上面的代码拷贝到一个新项目中<br>在之前的案例中，我们给userMapper接口新增两个方法，删除和增加用户；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>UserMapper文件，我们故意把 deletes 写错，测试！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">deletes from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写接口的UserMapperImpl实现类，在实现类中，我们去操作一波</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一些操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">"小王"</span>, <span class="string">"185161"</span>);</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mapper.addUser(user);</span><br><span class="line">        mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper<span class="class">.<span class="keyword">class</span>).<span class="title">addUser</span>(<span class="title">user</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper<span class="class">.<span class="keyword">class</span>).<span class="title">deleteUser</span>(<span class="title">id</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = context.getBean(<span class="string">"userMapper"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userMapper.selectUser()) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错：sql异常，delete写错了</p>
<p>结果 ：数据库结果显示插入成功！</p>
<p>没有进行事务的管理；我们想让他们都成功才成功，有一个失败，就都失败，我们就应该需要事务！</p>
<p>以前我们都需要自己手动管理事务，十分麻烦！</p>
<p>但是Spring给我们提供了事务管理，我们只需要配置即可；</p>
<h3 id="13-2-Spring中的事务管理"><a href="#13-2-Spring中的事务管理" class="headerlink" title="13.2 Spring中的事务管理"></a>13.2 Spring中的事务管理</h3><p>Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以使用Spring的事务管理机制。Spring支持编程式事务管理和声明式的事务管理。</p>
<p><strong>编程式事务管理</strong></p>
<ul>
<li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li>
<li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li>
</ul>
<p><strong>声明式事务管理</strong></p>
<ul>
<li>一般情况下比编程式事务好用。</li>
<li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li>
<li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理。</li>
</ul>
<p><strong>1. 使用Spring管理事务，注意头文件的约束导入 : tx</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx="http://www.springframework.org/schema/tx"</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2. JDBC事务</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 配置好事务管理器后我们需要去配置事务的通知</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给那些方法配置事务--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的传播特性： new --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring事务传播特性：</strong><br>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p>
<ul>
<li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li>
<li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li>
<li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li>
<li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li>
<li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li>
<li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。</li>
</ul>
<p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</p>
<p>就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！</p>
<p><strong>4. 配置AOP，导入aop的头文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.kuang.mapper.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>5. 删掉刚才插入的数据，再次测试！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = context.getBean(<span class="string">"userMapper"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userMapper.selectUser()) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>思考：</strong></p>
<p>为什么需要事务？</p>
<ul>
<li>如果不配置事务，可能存在数据提交不一致的情况；</li>
<li>如果我们不在Spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li>
<li>事务在项目的开发中十分重要，涉及到数据的一致性和完整性问题，不容马虎！</li>
</ul>
]]></content>
      <categories>
        <category>java框架</category>
      </categories>
      <tags>
        <tag>spring5</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc学习总结</title>
    <url>/2021/02/10/springmvc%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="1、回顾mvc"><a href="#1、回顾mvc" class="headerlink" title="1、回顾mvc"></a>1、回顾mvc</h1><h2 id="1-1、什么是mvc"><a href="#1-1、什么是mvc" class="headerlink" title="1.1、什么是mvc"></a>1.1、什么是mvc</h2><ul>
<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li>
<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>
<li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li>
<li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li>
</ul>
<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>
<a id="more"></a>

<p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209125119.png" alt="image-20210209125118127"></p>
<h2 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h2><ul>
<li>在web早期的开发中，通常采用的都是Model1。</li>
<li>Model1中，主要分为两层，视图层和模型层。</li>
</ul>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209125211.png" alt="image-20210209125208975"></p>
<p>Model1优点：架构简单，比较适合小型项目开发；</p>
<p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p>
<h2 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h2><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209124759.png" alt="image-20210209124758371"></p>
<ol>
<li>用户发请求</li>
<li>Servlet接收请求数据，并调用对应的业务逻辑方法</li>
<li>业务处理完毕，返回更新后的数据给servlet</li>
<li>servlet转向到JSP，由JSP来渲染页面</li>
<li>响应给前端更新后的页面</li>
</ol>
<p><strong>职责分析：</strong></p>
<p><strong>Controller：控制器</strong></p>
<ol>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ol>
<p><strong>Model：模型</strong></p>
<ol>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ol>
<p><strong>View：视图</strong></p>
<ol>
<li>显示页面</li>
</ol>
<p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p>
<h2 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h2><ol>
<li><p>新建一个Maven工程当做父工程！pom依赖！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p>
</li>
<li><p>导入servlet 和 jsp 的 jar 依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写一个Servlet类，用来处理用户的请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kuang.servlet;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实现Servlet接口</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">   @Override</span><br><span class="line">   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throwsServletException, IOException &#123;</span><br><span class="line">       &#x2F;&#x2F;取得参数</span><br><span class="line">       String method &#x3D; req.getParameter(&quot;method&quot;);</span><br><span class="line">       if (method.equals(&quot;add&quot;))&#123;</span><br><span class="line">           req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了add方法&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">       if (method.equals(&quot;delete&quot;))&#123;</span><br><span class="line">           req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了delete方法&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">       &#x2F;&#x2F;业务逻辑</span><br><span class="line">       &#x2F;&#x2F;视图跳转</span><br><span class="line">       req.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp&quot;).forward(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throwsServletException, IOException &#123;</span><br><span class="line">       doGet(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Kuangshen&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在web.xml中注册Servlet</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">        xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">        version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;HelloServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;com.kuang.servlet.HelloServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;HelloServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;&#x2F;user&lt;&#x2F;url-pattern&gt;</span><br><span class="line">   &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Tomcat，并启动测试</p>
</li>
<li><ul>
<li>localhost:8080/user?method=add</li>
<li>localhost:8080/user?method=delete</li>
</ul>
</li>
</ol>
<p><strong>MVC框架要做哪些事情</strong></p>
<ol>
<li>将url映射到java类或java类的方法 .</li>
<li>封装用户提交的数据 .</li>
<li>处理请求–调用相关的业务处理–封装响应数据 .</li>
<li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li>
</ol>
<p><strong>说明：</strong></p>
<p> 常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等…</p>
<h1 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h1><h2 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h2><p><img src="https://gitee.com/summer502/img/raw/master/images/20210209125249.png" alt="image-20210209125247036"></p>
<p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p>
<p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
<p><strong>我们为什么要学习SpringMVC呢?</strong></p>
<p>Spring MVC的特点：</p>
<ol>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>
<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>
<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等…所以我们要学习 .</p>
<p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong></p>
<h2 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h2><p> Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p>
<p> Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，<strong>DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)</strong>。</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209131156.png" alt="image-20210209131152887"></p>
<p>SpringMVC的原理如下图所示：</p>
<p> 当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209131451.png" alt="image-20210209131449372"></p>
<h2 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h2><p><img src="https://gitee.com/summer502/img/raw/master/images/20210209155958.png" alt="image-20210209155955774"></p>
<p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<p><strong>简要分析执行流程</strong></p>
<ol>
<li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p>
<p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello" target="_blank" rel="noopener">http://localhost:8080/SpringMVC/hello</a> </p>
<p><strong>如上url拆分成三部分：</strong></p>
<p><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 服务器域名</p>
<p>SpringMVC部署在服务器上的web站点</p>
<p>hello表示控制器</p>
<p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p>
</li>
<li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p>
</li>
<li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p>
</li>
<li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p>
</li>
<li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p>
</li>
<li><p>Handler让具体的Controller执行。</p>
</li>
<li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p>
</li>
<li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p>
</li>
<li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p>
</li>
<li><p>最终视图呈现给用户。</p>
</li>
</ol>
<p>在这里先听一遍原理，不理解没有关系，我们马上来写一个对应的代码实现大家就明白了，如果不明白，那就写10遍，没有笨人，只有懒人！</p>
<p>现在我们来看看如何快速使用SpringMVC编写我们的程序吧！</p>
<h1 id="3、第一个springmvc程序"><a href="#3、第一个springmvc程序" class="headerlink" title="3、第一个springmvc程序"></a>3、第一个springmvc程序</h1><h2 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h2><p>1、新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p>
<p>2、确定导入了SpringMVC 的依赖！</p>
<p>3、配置web.xml ， 注册DispatcherServlet</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">        xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">        version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--1.注册DispatcherServlet--&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">       &lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">           &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">       &lt;&#x2F;init-param&gt;</span><br><span class="line">       &lt;!--启动级别-1--&gt;</span><br><span class="line">       &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--&#x2F; 匹配所有的请求；（不包括.jsp）--&gt;</span><br><span class="line">   &lt;!--&#x2F;* 匹配所有的请求；（包括.jsp）--&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">   &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>

<p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml</p>
<p>说明，这里的名称要求是按照官方来的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p>5、添加 处理映射器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>6、添加 处理器适配器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>7、添加 视图解析器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;InternalResourceViewResolver&quot;&gt;   &lt;!--前缀--&gt;   &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;  </span><br><span class="line">&lt;!--后缀--&gt;   &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>8、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kuang.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">import org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;注意：这里我们先导入Controller接口</span><br><span class="line">public class HelloController implements Controller &#123;</span><br><span class="line"></span><br><span class="line">   public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">       &#x2F;&#x2F;ModelAndView 模型和视图</span><br><span class="line">       ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;封装对象，放在ModelAndView中。Model</span><br><span class="line">       mv.addObject(&quot;msg&quot;,&quot;HelloSpringMVC!&quot;);</span><br><span class="line">       &#x2F;&#x2F;封装要跳转的视图，放在ModelAndView中</span><br><span class="line">       mv.setViewName(&quot;hello&quot;); &#x2F;&#x2F;: &#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp</span><br><span class="line">       return mv;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9、将自己的类交给SpringIOC容器，注册bean</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--Handler--&gt;&lt;bean id&#x3D;&quot;&#x2F;hello&quot; class&#x3D;&quot;com.kuang.controller.HelloController&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;   </span><br><span class="line">&lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>11、配置Tomcat 启动测试！</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209160158.png" alt="image-20210209160154693"></p>
<p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li>
<li>重启Tomcat 即可解决！</li>
</ol>
<p>小结：看这个估计大部分同学都能理解其中的原理了，但是我们实际开发才不会这么写，不然就疯了，还学这个玩意干嘛！我们来看个注解版实现，这才是SpringMVC的精髓。</p>
<h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><p><strong>1、新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</strong></p>
<p>2、由于Maven可能存在资源过滤的问题，我们将配置完善</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">   &lt;resources&gt;</span><br><span class="line">       &lt;resource&gt;</span><br><span class="line">           &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">           &lt;includes&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">           &lt;&#x2F;includes&gt;</span><br><span class="line">           &lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span><br><span class="line">       &lt;&#x2F;resource&gt;</span><br><span class="line">       &lt;resource&gt;</span><br><span class="line">           &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">           &lt;includes&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">           &lt;&#x2F;includes&gt;</span><br><span class="line">           &lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span><br><span class="line">       &lt;&#x2F;resource&gt;</span><br><span class="line">   &lt;&#x2F;resources&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>

<p>3、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p>
<p><strong>4、配置web.xml</strong></p>
<p>注意点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">        xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">        version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--1.注册servlet--&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">       &lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">           &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">       &lt;&#x2F;init-param&gt;</span><br><span class="line">       &lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br><span class="line">       &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--所有请求都会被springmvc拦截 --&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">   &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>

<p><strong>/ 和 /* 的区别：</strong>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p>
<ol>
<li><ul>
<li>注意web.xml版本问题，要最新版！</li>
<li>注册DispatcherServlet</li>
<li>关联SpringMVC的配置文件</li>
<li>启动级别为1</li>
<li>映射路径为 / 【不要用/*，会404】</li>
</ul>
</li>
<li><p><strong>5、添加Spring MVC配置文件</strong></p>
</li>
<li><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p>
</li>
<li><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
      xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
      xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;

   &lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;
   &lt;context:component-scan base-package=&quot;com.kuang.controller&quot;/&gt;
   &lt;!-- 让Spring MVC不处理静态资源 --&gt;
   &lt;mvc:default-servlet-handler /&gt;
   &lt;!--
   支持mvc注解驱动
       在spring中一般采用@RequestMapping注解来完成映射关系
       要想使@RequestMapping注解生效
       必须向上下文中注册DefaultAnnotationHandlerMapping
       和一个AnnotationMethodHandlerAdapter实例
       这两个实例分别在类级别和方法级别处理。
       而annotation-driven配置帮助我们自动完成上述两个实例的注入。
    --&gt;
   &lt;mvc:annotation-driven /&gt;

   &lt;!-- 视图解析器 --&gt;
   &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;
         id=&quot;internalResourceViewResolver&quot;&gt;
       &lt;!-- 前缀 --&gt;
       &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;
       &lt;!-- 后缀 --&gt;
       &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;
   &lt;/bean&gt;

&lt;/beans&gt;

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 在视图解析器中我们把所有的视图都存放在&#x2F;WEB-INF&#x2F;目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</span><br><span class="line"></span><br><span class="line">6. - 让IOC的注解生效</span><br><span class="line">   - 静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …</span><br><span class="line">   - MVC的注解驱动</span><br><span class="line">   - 配置视图解析器</span><br><span class="line"></span><br><span class="line">7. **6、创建Controller**</span><br><span class="line"></span><br><span class="line">8. 编写一个Java控制类：com.kuang.controller.HelloController , 注意编码规范</span><br><span class="line"></span><br><span class="line">9. </span><br><span class="line"></span><br><span class="line">10.</span><br></pre></td></tr></table></figure>
 package com.kuang.controller;

 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.RequestMapping;

 @Controller
 @RequestMapping(&quot;/HelloController&quot;)
 public class HelloController {

    //真实访问地址 : 项目名/HelloController/hello
    @RequestMapping(&quot;/hello&quot;)
    public String sayHello(Model model){
        //向模型中添加属性msg与值，可以在JSP页面中取出并渲染
        model.addAttribute(&quot;msg&quot;,&quot;hello,SpringMVC&quot;);
        //web-inf/jsp/hello.jsp
        return &quot;hello&quot;;
   }
 }

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">11. - @Controller是为了让Spring IOC容器初始化时自动扫描到；</span><br><span class="line">    - @RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是&#x2F;HelloController&#x2F;hello；</span><br><span class="line">    - 方法中声明Model类型的参数是为了把Action中的数据带到视图中；</span><br><span class="line">    - 方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF&#x2F;jsp&#x2F;**hello**.jsp。</span><br><span class="line"></span><br><span class="line">12. 7、**创建视图层**</span><br><span class="line"></span><br><span class="line">13. 在WEB-INF&#x2F; jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</span><br><span class="line"></span><br><span class="line">14. 可以通过EL表示取出Model中存放的值，或者对象；</span><br><span class="line"></span><br><span class="line">15.</span><br></pre></td></tr></table></figure>
 &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
 &lt;html&gt;
 &lt;head&gt;
    &lt;title&gt;SpringMVC&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
 ${msg}
 &lt;/body&gt;
 &lt;/html&gt;

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**8、配置Tomcat运行**</span><br><span class="line"></span><br><span class="line">配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！</span><br><span class="line"></span><br><span class="line">![image-20210209171549897](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209171552.png)</span><br><span class="line"></span><br><span class="line">**OK，运行成功！**</span><br><span class="line"></span><br><span class="line">### 小结</span><br><span class="line"></span><br><span class="line">实现步骤其实非常的简单：</span><br><span class="line"></span><br><span class="line">1. 新建一个web项目</span><br><span class="line">2. 导入相关jar包</span><br><span class="line">3. 编写web.xml , 注册DispatcherServlet</span><br><span class="line">4. 编写springmvc配置文件</span><br><span class="line">5. 接下来就是去创建对应的控制类 , controller</span><br><span class="line">6. 最后完善前端视图和controller之间的对应</span><br><span class="line">7. 测试运行调试.</span><br><span class="line"></span><br><span class="line">使用springMVC必须配置的三大件：</span><br><span class="line"></span><br><span class="line">**处理器映射器、处理器适配器、视图解析器**</span><br><span class="line"></span><br><span class="line">通常，我们只需要**手动配置视图解析器**，而**处理器映射器**和**处理器适配器**只需要开启**注解驱动**即可，而省去了大段的xml配置</span><br><span class="line"></span><br><span class="line">再来回顾下原理吧~</span><br><span class="line"></span><br><span class="line">![image-20210209155955774](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209155958.png)</span><br><span class="line"></span><br><span class="line">(model和view虚线连接)</span><br><span class="line"></span><br><span class="line"># 4、RestFul和控制器</span><br><span class="line"></span><br><span class="line">## 控制器Controller</span><br><span class="line"></span><br><span class="line">- 控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</span><br><span class="line">- 控制器负责解析用户的请求并将其转换为一个模型。</span><br><span class="line">- 在Spring MVC中一个控制器类可以包含多个方法</span><br><span class="line">- 在Spring MVC中，对于Controller的配置方式有很多种</span><br><span class="line"></span><br><span class="line">### 实现Controller接口</span><br><span class="line"></span><br><span class="line">Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</span><br></pre></td></tr></table></figure>
//实现该接口的类获得控制器功能
public interface Controller {
//处理请求且返回一个模型与视图对象
ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponsevar2) throws Exception;
}
</code></pre></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### **测试**</span><br><span class="line"></span><br><span class="line">1. 新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作！</span><br><span class="line"></span><br><span class="line">2. - 删掉HelloController</span><br><span class="line">   - mvc的配置文件只留下 视图解析器！</span><br><span class="line"></span><br><span class="line">3. 编写一个Controller类，ControllerTest1</span><br></pre></td></tr></table></figure>
<p>   //定义控制器<br>   //注意点：不要导错包，实现Controller接口，重写方法；<br>   public class ControllerTest1 implements Controller {</p>
<pre><code> public ModelAndView handleRequest(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws Exception {
     //返回一个模型视图对象
     ModelAndView mv = new ModelAndView();
     mv.addObject(&quot;msg&quot;,&quot;Test1Controller&quot;);
     mv.setViewName(&quot;test&quot;);
     return mv;
}</code></pre><p>   }</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</span><br></pre></td></tr></table></figure>
   <bean name="/t1" class="com.kuang.controller.ControllerTest1"/>

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 编写前端test.jsp，注意在WEB-INF&#x2F;jsp目录下编写，对应我们的视图解析器</span><br></pre></td></tr></table></figure>
<p>   &lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;<br>   <html><br>   <head><br>      <title>Kuangshen</title><br>   <meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="Summer502's Blog" type="application/atom+xml">
</head><br>   <body><br>   ${msg}<br>   </body><br>   </html></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. 配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 &#x2F; ，所以请求不用加项目名，OK！</span><br><span class="line"></span><br><span class="line">   ![image-20210209184735189](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209184737.png)</span><br><span class="line"></span><br><span class="line">**说明：**</span><br><span class="line"></span><br><span class="line">- 实现接口Controller定义控制器是较老的办法</span><br><span class="line">- 缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</span><br><span class="line"></span><br><span class="line">### 使用注解@Controller</span><br><span class="line"></span><br><span class="line">- @Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</span><br><span class="line"></span><br><span class="line">- Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</span><br></pre></td></tr></table></figure>
  <!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 -->
<p>  &lt;context:component-scan base-package=”com.kuang.controller”/&gt;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 增加一个ControllerTest2类，使用注解实现；</span><br></pre></td></tr></table></figure>
<p>  //@Controller注解的类会自动添加到Spring上下文中<br>  @Controller<br>  public class ControllerTest2{</p>
<pre><code> //映射访问路径
 @RequestMapping(&quot;/t2&quot;)
 public String index(Model model){
     //Spring MVC会自动实例化一个Model对象用于向视图中传值
     model.addAttribute(&quot;msg&quot;, &quot;ControllerTest2&quot;);
     //返回视图位置
     return &quot;test&quot;;
}</code></pre><p>  }</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 运行tomcat测试</span><br><span class="line"></span><br><span class="line">  ![image-20210209184800252](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209184801.png)</span><br><span class="line"></span><br><span class="line">**可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。**</span><br><span class="line"></span><br><span class="line">**注解方式是平时使用的最多的方式！**</span><br><span class="line"></span><br><span class="line">## RequestMapping</span><br><span class="line"></span><br><span class="line">**@RequestMapping**</span><br><span class="line"></span><br><span class="line">- @RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</span><br><span class="line"></span><br><span class="line">- 为了测试结论更加准确，我们可以加上一个项目名测试 myweb</span><br><span class="line"></span><br><span class="line">- 只注解在方法上面</span><br></pre></td></tr></table></figure>
<p>  @Controller<br>  public class TestController {<br>     @RequestMapping(“/h1”)<br>     public String test(){<br>         return “test”;<br>    }<br>  }</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  访问路径： http:&#x2F;&#x2F;localhost:8080 &#x2F; 项目名 &#x2F; h1</span><br><span class="line"></span><br><span class="line">- 同时注解类与方法</span><br></pre></td></tr></table></figure>
<p>  @Controller<br>  @RequestMapping(“/admin”)<br>  public class TestController {<br>     @RequestMapping(“/h1”)<br>     public String test(){<br>         return “test”;<br>    }<br>  }</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  访问路径：http:&#x2F;&#x2F;localhost:8080 &#x2F; 项目名&#x2F; admin &#x2F;h1 , 需要先指定类的路径再指定方法的路径；</span><br><span class="line"></span><br><span class="line">## RestFul 风格</span><br><span class="line"></span><br><span class="line">### **概念**</span><br><span class="line"></span><br><span class="line">Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</span><br><span class="line"></span><br><span class="line">### **功能**</span><br><span class="line"></span><br><span class="line">资源：互联网所有的事物都可以被抽象为资源</span><br><span class="line"></span><br><span class="line">资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</span><br><span class="line"></span><br><span class="line">分别对应 添加、 删除、修改、查询。</span><br><span class="line"></span><br><span class="line">**传统方式操作资源** ：通过不同的参数来实现不同的效果！方法单一，post 和 get</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item&#x2F;queryItem.action?id&#x3D;1 查询,GET</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item&#x2F;saveItem.action 新增,POST</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item&#x2F;updateItem.action 更新,POST</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item&#x2F;deleteItem.action?id&#x3D;1 删除,GET或POST</span><br><span class="line"></span><br><span class="line">**使用RESTful操作资源** ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item&#x2F;1 查询,GET</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item 新增,POST</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item 更新,PUT</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;item&#x2F;1 删除,DELETE</span><br><span class="line"></span><br><span class="line">### **学习测试**</span><br><span class="line"></span><br><span class="line">1. 在新建一个类 RestFulController</span><br></pre></td></tr></table></figure>
<p>   @Controller<br>   public class RestFulController {<br>   }</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</span><br></pre></td></tr></table></figure>
<p>   @Controller<br>   public class RestFulController {</p>
<pre><code> //映射访问路径
 @RequestMapping(&quot;/commit/{p1}/{p2}&quot;)
 public String index(@PathVariable int p1, @PathVariable int p2, Model model){

     int result = p1+p2;
     //Spring MVC会自动实例化一个Model对象用于向视图中传值
     model.addAttribute(&quot;msg&quot;, &quot;结果：&quot;+result);
     //返回视图位置
     return &quot;test&quot;;

}</code></pre><p>   }</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 我们来测试请求查看下</span><br><span class="line"></span><br><span class="line">   ![image-20210209213305591](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209213308.png)</span><br><span class="line"></span><br><span class="line">4. 思考：使用路径变量的好处？</span><br><span class="line"></span><br><span class="line">5. - 使路径变得更加简洁；</span><br><span class="line"></span><br><span class="line">   - 获得参数更加方便，框架会自动进行类型转换。</span><br><span class="line"></span><br><span class="line">   - 通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是&#x2F;commit&#x2F;1&#x2F;a，则路径与方法不匹配，而不会是参数转换失败。</span><br><span class="line"></span><br><span class="line">     ![image-20210209213441403](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209213444.png)</span><br><span class="line"></span><br><span class="line">6. 我们来修改下对应的参数类型，再次测试</span><br></pre></td></tr></table></figure>
<p>   //映射访问路径<br>   @RequestMapping(“/commit/{p1}/{p2}”)<br>   public String index(@PathVariable int p1, @PathVariable String p2, Model model){</p>
<pre><code>String result = p1+p2;
//Spring MVC会自动实例化一个Model对象用于向视图中传值
model.addAttribute(&quot;msg&quot;, &quot;结果：&quot;+result);
//返回视图位置
return &quot;test&quot;;</code></pre><p>   }</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   ![image-20210209213501945](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209213504.png)</span><br><span class="line"></span><br><span class="line">**使用method属性指定请求类型**</span><br><span class="line"></span><br><span class="line">用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</span><br><span class="line"></span><br><span class="line">我们来测试一下：</span><br><span class="line"></span><br><span class="line">- 增加一个方法</span><br></pre></td></tr></table></figure>
<p>  //映射访问路径,必须是POST请求<br>  @RequestMapping(value = “/hello”,method = {RequestMethod.POST})<br>  public String index2(Model model){<br>     model.addAttribute(“msg”, “hello!”);<br>     return “test”;<br>  }</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</span><br><span class="line"></span><br><span class="line">  ![image-20210209213537723](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209213539.png)</span><br><span class="line"></span><br><span class="line">- 如果将POST修改为GET则正常了；</span><br></pre></td></tr></table></figure>
<p>  //映射访问路径,必须是Get请求<br>  @RequestMapping(value = “/hello”,method = {RequestMethod.GET})<br>  public String index2(Model model){<br>     model.addAttribute(“msg”, “hello!”);<br>     return “test”;<br>  }</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![image-20210209213556906](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209213558.png)</span><br><span class="line"></span><br><span class="line">**小结：**</span><br><span class="line"></span><br><span class="line">Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</span><br><span class="line"></span><br><span class="line">**所有的地址栏请求默认都会是 HTTP GET 类型的。**</span><br><span class="line"></span><br><span class="line">方法级别的注解变体有如下几个：组合注解</span><br></pre></td></tr></table></figure>
<p>@GetMapping<br>@PostMapping<br>@PutMapping<br>@DeleteMapping<br>@PatchMapping</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@GetMapping 是一个组合注解，平时使用的会比较多！</span><br><span class="line"></span><br><span class="line">它所扮演的是 @RequestMapping(method &#x3D;RequestMethod.GET) 的一个快捷方式。</span><br><span class="line"></span><br><span class="line">### 扩展：小黄鸭调试法</span><br><span class="line"></span><br><span class="line">场景一：*我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。*</span><br><span class="line"></span><br><span class="line">场景二：你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</span><br><span class="line"></span><br><span class="line">其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</span><br><span class="line"></span><br><span class="line">![img](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3Sk9tTmRocU5iclJLOVhhc2VYSURzdTRNaWJSVnBaaWNpY1NWUlJqYjBsQWJsWGpsSEhwcFkzZ1NCbjhpYVRzYTJvTEVNTzlTM2JQQ0RIb0EvNjQw?x-oss-process&#x3D;image&#x2F;format,png)</span><br><span class="line"></span><br><span class="line">此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 5、JSON交互处理</span><br><span class="line"></span><br><span class="line">## 什么是JSON？</span><br><span class="line"></span><br><span class="line">- JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</span><br><span class="line">- 采用完全独立于编程语言的**文本格式**来存储和表示数据。</span><br><span class="line">- 简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</span><br><span class="line">- 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</span><br><span class="line"></span><br><span class="line">在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</span><br><span class="line"></span><br><span class="line">- 对象表示为键值对，数据由逗号分隔</span><br><span class="line">- 花括号保存对象</span><br><span class="line">- 方括号保存数组</span><br><span class="line"></span><br><span class="line">**JSON 键值对**是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键&#x2F;值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</span><br></pre></td></tr></table></figure>
<p>{“name”: “QinJiang”}<br>{“age”: “3”}<br>{“sex”: “男”}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</span><br><span class="line"></span><br><span class="line">JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</span><br></pre></td></tr></table></figure>
<p>var obj = {a: ‘Hello’, b: ‘World’}; //这是一个对象，注意键名也是可以使用引号包裹的<br>var json = ‘{“a”: “Hello”, “b”: “World”}’; //这是一个 JSON 字符串，本质是一个字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## **JSON 和 JavaScript 对象互转**</span><br><span class="line"></span><br><span class="line">要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</span><br></pre></td></tr></table></figure>
<p>var obj = JSON.parse(‘{“a”: “Hello”, “b”: “World”}’);<br>//结果是 {a: ‘Hello’, b: ‘World’}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</span><br></pre></td></tr></table></figure>
<p>var json = JSON.stringify({a: ‘Hello’, b: ‘World’});<br>//结果是 ‘{“a”: “Hello”, “b”: “World”}’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**代码测试**</span><br><span class="line"></span><br><span class="line">1、新建一个module ，springmvc-05-json ， 添加web的支持</span><br><span class="line"></span><br><span class="line">2、在web目录下新建一个 json-1.html ， 编写测试内容</span><br></pre></td></tr></table></figure>
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <title>JSON_秦疆</title>
</head>
<body>

<script type="text/javascript">
   //编写一个js的对象
   var user = {
       name:"秦疆",
       age:3,
       sex:"男"
  };
   //将js对象转换成json字符串
   var str = JSON.stringify(user);
   console.log(str);

   //将json字符串转换为js对象
   var user2 = JSON.parse(str);
   console.log(user2.age,user2.name,user2.sex);

</script>

</body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3、在IDEA中使用浏览器打开，查看控制台输出！</span><br><span class="line"></span><br><span class="line">![image-20210209220623662](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220625.png)</span><br><span class="line"></span><br><span class="line">&gt; Controller返回JSON数据</span><br><span class="line"></span><br><span class="line">Jackson应该是目前比较好的json解析工具了</span><br><span class="line"></span><br><span class="line">当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</span><br><span class="line"></span><br><span class="line">我们这里使用Jackson，使用它需要导入它的jar包；</span><br></pre></td></tr></table></figure>
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
<dependency>
   <groupId>com.fasterxml.jackson.core</groupId>
   <artifactId>jackson-databind</artifactId>
   <version>2.9.8</version>
</dependency>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">配置SpringMVC需要的配置</span><br><span class="line"></span><br><span class="line">web.xml</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
        version="4.0"></p>
   <!--1.注册servlet-->
   <servlet>
       <servlet-name>SpringMVC</servlet-name>
       <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
       <!--通过初始化参数指定SpringMVC配置文件的位置，进行关联-->
       <init-param>
           <param-name>contextConfigLocation</param-name>
           <param-value>classpath:springmvc-servlet.xml</param-value>
       </init-param>
       <!-- 启动顺序，数字越小，启动越早 -->
       <load-on-startup>1</load-on-startup>
   </servlet>

   <!--所有请求都会被springmvc拦截 -->
   <servlet-mapping>
       <servlet-name>SpringMVC</servlet-name>
       <url-pattern>/</url-pattern>
   </servlet-mapping>

   <filter>
       <filter-name>encoding</filter-name>
       <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
       <init-param>
           <param-name>encoding</param-name>
           <param-value>utf-8</param-value>
       </init-param>
   </filter>
   <filter-mapping>
       <filter-name>encoding</filter-name>
       <url-pattern>/</url-pattern>
   </filter-mapping>

</web-app>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">springmvc-servlet.xml</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:mvc="http://www.springframework.org/schema/mvc"
      xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd"></p>
   <!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 -->
<p>   &lt;context:component-scan base-package=”com.kuang.controller”/&gt;</p>
   <!-- 视图解析器 -->
<p>   &lt;beanclass=”org.springframework.web.servlet.view.InternalResourceViewResolver”<br>         id=”internalResourceViewResolver”&gt;<br>       <!-- 前缀 --><br>       <property name="prefix" value="/WEB-INF/jsp/" /><br>       <!-- 后缀 --><br>       <property name="suffix" value=".jsp" /><br>   </bean></p>
</beans>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</span><br></pre></td></tr></table></figure>
<p>package com.kuang.pojo;</p>
<p>import lombok.AllArgsConstructor;<br>import lombok.Data;<br>import lombok.NoArgsConstructor;</p>
<p>//需要导入lombok<br>@Data<br>@AllArgsConstructor<br>@NoArgsConstructor<br>public class User {</p>
<p>   private String name;<br>   private int age;<br>   private String sex;</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</span><br><span class="line"></span><br><span class="line">编写一个Controller；</span><br></pre></td></tr></table></figure>
<p>@Controller<br>public class UserController {</p>
<p>   @RequestMapping(“/json1”)<br>   @ResponseBody<br>   public String json1() throws JsonProcessingException {<br>       //创建一个jackson的对象映射器，用来解析数据<br>       ObjectMapper mapper = new ObjectMapper();<br>       //创建一个对象<br>       User user = new User(“秦疆1号”, 3, “男”);<br>       //将我们的对象解析成为json格式<br>       String str = mapper.writeValueAsString(user);<br>       //由于@ResponseBody注解，这里会将str转成json格式返回；十分方便<br>       return str;<br>  }</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">配置Tomcat ， 启动测试一下！</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;json1</span><br><span class="line"></span><br><span class="line">![image-20210209220603317](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220604.png)</span><br><span class="line"></span><br><span class="line">发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</span><br><span class="line"></span><br><span class="line">通过@RequestMaping的produces属性来实现，修改下代码</span><br></pre></td></tr></table></figure>
<p>//produces:指定响应体返回类型和编码<br>@RequestMapping(value = “/json1”,produces = “application/json;charset=utf-8”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">再次测试， http:&#x2F;&#x2F;localhost:8080&#x2F;json1 ， 乱码问题OK！</span><br><span class="line"></span><br><span class="line">![image-20210209220545875](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220547.png)</span><br><span class="line"></span><br><span class="line">【注意：使用json记得处理乱码问题】</span><br><span class="line"></span><br><span class="line">## 代码优化</span><br><span class="line"></span><br><span class="line">### **乱码统一解决**</span><br><span class="line"></span><br><span class="line">上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</span><br><span class="line"></span><br><span class="line">我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</span><br></pre></td></tr></table></figure>
<p><a href="mvc:annotation-driven">mvc:annotation-driven</a><br>   &lt;mvc:message-converters register-defaults=”true”&gt;<br>       &lt;beanclass=”org.springframework.http.converter.StringHttpMessageConverter”&gt;<br>           <constructor-arg value="UTF-8"/><br>       </bean><br>       &lt;beanclass=”org.springframework.http.converter.json.MappingJackson2HttpMessageConverter”&gt;<br>           <property name="objectMapper"><br>               &lt;beanclass=”org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean”&gt;<br>                   <property name="failOnEmptyBeans" value="false"/><br>               </bean><br>           </property><br>       </bean><br>   </mvc:message-converters><br></mvc:annotation-driven></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### **返回json字符串统一解决**</span><br><span class="line"></span><br><span class="line">在类上直接使用 **@RestController** ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</span><br></pre></td></tr></table></figure>
<p>@RestController<br>public class UserController {</p>
<p>   //produces:指定响应体返回类型和编码<br>   @RequestMapping(value = “/json1”)<br>   public String json1() throws JsonProcessingException {<br>       //创建一个jackson的对象映射器，用来解析数据<br>       ObjectMapper mapper = new ObjectMapper();<br>       //创建一个对象<br>       User user = new User(“秦疆1号”, 3, “男”);<br>       //将我们的对象解析成为json格式<br>       String str = mapper.writeValueAsString(user);<br>       //由于@ResponseBody注解，这里会将str转成json格式返回；十分方便<br>       return str;<br>  }</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">启动tomcat测试，结果都正常输出！</span><br><span class="line"></span><br><span class="line">## 测试集合输出</span><br><span class="line"></span><br><span class="line">增加一个新的方法</span><br></pre></td></tr></table></figure>
<p>@RequestMapping(“/json2”)<br>public String json2() throws JsonProcessingException {</p>
<p>   //创建一个jackson的对象映射器，用来解析数据<br>   ObjectMapper mapper = new ObjectMapper();<br>   //创建一个对象<br>   User user1 = new User(“秦疆1号”, 3, “男”);<br>   User user2 = new User(“秦疆2号”, 3, “男”);<br>   User user3 = new User(“秦疆3号”, 3, “男”);<br>   User user4 = new User(“秦疆4号”, 3, “男”);<br>   List<User> list = new ArrayList<User>();<br>   list.add(user1);<br>   list.add(user2);<br>   list.add(user3);<br>   list.add(user4);</p>
<p>   //将我们的对象解析成为json格式<br>   String str = mapper.writeValueAsString(list);<br>   return str;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">运行结果 : 十分完美，没有任何问题！</span><br><span class="line"></span><br><span class="line">![image-20210209220522251](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220523.png)</span><br><span class="line"></span><br><span class="line">## 输出时间对象</span><br><span class="line"></span><br><span class="line">增加一个新的方法</span><br></pre></td></tr></table></figure>
<p>@RequestMapping(“/json3”)<br>public String json3() throws JsonProcessingException {</p>
<p>   ObjectMapper mapper = new ObjectMapper();</p>
<p>   //创建时间一个对象，java.util.Date<br>   Date date = new Date();<br>   //将我们的对象解析成为json格式<br>   String str = mapper.writeValueAsString(date);<br>   return str;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">运行结果 :</span><br><span class="line"></span><br><span class="line">![image-20210209220453789](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220455.png)</span><br><span class="line"></span><br><span class="line">- 默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</span><br><span class="line">- Jackson 默认是会把时间转成timestamps形式</span><br><span class="line"></span><br><span class="line">### **解决方案：取消timestamps形式 ， 自定义时间格式**</span><br></pre></td></tr></table></figure>
<p>@RequestMapping(“/json4”)<br>public String json4() throws JsonProcessingException {</p>
<p>   ObjectMapper mapper = new ObjectMapper();</p>
<p>   //不使用时间戳的方式<br>   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);<br>   //自定义日期格式对象<br>   SimpleDateFormat sdf = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>   //指定日期格式<br>   mapper.setDateFormat(sdf);</p>
<p>   Date date = new Date();<br>   String str = mapper.writeValueAsString(date);</p>
<p>   return str;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">运行结果 : 成功的输出了时间！</span><br><span class="line"></span><br><span class="line">![image-20210209220437971](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220439.png)</span><br><span class="line"></span><br><span class="line">### 抽取为工具类</span><br><span class="line"></span><br><span class="line">**如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下**</span><br></pre></td></tr></table></figure>
<p>package com.kuang.utils;</p>
<p>import com.fasterxml.jackson.core.JsonProcessingException;<br>import com.fasterxml.jackson.databind.ObjectMapper;<br>import com.fasterxml.jackson.databind.SerializationFeature;</p>
<p>import java.text.SimpleDateFormat;</p>
<p>public class JsonUtils {</p>
<p>   public static String getJson(Object object) {<br>       return getJson(object,”yyyy-MM-dd HH:mm:ss”);<br>  }</p>
<p>   public static String getJson(Object object,String dateFormat) {<br>       ObjectMapper mapper = new ObjectMapper();<br>       //不使用时间差的方式<br>       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);<br>       //自定义日期格式对象<br>       SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);<br>       //指定日期格式<br>       mapper.setDateFormat(sdf);<br>       try {<br>           return mapper.writeValueAsString(object);<br>      } catch (JsonProcessingException e) {<br>           e.printStackTrace();<br>      }<br>       return null;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我们使用工具类，代码就更加简洁了！</span><br></pre></td></tr></table></figure>
<p>@RequestMapping(“/json5”)<br>public String json5() throws JsonProcessingException {<br>   Date date = new Date();<br>   String json = JsonUtils.getJson(date);<br>   return json;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">大功告成！完美！</span><br><span class="line"></span><br><span class="line">## FastJson</span><br><span class="line"></span><br><span class="line">fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</span><br><span class="line"></span><br><span class="line">fastjson 的 pom依赖！</span><br></pre></td></tr></table></figure>
<dependency>
   <groupId>com.alibaba</groupId>
   <artifactId>fastjson</artifactId>
   <version>1.2.60</version>
</dependency>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">fastjson 三个主要的类：</span><br><span class="line"></span><br><span class="line">#### **JSONObject 代表 json 对象**</span><br><span class="line"></span><br><span class="line">- JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</span><br><span class="line">- JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取&quot;键：值&quot;对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</span><br><span class="line"></span><br><span class="line">#### **JSONArray 代表 json 对象数组**</span><br><span class="line"></span><br><span class="line">- 内部是有List接口中的方法来完成操作的。</span><br><span class="line"></span><br><span class="line">#### **JSON代表 JSONObject和JSONArray的转化**</span><br><span class="line"></span><br><span class="line">- JSON类源码分析与使用</span><br><span class="line">- 仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</span><br><span class="line"></span><br><span class="line">**代码测试，我们新建一个FastJsonDemo 类**</span><br></pre></td></tr></table></figure>
<p>package com.kuang.controller;</p>
<p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;<br>import com.kuang.pojo.User;</p>
<p>import java.util.ArrayList;<br>import java.util.List;</p>
<p>public class FastJsonDemo {<br>   public static void main(String[] args) {<br>       //创建一个对象<br>       User user1 = new User(“秦疆1号”, 3, “男”);<br>       User user2 = new User(“秦疆2号”, 3, “男”);<br>       User user3 = new User(“秦疆3号”, 3, “男”);<br>       User user4 = new User(“秦疆4号”, 3, “男”);<br>       List<User> list = new ArrayList<User>();<br>       list.add(user1);<br>       list.add(user2);<br>       list.add(user3);<br>       list.add(user4);</p>
<pre><code>System.out.println(&quot;*******Java对象 转 JSON字符串*******&quot;);
String str1 = JSON.toJSONString(list);
System.out.println(&quot;JSON.toJSONString(list)==&gt;&quot;+str1);
String str2 = JSON.toJSONString(user1);
System.out.println(&quot;JSON.toJSONString(user1)==&gt;&quot;+str2);

System.out.println(&quot;\n****** JSON字符串 转 Java对象*******&quot;);
User jp_user1=JSON.parseObject(str2,User.class);
System.out.println(&quot;JSON.parseObject(str2,User.class)==&gt;&quot;+jp_user1);

System.out.println(&quot;\n****** Java对象 转 JSON对象 ******&quot;);
JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);
System.out.println(&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;+jsonObject1.getString(&quot;name&quot;));

System.out.println(&quot;\n****** JSON对象 转 Java对象 ******&quot;);
User to_java_user = JSON.toJavaObject(jsonObject1, User.class);
System.out.println(&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;+to_java_user);</code></pre><p>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</span><br><span class="line"></span><br><span class="line"># 6、ajax</span><br><span class="line"></span><br><span class="line">## 简介</span><br><span class="line"></span><br><span class="line">- **AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。**</span><br><span class="line">- AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</span><br><span class="line">- **Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。**</span><br><span class="line">- 在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</span><br><span class="line">- Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</span><br><span class="line">- 就和国内百度的搜索框一样!</span><br><span class="line">- 传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</span><br><span class="line">- 使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</span><br><span class="line">- 使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</span><br><span class="line"></span><br><span class="line">## 伪造Ajax</span><br><span class="line"></span><br><span class="line">我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</span><br><span class="line"></span><br><span class="line">1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</span><br><span class="line"></span><br><span class="line">2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</span><br></pre></td></tr></table></figure>
<!DOCTYPE html>
<html>
<head lang="en">
   <meta charset="UTF-8">
   <title>kuangshen</title>
</head>
<body>

<script type="text/javascript">
   window.onload = function(){
       var myDate = new Date();
       document.getElementById('currentTime').innerText = myDate.getTime();
  };

   function LoadPage(){
       var targetUrl =  document.getElementById('url').value;
       console.log(targetUrl);
       document.getElementById("iframePosition").src = targetUrl;
  }

</script>

<div>
   <p>请输入要加载的地址：<span id="currentTime"></span></p>
   <p>
       <input id="url" type="text" value="https://www.baidu.com/"/>
       <input type="button" value="提交" onclick="LoadPage()">
   </p>
</div>

<div>
   <h3>加载页面位置：</h3>
   <iframe id="iframePosition" style="width: 100%;height: 500px;"></iframe>
</div>

</body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3、使用IDEA开浏览器测试一下！</span><br><span class="line"></span><br><span class="line">### 4.注意：html css（略懂） js（超级熟练）</span><br><span class="line"></span><br><span class="line">* js：函数：闭包（）（）</span><br><span class="line"></span><br><span class="line">* dom</span><br><span class="line"></span><br><span class="line">  id name  tag  create  remove</span><br><span class="line"></span><br><span class="line">* bom：window </span><br><span class="line"></span><br><span class="line">​			document</span><br><span class="line"></span><br><span class="line">## **利用AJAX可以做：**</span><br><span class="line"></span><br><span class="line">- 注册时，输入用户名自动检测用户是否已经存在。</span><br><span class="line">- 登陆时，提示用户名密码错误</span><br><span class="line">- 删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</span><br><span class="line">- …等等</span><br><span class="line"></span><br><span class="line">## jQuery.ajax</span><br><span class="line"></span><br><span class="line">纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</span><br><span class="line"></span><br><span class="line">Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</span><br><span class="line"></span><br><span class="line">jQuery 提供多个与 AJAX 有关的方法。</span><br><span class="line"></span><br><span class="line">通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</span><br><span class="line"></span><br><span class="line">jQuery 不是生产者，而是大自然搬运工。</span><br><span class="line"></span><br><span class="line">jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</span><br></pre></td></tr></table></figure>
<p>jQuery.ajax(…)<br>      部分参数：<br>            url：请求地址<br>            type：请求方式，GET、POST（1.9.0之后用method）<br>        headers：请求头<br>            data：要发送的数据<br>    contentType：即将发送信息至服务器的内容编码类型(默认: “application/x-www-form-urlencoded; charset=UTF-8”)<br>          async：是否异步<br>        timeout：设置请求超时时间（毫秒）<br>      beforeSend：发送请求前执行的函数(全局)<br>        complete：完成之后执行的回调函数(全局)<br>        success：成功之后执行的回调函数(全局)<br>          error：失败之后执行的回调函数(全局)<br>        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>        dataType：将服务器端返回的数据转换成指定类型<br>          “xml”: 将服务器端返回的内容转换成xml格式<br>          “text”: 将服务器端返回的内容转换成普通文本格式<br>          “html”: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>        “script”: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>          “json”: 将服务器端返回的内容转换成相应的JavaScript对象<br>        “jsonp”: JSONP 格式使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## **我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用**</span><br><span class="line"></span><br><span class="line">1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:mvc="http://www.springframework.org/schema/mvc"
      xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd"></p>
   <!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 -->
<p>   &lt;context:component-scan base-package=”com.kuang.controller”/&gt;<br>   &lt;mvc:default-servlet-handler /&gt;<br>   &lt;mvc:annotation-driven /&gt;</p>
   <!-- 视图解析器 -->
<p>   &lt;beanclass=”org.springframework.web.servlet.view.InternalResourceViewResolver”<br>         id=”internalResourceViewResolver”&gt;<br>       <!-- 前缀 --><br>       <property name="prefix" value="/WEB-INF/jsp/" /><br>       <!-- 后缀 --><br>       <property name="suffix" value=".jsp" /><br>   </bean></p>
</beans>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2、编写一个AjaxController</span><br></pre></td></tr></table></figure>
<p>@Controller<br>public class AjaxController {</p>
<p>   @RequestMapping(“/a1”)<br>   public void ajax1(String name , HttpServletResponse response) throws IOException{<br>       if (“admin”.equals(name)){<br>           response.getWriter().print(“true”);<br>      }else{<br>           response.getWriter().print(“false”);<br>      }<br>  }</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</span><br></pre></td></tr></table></figure>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
<script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"></script>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4、编写index.jsp测试</span><br></pre></td></tr></table></figure>
<p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>
<html>
 <head>
   <title>$Title$</title>
  <%--<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>--%>
   <script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"></script>
   <script>
       function a1(){
           $.post({
               url:"${pageContext.request.contextPath}/a1",
               data:{'name':$("#txtName").val()},
               success:function (data,status) {
                   alert(data);
                   alert(status);
              }
          });
      }
   </script>
 </head>
 <body>

<p>&lt;%–onblur：失去焦点触发事件–%&gt;<br>用户名:<input type="text" id="txtName" onblur="a1()"/></p>
 </body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</span><br><span class="line"></span><br><span class="line">## **Springmvc实现**</span><br><span class="line"></span><br><span class="line">实体类user</span><br></pre></td></tr></table></figure>
<p>@Data<br>@AllArgsConstructor<br>@NoArgsConstructor<br>public class User {</p>
<p>   private String name;<br>   private int age;<br>   private String sex;</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我们来获取一个集合对象，展示到前端页面</span><br></pre></td></tr></table></figure>
<p>@RequestMapping(“/a2”)<br>public List<User> ajax2(){<br>   List<User> list = new ArrayList<User>();<br>   list.add(new User(“秦疆1号”,3,”男”));<br>   list.add(new User(“秦疆2号”,3,”男”));<br>   list.add(new User(“秦疆3号”,3,”男”));<br>   return list; //由于@RestController注解，将list转成json格式返回<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">前端页面</span><br></pre></td></tr></table></figure>
<p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>
<html>
<head>
   <title>Title</title>
</head>
<body>
<input type="button" id="btn" value="获取数据"/>
<table width="80%" align="center">
   <tr>
       <td>姓名</td>
       <td>年龄</td>
       <td>性别</td>
   </tr>
   <tbody id="content">
   </tbody>
</table>

<script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"></script>
<script>

   $(function () {
       $("#btn").click(function () {
           $.post("${pageContext.request.contextPath}/a2",function (data) {
               console.log(data)
               var html="";
               for (var i = 0; i <data.length ; i++) {
                   html+= "<tr>" +
                       "<td>" + data[i].name + "</td>" +
                       "<td>" + data[i].age + "</td>" +
                       "<td>" + data[i].sex + "</td>" +
                       "</tr>"
              }
               $("#content").html(html);
          });
      })
  })
</script>
</body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**成功实现了数据回显！可以体会一下Ajax的好处！**</span><br><span class="line"></span><br><span class="line">&gt; 注册提示效果</span><br><span class="line"></span><br><span class="line">我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</span><br><span class="line"></span><br><span class="line">我们写一个Controller</span><br></pre></td></tr></table></figure>
<p>@RequestMapping(“/a3”)<br>public String ajax3(String name,String pwd){<br>   String msg = “”;<br>   //模拟数据库中存在数据<br>   if (name!=null){<br>       if (“admin”.equals(name)){<br>           msg = “OK”;<br>      }else {<br>           msg = “用户名输入错误”;<br>      }<br>  }<br>   if (pwd!=null){<br>       if (“123456”.equals(pwd)){<br>           msg = “OK”;<br>      }else {<br>           msg = “密码输入有误”;<br>      }<br>  }<br>   return msg; //由于@RestController注解，将msg转成json格式返回<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">前端页面 login.jsp</span><br></pre></td></tr></table></figure>
<p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>
<html>
<head>
   <title>ajax</title>
   <script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"></script>
   <script>

<pre><code> function a1(){
     $.post({
         url:&quot;${pageContext.request.contextPath}/a3&quot;,
         data:{&apos;name&apos;:$(&quot;#name&quot;).val()},
         success:function (data) {
             if (data.toString()==&apos;OK&apos;){
                 $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);
            }else {
                 $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);
            }
             $(&quot;#userInfo&quot;).html(data);
        }
    });
}
 function a2(){
     $.post({
         url:&quot;${pageContext.request.contextPath}/a3&quot;,
         data:{&apos;pwd&apos;:$(&quot;#pwd&quot;).val()},
         success:function (data) {
             if (data.toString()==&apos;OK&apos;){
                 $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);
            }else {
                 $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);
            }
             $(&quot;#pwdInfo&quot;).html(data);
        }
    });
}</code></pre><p>   </script></p>
</head>
<body>
<p>
  用户名:<input type="text" id="name" onblur="a1()"/>
   <span id="userInfo"></span>
</p>
<p>
  密码:<input type="text" id="pwd" onblur="a2()"/>
   <span id="pwdInfo"></span>
</p>
</body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 【记得处理json乱码问题】</span><br><span class="line"></span><br><span class="line">测试一下效果，动态请求响应，局部刷新，就是如此！</span><br><span class="line"></span><br><span class="line">![image-20210209220403599](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220405.png)</span><br><span class="line"></span><br><span class="line">## 获取baidu接口Demo</span><br></pre></td></tr></table></figure>
<!DOCTYPE HTML>
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <title>JSONP百度搜索</title>
   <style>
       #q{
           width: 500px;
           height: 30px;
           border:1px solid #ddd;
           line-height: 30px;
           display: block;
           margin: 0 auto;
           padding: 0 10px;
           font-size: 14px;
      }
       #ul{
           width: 520px;
           list-style: none;
           margin: 0 auto;
           padding: 0;
           border:1px solid #ddd;
           margin-top: -1px;
           display: none;
      }
       #ul li{
           line-height: 30px;
           padding: 0 10px;
      }
       #ul li:hover{
           background-color: #f60;
           color: #fff;
      }
   </style>
   <script>

<pre><code> // 2.步骤二
 // 定义demo函数 (分析接口、数据)
 function demo(data){
     var Ul = document.getElementById(&apos;ul&apos;);
     var html = &apos;&apos;;
     // 如果搜索数据存在 把内容添加进去
     if (data.s.length) {
         // 隐藏掉的ul显示出来
         Ul.style.display = &apos;block&apos;;
         // 搜索到的数据循环追加到li里
         for(var i = 0;i&lt;data.s.length;i++){
             html += &apos;&lt;li&gt;&apos;+data.s[i]+&apos;&lt;/li&gt;&apos;;
        }
         // 循环的li写入ul
         Ul.innerHTML = html;
    }
}

 // 1.步骤一
 window.onload = function(){
     // 获取输入框和ul
     var Q = document.getElementById(&apos;q&apos;);
     var Ul = document.getElementById(&apos;ul&apos;);

     // 事件鼠标抬起时候
     Q.onkeyup = function(){
         // 如果输入框不等于空
         if (this.value != &apos;&apos;) {
             // ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
             // 创建标签
             var script = document.createElement(&apos;script&apos;);
             //给定要跨域的地址 赋值给src
             //这里是要请求的跨域的地址 我写的是百度搜索的跨域地址
             script.src =&apos;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&apos;+this.value+&apos;&amp;cb=demo&apos;;
             // 将组合好的带src的script标签追加到body里
             document.body.appendChild(script);
        }
    }
}</code></pre><p>   </script></p>
</head>

<body>
<input type="text" id="q" />
<ul id="ul">

</ul>
</body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 7、拦截器与过滤器</span><br><span class="line"></span><br><span class="line">## 概述</span><br><span class="line"></span><br><span class="line">SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</span><br><span class="line"></span><br><span class="line">**过滤器与拦截器的区别：**拦截器是AOP思想的具体应用。</span><br><span class="line"></span><br><span class="line">**过滤器**</span><br><span class="line"></span><br><span class="line">- servlet规范中的一部分，任何java web工程都可以使用</span><br><span class="line">- 在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截</span><br><span class="line"></span><br><span class="line">**拦截器**</span><br><span class="line"></span><br><span class="line">- 拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</span><br><span class="line">- 拦截器只会拦截访问的控制器方法， 如果访问的是jsp&#x2F;html&#x2F;css&#x2F;image&#x2F;js是不会进行拦截的</span><br><span class="line"></span><br><span class="line">## 自定义拦截器</span><br><span class="line"></span><br><span class="line">那如何实现拦截器呢？</span><br><span class="line"></span><br><span class="line">想要自定义拦截器，必须实现 HandlerInterceptor 接口。</span><br><span class="line"></span><br><span class="line">1、新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持</span><br><span class="line"></span><br><span class="line">2、配置web.xml 和 springmvc-servlet.xml 文件</span><br><span class="line"></span><br><span class="line">3、编写一个拦截器</span><br></pre></td></tr></table></figure>
<p>package com.kuang.interceptor;</p>
<p>import org.springframework.web.servlet.HandlerInterceptor;<br>import org.springframework.web.servlet.ModelAndView;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>public class MyInterceptor implements HandlerInterceptor {</p>
<p>   //在请求处理的方法之前执行<br>   //如果返回true执行下一个拦截器<br>   //如果返回false就不执行下一个拦截器<br>   public boolean preHandle(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o) throws Exception {<br>       System.out.println(“————处理前————“);<br>       return true;<br>  }</p>
<p>   //在请求处理方法执行之后执行<br>   public void postHandle(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)throws Exception {<br>       System.out.println(“————处理后————“);<br>  }</p>
<p>   //在dispatcherServlet处理后执行,做清理工作.<br>   public void afterCompletion(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {<br>       System.out.println(“————清理————“);<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4、在springmvc的配置文件中配置拦截器</span><br></pre></td></tr></table></figure>
<!--关于拦截器的配置-->
<p><a href="mvc:interceptors">mvc:interceptors</a><br>   <a href="mvc:interceptor">mvc:interceptor</a><br>       <!--/** 包括路径及其子路径--><br>       <!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--><br>       <!--/admin/** 拦截的是/admin/下的所有--><br>       &lt;mvc:mapping path=”/**”/&gt;<br>       <!--bean配置的就是拦截器--><br>       <bean class="com.kuang.interceptor.MyInterceptor"/><br>   </mvc:interceptor><br></mvc:interceptors></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5、编写一个Controller，接收请求</span><br></pre></td></tr></table></figure>
<p>package com.kuang.controller;</p>
<p>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.ResponseBody;</p>
<p>//测试拦截器的控制器<br>@Controller<br>public class InterceptorController {</p>
<p>   @RequestMapping(“/interceptor”)<br>   @ResponseBody<br>   public String testFunction() {<br>       System.out.println(“控制器中的方法执行了”);<br>       return “hello”;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6、前端 index.jsp</span><br></pre></td></tr></table></figure>
<p><a href="${pageContext.request.contextPath}/interceptor">拦截器测试</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">7、启动tomcat 测试一下！</span><br><span class="line"></span><br><span class="line">![image-20210209220332134](https:&#x2F;&#x2F;gitee.com&#x2F;summer502&#x2F;img&#x2F;raw&#x2F;master&#x2F;images&#x2F;20210209220333.png)</span><br><span class="line"></span><br><span class="line">### 验证用户是否登录 (认证用户)</span><br><span class="line"></span><br><span class="line">**实现思路**</span><br><span class="line"></span><br><span class="line">1、有一个登陆页面，需要写一个controller访问页面。</span><br><span class="line"></span><br><span class="line">2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。*返回登陆成功。*</span><br><span class="line"></span><br><span class="line">3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</span><br><span class="line"></span><br><span class="line">**测试：**</span><br><span class="line"></span><br><span class="line">1、编写一个登陆页面 login.jsp</span><br></pre></td></tr></table></figure>
<p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>
<html>
<head>
   <title>Title</title>
</head>

<h1>登录页面</h1>
<hr>

<body>
<form action="${pageContext.request.contextPath}/user/login">
  用户名：<input type="text" name="username"> <br>
  密码：<input type="password" name="pwd"> <br>
   <input type="submit" value="提交">
</form>
</body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2、编写一个Controller处理请求</span><br></pre></td></tr></table></figure>
<p>package com.kuang.controller;</p>
<p>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;</p>
<p>import javax.servlet.http.HttpSession;</p>
<p>@Controller<br>@RequestMapping(“/user”)<br>public class UserController {</p>
<p>   //跳转到登陆页面<br>   @RequestMapping(“/jumplogin”)<br>   public String jumpLogin() throws Exception {<br>       return “login”;<br>  }</p>
<p>   //跳转到成功页面<br>   @RequestMapping(“/jumpSuccess”)<br>   public String jumpSuccess() throws Exception {<br>       return “success”;<br>  }</p>
<p>   //登陆提交<br>   @RequestMapping(“/login”)<br>   public String login(HttpSession session, String username, String pwd) throwsException {<br>       // 向session记录用户身份信息<br>       System.out.println(“接收前端===”+username);<br>       session.setAttribute(“user”, username);<br>       return “success”;<br>  }</p>
<p>   //退出登陆<br>   @RequestMapping(“logout”)<br>   public String logout(HttpSession session) throws Exception {<br>       // session 过期<br>       session.invalidate();<br>       return “login”;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3、编写一个登陆成功的页面 success.jsp</span><br></pre></td></tr></table></figure>
<p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>
<html>
<head>
   <title>Title</title>
</head>
<body>

<h1>登录成功页面</h1>
<hr>

<p>${user}<br><a href="${pageContext.request.contextPath}/user/logout">注销</a></p>
</body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</span><br></pre></td></tr></table></figure>
<p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>
<html>
 <head>
   <title>$Title$</title>
 </head>
 <body>
 <h1>首页</h1>
 <hr>
<%--登录--%>
 <a href="${pageContext.request.contextPath}/user/jumplogin">登录</a>
 <a href="${pageContext.request.contextPath}/user/jumpSuccess">成功页面</a>
 </body>
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5、编写用户登录拦截器</span><br></pre></td></tr></table></figure>
<p>package com.kuang.interceptor;</p>
<p>import org.springframework.web.servlet.HandlerInterceptor;<br>import org.springframework.web.servlet.ModelAndView;</p>
<p>import javax.servlet.ServletException;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import javax.servlet.http.HttpSession;<br>import java.io.IOException;</p>
<p>public class LoginInterceptor implements HandlerInterceptor {</p>
<p>   public boolean preHandle(HttpServletRequest request, HttpServletResponseresponse, Object handler) throws ServletException, IOException {<br>       // 如果是登陆页面则放行<br>       System.out.println(“uri: “ + request.getRequestURI());<br>       if (request.getRequestURI().contains(“login”)) {<br>           return true;<br>      }</p>
<pre><code> HttpSession session = request.getSession();

 // 如果用户已登陆也放行
 if(session.getAttribute(&quot;user&quot;) != null) {
     return true;
}

 // 用户没有登陆跳转到登陆页面
 request.getRequestDispatcher(&quot;/WEB-INF/jsp/login.jsp&quot;).forward(request,response);
 return false;</code></pre><p>  }</p>
<p>   public void postHandle(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)throws Exception {</p>
<p>  }</p>
<p>   public void afterCompletion(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {</p>
<p>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6、在Springmvc的配置文件中注册拦截器</span><br></pre></td></tr></table></figure>
<!--关于拦截器的配置-->
<p><a href="mvc:interceptors">mvc:interceptors</a><br>   <a href="mvc:interceptor">mvc:interceptor</a><br>       &lt;mvc:mapping path=”/**”/&gt;<br>       <bean id="loginInterceptor" class="com.kuang.interceptor.LoginInterceptor"/><br>   </mvc:interceptor><br></mvc:interceptors></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">7、再次重启Tomcat测试！</span><br><span class="line"></span><br><span class="line">**OK，测试登录拦截功能无误.**</span><br><span class="line"></span><br><span class="line">## 文件上传和下载</span><br><span class="line"></span><br><span class="line">### 准备工作</span><br><span class="line"></span><br><span class="line">文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</span><br><span class="line"></span><br><span class="line">前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart&#x2F;form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</span><br><span class="line"></span><br><span class="line">**对表单中的 enctype 属性做个详细的说明：**</span><br><span class="line"></span><br><span class="line">- application&#x2F;x-www&#x3D;form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</span><br><span class="line">- multipart&#x2F;form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</span><br><span class="line">- text&#x2F;plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</span><br></pre></td></tr></table></figure>
<form action="" enctype="multipart/form-data" method="post">
   <input type="file" name="file"/>
   <input type="submit">
</form>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">一旦设置了enctype为multipart&#x2F;form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet&#x2F;JSP程序员上传文件的最佳选择。</span><br><span class="line"></span><br><span class="line">- Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</span><br><span class="line">- 而Spring MVC则提供了更简单的封装。</span><br><span class="line">- Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</span><br><span class="line">- Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</span><br><span class="line">- CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</span><br><span class="line"></span><br><span class="line">### 文件上传</span><br><span class="line"></span><br><span class="line">1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</span><br></pre></td></tr></table></figure>
<!--文件上传-->
<dependency>
   <groupId>commons-fileupload</groupId>
   <artifactId>commons-fileupload</artifactId>
   <version>1.3.3</version>
</dependency>
<!--servlet-api导入高版本的-->
<dependency>
   <groupId>javax.servlet</groupId>
   <artifactId>javax.servlet-api</artifactId>
   <version>4.0.1</version>
</dependency>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2、配置bean：multipartResolver</span><br><span class="line"></span><br><span class="line">【**注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！**】</span><br></pre></td></tr></table></figure>
<!--文件上传配置-->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
   <!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 -->
   <property name="defaultEncoding" value="utf-8"/>
   <!-- 上传文件大小上限，单位为字节（10485760=10M） -->
   <property name="maxUploadSize" value="10485760"/>
   <property name="maxInMemorySize" value="40960"/>
</bean>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">CommonsMultipartFile 的 常用方法：</span><br><span class="line"></span><br><span class="line">- **String getOriginalFilename()：获取上传文件的原名**</span><br><span class="line">- **InputStream getInputStream()：获取文件流**</span><br><span class="line">- **void transferTo(File dest)：将上传文件保存到一个目录文件中**</span><br><span class="line"></span><br><span class="line">我们去实际测试一下</span><br><span class="line"></span><br><span class="line">3、编写前端页面</span><br></pre></td></tr></table></figure>
<form action="/upload" enctype="multipart/form-data" method="post">
 <input type="file" name="file"/>
 <input type="submit" value="upload">
</form>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4、**Controller**</span><br></pre></td></tr></table></figure>
<p>package com.kuang.controller;</p>
<p>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.multipart.commons.CommonsMultipartFile;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import java.io.*;</p>
<p>@Controller<br>public class FileController {<br>   //@RequestParam(“file”) 将name=file控件得到的文件封装成CommonsMultipartFile 对象<br>   //批量上传CommonsMultipartFile则为数组即可<br>   @RequestMapping(“/upload”)<br>   public String fileUpload(@RequestParam(“file”) CommonsMultipartFile file ,HttpServletRequest request) throws IOException {</p>
<pre><code> //获取文件名 : file.getOriginalFilename();
 String uploadFileName = file.getOriginalFilename();

 //如果文件名为空，直接回到首页！
 if (&quot;&quot;.equals(uploadFileName)){
     return &quot;redirect:/index.jsp&quot;;
}
 System.out.println(&quot;上传文件名 : &quot;+uploadFileName);

 //上传路径保存设置
 String path = request.getServletContext().getRealPath(&quot;/upload&quot;);
 //如果路径不存在，创建一个
 File realPath = new File(path);
 if (!realPath.exists()){
     realPath.mkdir();
}
 System.out.println(&quot;上传文件保存地址：&quot;+realPath);

 InputStream is = file.getInputStream(); //文件输入流
 OutputStream os = new FileOutputStream(new File(realPath,uploadFileName));//文件输出流

 //读取写出
 int len=0;
 byte[] buffer = new byte[1024];
 while ((len=is.read(buffer))!=-1){
     os.write(buffer,0,len);
     os.flush();
}
 os.close();
 is.close();
 return &quot;redirect:/index.jsp&quot;;</code></pre><p>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5、测试上传文件，OK！</span><br><span class="line"></span><br><span class="line">**采用file.Transto 来保存上传的文件**</span><br><span class="line"></span><br><span class="line">1、编写Controller</span><br></pre></td></tr></table></figure>
<p>/*</p>
<ul>
<li><p>采用file.Transto 来保存上传的文件</p>
</li>
<li><p>/<br>@RequestMapping(“/upload2”)<br>public String  fileUpload2(@RequestParam(“file”) CommonsMultipartFile file,HttpServletRequest request) throws IOException {</p>
<p>  //上传路径保存设置<br>  String path = request.getServletContext().getRealPath(“/upload”);<br>  File realPath = new File(path);<br>  if (!realPath.exists()){</p>
<pre><code>realPath.mkdir();</code></pre><p> }<br>  //上传文件地址<br>  System.out.println(“上传文件保存地址：”+realPath);</p>
<p>  //通过CommonsMultipartFile的方法直接写文件（注意这个时候）<br>  file.transferTo(new File(realPath +”/“+ file.getOriginalFilename()));</p>
<p>  return “redirect:/index.jsp”;<br>}</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2、前端表单提交地址修改</span><br><span class="line"></span><br><span class="line">3、访问提交测试，OK！</span><br><span class="line"></span><br><span class="line">### 文件下载</span><br><span class="line"></span><br><span class="line">**文件下载步骤：**</span><br><span class="line"></span><br><span class="line">1、设置 response 响应头</span><br><span class="line"></span><br><span class="line">2、读取文件 – InputStream</span><br><span class="line"></span><br><span class="line">3、写出文件 – OutputStream</span><br><span class="line"></span><br><span class="line">4、执行操作</span><br><span class="line"></span><br><span class="line">5、关闭流 （先开后关）</span><br><span class="line"></span><br><span class="line">**代码实现：**</span><br></pre></td></tr></table></figure>
<p>@RequestMapping(value=”/download”)<br>public String downloads(HttpServletResponse response ,HttpServletRequest request)throws Exception{<br>   //要下载的图片地址<br>   String  path = request.getServletContext().getRealPath(“/upload”);<br>   String  fileName = “基础语法.jpg”;</p>
<p>   //1、设置response 响应头<br>   response.reset(); //设置页面不缓存,清空buffer<br>   response.setCharacterEncoding(“UTF-8”); //字符编码<br>   response.setContentType(“multipart/form-data”); //二进制传输数据<br>   //设置响应头<br>   response.setHeader(“Content-Disposition”,<br>           “attachment;fileName=”+URLEncoder.encode(fileName, “UTF-8”));</p>
<p>   File file = new File(path,fileName);<br>   //2、 读取文件–输入流<br>   InputStream input=new FileInputStream(file);<br>   //3、 写出文件–输出流<br>   OutputStream out = response.getOutputStream();</p>
<p>   byte[] buff =new byte[1024];<br>   int index=0;<br>   //4、执行 写出操作<br>   while((index= input.read(buff))!= -1){<br>       out.write(buff, 0, index);<br>       out.flush();<br>  }<br>   out.close();<br>   input.close();<br>   return null;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">前端</span><br></pre></td></tr></table></figure>
<p><a href="/download">点击下载</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class FileController &#123;</span><br><span class="line">&#x2F;&#x2F;@RequestParam(“file”) 将name&#x3D;file控件得到的文件封装成CommonsMultipartFile 对象</span><br><span class="line">&#x2F;&#x2F;批量上传CommonsMultipartFile则为数组即可</span><br><span class="line">@RequestMapping(&quot;&#x2F;upload&quot;)</span><br><span class="line">public String fileUpload(@RequestParam(“file”) CommonsMultipartFile file ,HttpServletRequest request) throws IOException &#123;</span><br></pre></td></tr></table></figure>
<p>   //获取文件名 : file.getOriginalFilename();<br>   String uploadFileName = file.getOriginalFilename();</p>
<p>   //如果文件名为空，直接回到首页！<br>   if (“”.equals(uploadFileName)){<br>       return “redirect:/index.jsp”;<br>  }<br>   System.out.println(“上传文件名 : “+uploadFileName);</p>
<p>   //上传路径保存设置<br>   String path = request.getServletContext().getRealPath(“/upload”);<br>   //如果路径不存在，创建一个<br>   File realPath = new File(path);<br>   if (!realPath.exists()){<br>       realPath.mkdir();<br>  }<br>   System.out.println(“上传文件保存地址：”+realPath);</p>
<p>   InputStream is = file.getInputStream(); //文件输入流<br>   OutputStream os = new FileOutputStream(new File(realPath,uploadFileName));//文件输出流</p>
<p>   //读取写出<br>   int len=0;<br>   byte[] buffer = new byte[1024];<br>   while ((len=is.read(buffer))!=-1){<br>       os.write(buffer,0,len);<br>       os.flush();<br>  }<br>   os.close();<br>   is.close();<br>   return “redirect:/index.jsp”;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、测试上传文件，OK！</p>
<p><strong>采用file.Transto 来保存上传的文件</strong></p>
<p>1、编写Controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">- 采用file.Transto 来保存上传的文件</span><br><span class="line">  *&#x2F;</span><br><span class="line">  @RequestMapping(&quot;&#x2F;upload2&quot;)</span><br><span class="line">  public String fileUpload2(@RequestParam(“file”) CommonsMultipartFile file,HttpServletRequest request) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;上传路径保存设置</span><br><span class="line">  String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;upload&quot;);</span><br><span class="line">  File realPath &#x3D; new File(path);</span><br><span class="line">  if (!realPath.exists())&#123;</span><br><span class="line">  realPath.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;上传文件地址</span><br><span class="line">  System.out.println(“上传文件保存地址：”+realPath);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br><span class="line">  file.transferTo(new File(realPath +&quot;&#x2F;&quot;+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">  return “redirect:&#x2F;index.jsp”;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>2、前端表单提交地址修改</p>
<p>3、访问提交测试，OK！</p>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p><strong>文件下载步骤：</strong></p>
<p>1、设置 response 响应头</p>
<p>2、读取文件 – InputStream</p>
<p>3、写出文件 – OutputStream</p>
<p>4、执行操作</p>
<p>5、关闭流 （先开后关）</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@RequestMapping(value&#x3D;&quot;&#x2F;download&quot;)</span><br><span class="line">public String downloads(HttpServletResponse response ,HttpServletRequest request)throws Exception&#123;</span><br><span class="line">&#x2F;&#x2F;要下载的图片地址</span><br><span class="line">String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;upload&quot;);</span><br><span class="line">String fileName &#x3D; “基础语法.jpg”;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1、设置response 响应头</span><br><span class="line">response.reset(); &#x2F;&#x2F;设置页面不缓存,清空buffer</span><br><span class="line">response.setCharacterEncoding(“UTF-8”); &#x2F;&#x2F;字符编码</span><br><span class="line">response.setContentType(“multipart&#x2F;form-data”); &#x2F;&#x2F;二进制传输数据</span><br><span class="line">&#x2F;&#x2F;设置响应头</span><br><span class="line">response.setHeader(“Content-Disposition”,</span><br><span class="line">“attachment;fileName&#x3D;”+URLEncoder.encode(fileName, “UTF-8”));</span><br><span class="line"></span><br><span class="line">File file &#x3D; new File(path,fileName);</span><br><span class="line">&#x2F;&#x2F;2、 读取文件–输入流</span><br><span class="line">InputStream input&#x3D;new FileInputStream(file);</span><br><span class="line">&#x2F;&#x2F;3、 写出文件–输出流</span><br><span class="line">OutputStream out &#x3D; response.getOutputStream();</span><br><span class="line"></span><br><span class="line">byte[] buff &#x3D;new byte[1024];</span><br><span class="line">int index&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;4、执行 写出操作</span><br><span class="line">while((index&#x3D; input.read(buff))!&#x3D; -1)&#123;</span><br><span class="line">out.write(buff, 0, index);</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line">out.close();</span><br><span class="line">input.close();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 8.重定向和转发</span><br><span class="line"></span><br><span class="line">## 结果跳转方式</span><br><span class="line"></span><br><span class="line">### ModelAndView</span><br><span class="line"></span><br><span class="line">设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</span><br><span class="line"></span><br><span class="line">页面 : &#123;视图解析器前缀&#125; + viewName +&#123;视图解析器后缀&#125;</span><br></pre></td></tr></table></figure>
<!-- 视图解析器 -->
<p><bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
     id="internalResourceViewResolver"><br>   <!-- 前缀 --><br>   <property name="prefix" value="/WEB-INF/jsp/" /><br>   <!-- 后缀 --><br>   <property name="suffix" value=".jsp" /><br></bean></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">对应的controller类</span><br></pre></td></tr></table></figure>
<p>public class ControllerTest1 implements Controller {</p>
<p>   public ModelAndView handleRequest(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws Exception {<br>       //返回一个模型视图对象<br>       ModelAndView mv = new ModelAndView();<br>       mv.addObject(“msg”,”ControllerTest1”);<br>       mv.setViewName(“test”);<br>       return mv;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### ServletAPI</span><br><span class="line"></span><br><span class="line">通过设置ServletAPI , 不需要视图解析器 .</span><br><span class="line"></span><br><span class="line">1、通过HttpServletResponse进行输出</span><br><span class="line"></span><br><span class="line">2、通过HttpServletResponse实现重定向</span><br><span class="line"></span><br><span class="line">3、通过HttpServletResponse实现转发</span><br></pre></td></tr></table></figure>
<p>@Controller<br>public class ResultGo {</p>
<p>   @RequestMapping(“/result/t1”)<br>   public void test1(HttpServletRequest req, HttpServletResponse rsp) throwsIOException {<br>       rsp.getWriter().println(“Hello,Spring BY servlet API”);<br>  }</p>
<p>   @RequestMapping(“/result/t2”)<br>   public void test2(HttpServletRequest req, HttpServletResponse rsp) throwsIOException {<br>       rsp.sendRedirect(“/index.jsp”);<br>  }</p>
<p>   @RequestMapping(“/result/t3”)<br>   public void test3(HttpServletRequest req, HttpServletResponse rsp) throwsException {<br>       //转发<br>       req.setAttribute(“msg”,”/result/t3”);<br>       req.getRequestDispatcher(“/WEB-INF/jsp/test.jsp”).forward(req,rsp);<br>  }</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### SpringMVC</span><br><span class="line"></span><br><span class="line">**通过SpringMVC来实现转发和重定向 - 无需视图解析器；**</span><br><span class="line"></span><br><span class="line">测试前，需要将视图解析器注释掉</span><br></pre></td></tr></table></figure>
<p>@Controller<br>public class ResultSpringMVC {<br>   @RequestMapping(“/rsm/t1”)<br>   public String test1(){<br>       //转发<br>       return “/index.jsp”;<br>  }</p>
<p>   @RequestMapping(“/rsm/t2”)<br>   public String test2(){<br>       //转发二<br>       return “forward:/index.jsp”;<br>  }</p>
<p>   @RequestMapping(“/rsm/t3”)<br>   public String test3(){<br>       //重定向<br>       return “redirect:/index.jsp”;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**通过SpringMVC来实现转发和重定向 - 有视图解析器；**</span><br><span class="line"></span><br><span class="line">重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</span><br><span class="line"></span><br><span class="line">可以重定向到另外一个请求实现 .</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">@Controller</span><br><span class="line">public class ResultSpringMVC2 &#123;</span><br><span class="line">   @RequestMapping(&quot;&#x2F;rsm2&#x2F;t1&quot;)</span><br><span class="line">   public String test1()&#123;</span><br><span class="line">       &#x2F;&#x2F;转发</span><br><span class="line">       return &quot;test&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;&#x2F;rsm2&#x2F;t2&quot;)</span><br><span class="line">   public String test2()&#123;</span><br><span class="line">       &#x2F;&#x2F;重定向</span><br><span class="line">       return &quot;redirect:&#x2F;index.jsp&quot;;</span><br><span class="line">       &#x2F;&#x2F;return &quot;redirect:hello.do&quot;; &#x2F;&#x2F;hello.do为另一个请求&#x2F;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-数据处理"><a href="#9-数据处理" class="headerlink" title="9.数据处理"></a>9.数据处理</h1><h3 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h3><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p>
<p>提交数据 : <a href="http://localhost:8080/hello?name=kuangshen" target="_blank" rel="noopener">http://localhost:8080/hello?name=kuangshen</a></p>
<p>处理方法 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello(String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出 : kuangshen</p>
<p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p>
<p>提交数据 : <a href="http://localhost:8080/hello?username=kuangshen" target="_blank" rel="noopener">http://localhost:8080/hello?username=kuangshen</a></p>
<p>处理方法 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span><br><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出 : kuangshen</p>
<p><strong>3、提交的是一个对象</strong></p>
<p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p>
<p>1、实体类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   private int id;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   &#x2F;&#x2F;构造</span><br><span class="line">   &#x2F;&#x2F;get&#x2F;set</span><br><span class="line">   &#x2F;&#x2F;tostring()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、提交数据 : <a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15" target="_blank" rel="noopener">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p>
<p>3、处理方法 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">public String user(User user)&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出 : User { id=1, name=’kuangshen’, age=15 }</p>
<p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p>
<h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p>
<p>我们前面一直都是如此 . 就不过多解释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ControllerTest1 implements Controller &#123;</span><br><span class="line"></span><br><span class="line">   public ModelAndView handleRequest(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">       &#x2F;&#x2F;返回一个模型视图对象</span><br><span class="line">       ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">       mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);</span><br><span class="line">       mv.setViewName(&quot;test&quot;);</span><br><span class="line">       return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>第二种 : 通过ModelMap</strong></p>
<p>ModelMap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name, ModelMap model)&#123;</span><br><span class="line">   &#x2F;&#x2F;封装要显示到视图中的数据</span><br><span class="line">   &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);</span><br><span class="line">   model.addAttribute(&quot;name&quot;,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>第三种 : 通过Model</strong></p>
<p>Model</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;ct2&#x2F;hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name, Model model)&#123;</span><br><span class="line">   &#x2F;&#x2F;封装要显示到视图中的数据</span><br><span class="line">   &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);</span><br><span class="line">   model.addAttribute(&quot;msg&quot;,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>就对于新手而言简单来说使用区别就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><br><span class="line"></span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line"></span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></table></figure>

<p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p>
<p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p>
<h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>测试步骤：</p>
<p>1、我们可以在首页编写一个提交的表单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#x2F;e&#x2F;t&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line"> &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;</span><br><span class="line"> &lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>2、后台编写对应的处理类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Encoding &#123;</span><br><span class="line">   @RequestMapping(&quot;&#x2F;e&#x2F;t&quot;)</span><br><span class="line">   public String test(Model model,String name)&#123;</span><br><span class="line">       model.addAttribute(&quot;msg&quot;,name); &#x2F;&#x2F;获取表单提交的值</span><br><span class="line">       return &quot;test&quot;; &#x2F;&#x2F;跳转到test页面显示输入的值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、输入中文测试，发现乱码</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209220239.png" alt="image-20210209220238279"></p>
<p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p>
<p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p>
<p>修改了xml文件需要重启服务器！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">   &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">   &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">   &lt;init-param&gt;</span><br><span class="line">       &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">       &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;</span><br><span class="line">   &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">   &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">   &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p>
<p>处理方法 :</p>
<p>1、修改tomcat配置文件 ：设置编码！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector URIEncoding&#x3D;&quot;utf-8&quot; port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">          connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">          redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>2、自定义过滤器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kuang.filter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 解决get和post请求 全部乱码的过滤器</span><br><span class="line">*&#x2F;</span><br><span class="line">public class GenericEncodingFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void destroy() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void doFilter(ServletRequest request, ServletResponse response, FilterChainchain) throws IOException, ServletException &#123;</span><br><span class="line">       &#x2F;&#x2F;处理response的字符编码</span><br><span class="line">       HttpServletResponse myResponse&#x3D;(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 转型为与协议相关对象</span><br><span class="line">       HttpServletRequest httpServletRequest &#x3D; (HttpServletRequest) request;</span><br><span class="line">       &#x2F;&#x2F; 对request包装增强</span><br><span class="line">       HttpServletRequest myrequest &#x3D; new MyRequest(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;自定义request对象，HttpServletRequest的包装类</span><br><span class="line">class MyRequest extends HttpServletRequestWrapper &#123;</span><br><span class="line"></span><br><span class="line">   private HttpServletRequest request;</span><br><span class="line">   &#x2F;&#x2F;是否编码的标记</span><br><span class="line">   private boolean hasEncode;</span><br><span class="line">   &#x2F;&#x2F;定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span><br><span class="line">   public MyRequest(HttpServletRequest request) &#123;</span><br><span class="line">       super(request);&#x2F;&#x2F; super必须写</span><br><span class="line">       this.request &#x3D; request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 对需要增强方法 进行覆盖</span><br><span class="line">   @Override</span><br><span class="line">   public Map getParameterMap() &#123;</span><br><span class="line">       &#x2F;&#x2F; 先获得请求方式</span><br><span class="line">       String method &#x3D; request.getMethod();</span><br><span class="line">       if (method.equalsIgnoreCase(&quot;post&quot;)) &#123;</span><br><span class="line">           &#x2F;&#x2F; post请求</span><br><span class="line">           try &#123;</span><br><span class="line">               &#x2F;&#x2F; 处理post乱码</span><br><span class="line">               request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">               return request.getParameterMap();</span><br><span class="line">          &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; else if (method.equalsIgnoreCase(&quot;get&quot;)) &#123;</span><br><span class="line">           &#x2F;&#x2F; get请求</span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap &#x3D; request.getParameterMap();</span><br><span class="line">           if (!hasEncode) &#123; &#x2F;&#x2F; 确保get手动编码逻辑只运行一次</span><br><span class="line">               for (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values &#x3D; parameterMap.get(parameterName);</span><br><span class="line">                   if (values !&#x3D; null) &#123;</span><br><span class="line">                       for (int i &#x3D; 0; i &lt; values.length; i++) &#123;</span><br><span class="line">                           try &#123;</span><br><span class="line">                               &#x2F;&#x2F; 处理get乱码</span><br><span class="line">                               values[i] &#x3D; new String(values[i]</span><br><span class="line">                                      .getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);</span><br><span class="line">                          &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode &#x3D; true;</span><br><span class="line">          &#125;</span><br><span class="line">           return parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       return super.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;取一个值</span><br><span class="line">   @Override</span><br><span class="line">   public String getParameter(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();</span><br><span class="line">       String[] values &#x3D; parameterMap.get(name);</span><br><span class="line">       if (values &#x3D;&#x3D; null) &#123;</span><br><span class="line">           return null;</span><br><span class="line">      &#125;</span><br><span class="line">       return values[0]; &#x2F;&#x2F; 取回参数的第一个值</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;取所有值</span><br><span class="line">   @Override</span><br><span class="line">   public String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();</span><br><span class="line">       String[] values &#x3D; parameterMap.get(name);</span><br><span class="line">       return values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p>
<p><strong>然后在web.xml中配置这个过滤器即可！</strong></p>
<p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p>
<h1 id="10-ssm思维导图"><a href="#10-ssm思维导图" class="headerlink" title="10.ssm思维导图"></a>10.ssm思维导图</h1><p><img src="https://gitee.com/summer502/img/raw/master/images/20210210203907.png" alt="ssm"></p>
]]></content>
      <categories>
        <category>java框架</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm整合</title>
    <url>/2021/02/12/ssm%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>环境：</p>
<ul>
<li>IDEA</li>
<li>MySQL 5.7.19</li>
<li>Tomcat 9</li>
<li>Maven 3.6</li>
</ul>
<p>要求：</p>
<ul>
<li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li>
</ul>
<a id="more"></a>

<h2 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h2><p>创建一个存放书籍数据的数据库表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE &#96;ssmbuild&#96;;</span><br><span class="line"></span><br><span class="line">USE &#96;ssmbuild&#96;;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;books&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;books&#96; (</span><br><span class="line">&#96;bookID&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;,</span><br><span class="line">&#96;bookName&#96; VARCHAR(100) NOT NULL COMMENT &#39;书名&#39;,</span><br><span class="line">&#96;bookCounts&#96; INT(11) NOT NULL COMMENT &#39;数量&#39;,</span><br><span class="line">&#96;detail&#96; VARCHAR(200) NOT NULL COMMENT &#39;描述&#39;,</span><br><span class="line">KEY &#96;bookID&#96; (&#96;bookID&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;books&#96;(&#96;bookID&#96;,&#96;bookName&#96;,&#96;bookCounts&#96;,&#96;detail&#96;)VALUES </span><br><span class="line">(1,&#39;Java&#39;,1,&#39;从入门到放弃&#39;),</span><br><span class="line">(2,&#39;MySQL&#39;,10,&#39;从删库到跑路&#39;),</span><br><span class="line">(3,&#39;Linux&#39;,5,&#39;从进门到进牢&#39;);</span><br></pre></td></tr></table></figure>

<h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><p>1、新建一Maven项目！ssmbuild ， 添加web的支持</p>
<p>2、导入相关的pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、Maven资源过滤设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、建立基本结构和配置框架！</p>
<ul>
<li><p>com.kuang.pojo</p>
</li>
<li><p>com.kuang.dao</p>
</li>
<li><p>com.kuang.service</p>
</li>
<li><p>com.kuang.controller</p>
</li>
<li><p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h3><p>1、数据库配置文件 <strong>database.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>2、IDEA关联数据库</p>
<p>3、编写MyBatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kuang.pojo"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/kuang/dao/BookMapper.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、编写数据库对应的实体类 com.kuang.pojo.Books</p>
<p>使用lombok插件！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">   <span class="keyword">private</span> String bookName;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">   <span class="keyword">private</span> String detail;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、编写Dao层的 Mapper接口！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kuang.dao.BookMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookById"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7、编写Service层的接口和实现类</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">   <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OK，到此，底层需求操作编写完毕！</strong></p>
<h3 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h3><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p>
<p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.kuang.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、<strong>Spring整合service层</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BookServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.kuang.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p>
<h3 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h3><p>1、<strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、<strong>spring-mvc.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">beanclass="org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span><span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、<strong>Spring配置整合文件，applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-service.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mvc.xml"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件，暂时结束！Controller-和-视图层编写"><a href="#配置文件，暂时结束！Controller-和-视图层编写" class="headerlink" title="配置文件，暂时结束！Controller 和 视图层编写"></a><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></h2><p>1、BookController 类编写 ， 方法一：查询全部书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier</span>(<span class="string">"BookServiceImpl"</span>)</span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/allBook"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"allBook"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、编写首页 <strong>index.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span>pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">       a &#123;</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: <span class="number">18</span>px;</span><br><span class="line">      &#125;</span><br><span class="line">       h3 &#123;</span><br><span class="line">           width: <span class="number">180</span>px;</span><br><span class="line">           height: <span class="number">38</span>px;</span><br><span class="line">           margin: <span class="number">100</span>px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: <span class="number">38</span>px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: <span class="number">4</span>px;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href="$&#123;pageContext.request.contextPath&#125;/book/allBook"&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>3、书籍列表页面 <strong>allbook.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4 column"</span>&gt;</span><br><span class="line">           &lt;a class="btn btn-primary"href="$&#123;pageContext.request.contextPath&#125;/book/toAddBook"&gt;新增&lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-hover table-striped"</span>&gt;</span><br><span class="line">               &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                   &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">               &lt;tbody&gt;</span><br><span class="line">               &lt;c:forEach <span class="keyword">var</span>=<span class="string">"book"</span> items=<span class="string">"$&#123;requestScope.get('list')&#125;"</span>&gt;</span><br><span class="line">                   &lt;tr&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;</span><br><span class="line">                           &lt;ahref="$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;"&gt;更改&lt;/a&gt; |</span><br><span class="line">                           &lt;ahref="$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;"&gt;删除&lt;/a&gt;</span><br><span class="line">                       &lt;/td&gt;</span><br><span class="line">                   &lt;/tr&gt;</span><br><span class="line">               &lt;/c:forEach&gt;</span><br><span class="line">               &lt;/tbody&gt;</span><br><span class="line">           &lt;/table&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>4、BookController 类编写 ， 方法二：添加书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/toAddBook"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"addBook"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/addBook"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPaper</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   bookService.addBook(books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、添加书籍页面：<strong>addBook.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/book/addBook"</span>method=<span class="string">"post"</span>&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookName"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookCounts"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">"text"</span> name=<span class="string">"detail"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"添加"</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>6、BookController 类编写 ， 方法三：修改书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/toUpdateBook"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdateBook</span><span class="params">(Model model, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">   Books books = bookService.queryBookById(id);</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   model.addAttribute(<span class="string">"book"</span>,books );</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateBook"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Model model, Books book)</span> </span>&#123;</span><br><span class="line">   System.out.println(book);</span><br><span class="line">   bookService.updateBook(book);</span><br><span class="line">   Books books = bookService.queryBookById(book.getBookID());</span><br><span class="line">   model.addAttribute(<span class="string">"books"</span>, books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、修改书籍页面 <strong>updateBook.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;修改信息&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;修改信息&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/book/updateBook"</span>method=<span class="string">"post"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"bookID"</span> value=<span class="string">"$&#123;book.getBookID()&#125;"</span>/&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookName"</span>value=<span class="string">"$&#123;book.getBookName()&#125;"</span>/&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookCounts"</span>value=<span class="string">"$&#123;book.getBookCounts()&#125;"</span>/&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">"text"</span> name=<span class="string">"detail"</span> value=<span class="string">"$&#123;book.getDetail() &#125;"</span>/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>8、BookController 类编写 ， 方法四：删除书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/del/&#123;bookId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(@PathVariable(<span class="string">"bookId"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">   bookService.deleteBookById(id);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置Tomcat，进行运行！</strong></p>
<p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！</p>
<p><strong>项目结构图</strong></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209221232.png" alt="img"></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210209220649.png" alt="image-20210209220647888"></p>
<p>排查思路：</p>
<p>1.查看bean是否注入成功</p>
<p>2.使用junit进行单元测试</p>
<p>3.问题一定不出现在底层，是spring出现了问题</p>
<p>4.springmvc整合的时候没有调用到service层的bean</p>
<ul>
<li>applicationContext.xml没有注入bean</li>
<li>web.xml我们也绑定过配置文件，我们配置的是springmvc</li>
</ul>
]]></content>
      <categories>
        <category>java框架</category>
      </categories>
      <tags>
        <tag>ssm整合</tag>
      </tags>
  </entry>
</search>
