<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot实现逻辑删除</title>
    <url>/2020/08/17/springboot%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<p>采用Spring Boot框架搭建，编写接口实现批量删除</p>
<a id="more"></a>

<h1 id="springboot实现批量删除"><a href="#springboot实现批量删除" class="headerlink" title="springboot实现批量删除"></a>springboot实现批量删除</h1><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table student</span><br><span class="line">(</span><br><span class="line">    id       int auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    name     varchar(12)   null,</span><br><span class="line">    classes  varchar(12)   null,</span><br><span class="line">    score    int           null,</span><br><span class="line">    isdelete int default 1 null</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="2-编写studentmapper-xml文件"><a href="#2-编写studentmapper-xml文件" class="headerlink" title="2.编写studentmapper.xml文件"></a>2.编写studentmapper.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.centersystem.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.springboot.centersystem.entity.Student"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"classes"</span> <span class="attr">property</span>=<span class="string">"classes"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"score"</span> <span class="attr">property</span>=<span class="string">"score"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"isdelete"</span> <span class="attr">property</span>=<span class="string">"isdelete"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteid"</span> <span class="attr">parameterType</span>=<span class="string">"com.springboot.centersystem.entity.Student"</span>&gt;</span></span><br><span class="line">            delete from student</span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-编写实体类"><a href="#3-编写实体类" class="headerlink" title="3.编写实体类"></a>3.编写实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 班级</span></span><br><span class="line">    <span class="keyword">private</span> String classes;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-编写studentmapper"><a href="#4-编写studentmapper" class="headerlink" title="4.编写studentmapper"></a>4.编写studentmapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.springboot.centersystem.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteid</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-编写student-service"><a href="#5-编写student-service" class="headerlink" title="5.编写student.service"></a>5.编写student.service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.springboot.centersystem.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteid</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-编写service实现类"><a href="#6-编写service实现类" class="headerlink" title="6.编写service实现类"></a>6.编写service实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteid</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> studentMapper.deleteid(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-编写controller"><a href="#7-编写controller" class="headerlink" title="7.编写controller"></a>7.编写controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/poi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"deleteid"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteid</span><span class="params">(@RequestBody <span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">        studentService.deleteid(a);</span><br><span class="line">       </span><br><span class="line">    &#125; <span class="comment">//[5,6]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"删除成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8.测试"></a>8.测试</h2><p>首先看到数据库两条数据</p>
<p><img src="https://img-blog.csdnimg.cn/20200816160454881.png#pic_center" alt="image-20200816155336439"></p>
<p>接着打开postman进行测试</p>
<p><img src="https://img-blog.csdnimg.cn/2020081616051588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM4OTU3Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="image-20200816155653335"></p>
<p>查看数据库数据已经删除了</p>
<p><img src="https://img-blog.csdnimg.cn/20200816160542349.png#pic_center" alt="image-20200816155737233"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo编写文章</title>
    <url>/2021/01/31/hexo%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>搭建的Hexo静态博客，如何编写文章呢？</p>
<a id="more"></a>

<h1 id="hexo编写文章"><a href="#hexo编写文章" class="headerlink" title="hexo编写文章"></a>hexo编写文章</h1><h2 id="一-创建文章"><a href="#一-创建文章" class="headerlink" title="一.创建文章"></a>一.创建文章</h2><p>在博客目录下</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95.PNG" alt=""></p>
<p>右键git bash，输入<code>hexo new &quot;文章名&quot;</code>创建文章，会在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source&#x2F;_post&#96; 文件夹下创建一个文件，命名为：&#96;文章名.md</span><br></pre></td></tr></table></figure>

<p>这个文件就是将要发布到网站上的原始文件，用于记录文章内容</p>
<h2 id="二-markdown"><a href="#二-markdown" class="headerlink" title="二.markdown"></a>二.markdown</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>Markdown已经成为目前世界上最流行的用于书写博客的语言。在这里博主强烈的推荐给大家一款简洁易用的Markdown 编辑器 —— Typora，这里附上 Typora 的下载地址：<a href="https://www.typora.io/，" target="_blank" rel="noopener">https://www.typora.io/，</a></p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><h4 id="（1）标题"><a href="#（1）标题" class="headerlink" title="（1）标题"></a>（1）标题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题 </span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">（这里注意#和文字之间有一个空格）</span><br></pre></td></tr></table></figure>



<h4 id="（2）粗体、斜体、删除线和下划线"><a href="#（2）粗体、斜体、删除线和下划线" class="headerlink" title="（2）粗体、斜体、删除线和下划线"></a>（2）粗体、斜体、删除线和下划线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>



<h4 id="（3）引用块"><a href="#（3）引用块" class="headerlink" title="（3）引用块"></a>（3）引用块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 文字引用</span><br></pre></td></tr></table></figure>



<h4 id="（4）代码块"><a href="#（4）代码块" class="headerlink" title="（4）代码块"></a>（4）代码块</h4><p><img src="https://gitee.com/summer502/img/raw/master/images/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%88%AA%E5%9B%BE.PNG" alt=""></p>
<h4 id="（5）公式块"><a href="#（5）公式块" class="headerlink" title="（5）公式块"></a>（5）公式块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">数学公式</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>



<h4 id="（6）分割线"><a href="#（6）分割线" class="headerlink" title="（6）分割线"></a>（6）分割线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：---</span><br><span class="line">方法二：+++</span><br><span class="line">方法三：***</span><br></pre></td></tr></table></figure>



<h4 id="（7）列表"><a href="#（7）列表" class="headerlink" title="（7）列表"></a>（7）列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表项</span><br><span class="line"></span><br><span class="line">* 无序列表项</span><br><span class="line"></span><br><span class="line">+ 无序列表项</span><br><span class="line"></span><br><span class="line">- 无序列表项</span><br></pre></td></tr></table></figure>



<h4 id="（8）表格"><a href="#（8）表格" class="headerlink" title="（8）表格"></a>（8）表格</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头1|表头2</span><br><span class="line">-|-|-</span><br><span class="line">内容11|内容12</span><br><span class="line">内容21|内容22</span><br></pre></td></tr></table></figure>



<h4 id="（9）超链接"><a href="#（9）超链接" class="headerlink" title="（9）超链接"></a>（9）超链接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：[链接文字](链接地址 &quot;链接描述&quot;)</span><br><span class="line">例如：[示例链接](https:&#x2F;&#x2F;www.example.com&#x2F; &quot;示例链接&quot;)</span><br><span class="line">方法二：&lt;链接地址&gt;</span><br><span class="line">例如：&lt;https:&#x2F;&#x2F;www.example.com&#x2F;&gt;</span><br></pre></td></tr></table></figure>



<h4 id="（10）图片"><a href="#（10）图片" class="headerlink" title="（10）图片"></a>（10）图片</h4><p><img src="https://gitee.com/summer502/img/raw/master/images/%E5%9B%BE%E7%89%87%E7%A4%BA%E4%BE%8B%E6%88%AA%E5%9B%BE.PNG" alt=""></p>
<p><strong>说明</strong>：在 Hexo中 插入图片时，请按照以下的步骤进行设置</p>
<ol>
<li><p>将 <strong>站点配置文件</strong> 中的 <code>post_asset_folder</code> 选项的值设置为 true</p>
</li>
<li><p>在站点文件夹中打开 git bash，输入命令 <code>npm install hexo-asset-image --save</code> 安装插件</p>
</li>
<li><p>这样，当使用 <code>hexo new title</code> 创建文章时，将同时在 <code>source/_post</code> 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可</p>
<p>例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句 <code>![示例图片](title/example.PNG &quot;示例图片&quot;)</code> 添加图片</p>
</li>
<li><p>当然也可以使用图床服务：typora+picgo+gitee:参考链接：</p>
<p><a href="https://www.cnblogs.com/windowsxpxp/p/12694524.html" target="_blank" rel="noopener">https://www.cnblogs.com/windowsxpxp/p/12694524.html</a></p>
</li>
</ol>
<h2 id="三-文章的设置"><a href="#三-文章的设置" class="headerlink" title="三.文章的设置"></a>三.文章的设置</h2><p>1.创建的文章内的开头的模板设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: hexo编写文章</span><br><span class="line">date: 2021-01-31 14:49:43</span><br><span class="line">tags: hexo</span><br><span class="line">categories: hexo</span><br></pre></td></tr></table></figure>

<p>注意以上的属性和值之间必须有空格空出</p>
<p>title自动创建，表示文章的名字</p>
<p>date自动创建，表示创建的日期</p>
<p>tags手动创建,表示该文章的标签，若有多个可以这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags: [tag1, tag2, ...] 或者</span><br><span class="line">tags:</span><br><span class="line"> -tag1</span><br><span class="line"> -tag2</span><br></pre></td></tr></table></figure>

<p>categories手动创建，表示文章的分类</p>
<p>2.在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容</p>
<p>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简</p>
<p>这时，我们只需在文章中使用<!--more--> 标志即可，表示只会显示标志前面的内容</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: springboot实现逻辑删除</span><br><span class="line">date: 2020-08-17 13:22:21</span><br><span class="line">tags: springboot</span><br><span class="line">categories: java</span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<p>只会显示more之间的内容。</p>
<p>3.部署发布</p>
<p>采用hexo g部署</p>
<p>hexo s进行本地测试</p>
<p>hexo d发布</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>window快捷键及dos命令</title>
    <url>/2021/01/31/window%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8Ados%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录一下window常用的快捷键以及一些dos命令</p>
<a id="more"></a>

<h2 id="一-常用快捷键"><a href="#一-常用快捷键" class="headerlink" title="一.常用快捷键"></a>一.常用快捷键</h2><p><strong>Ctrl+a</strong> 全选</p>
<p><strong>Ctrl+c</strong> 复制</p>
<p><strong>Ctrl+d</strong> 删除</p>
<p><strong>Ctrl+f</strong> 查找 </p>
<p><strong>Ctrl+k</strong> 设置为超链接 </p>
<p><strong>Ctrl+s</strong> 保存 </p>
<p><strong>Ctrl+u</strong> 下划线 </p>
<p><strong>Ctrl+v</strong>  粘贴 </p>
<p><strong>Ctrl+x</strong> 剪切</p>
<p><strong>Ctrl+y</strong>反撤销</p>
<p><strong>Ctrl+z</strong>撤销</p>
<p><strong>Ctrl+Shift+Delete</strong> 打开浏览器清理缓存</p>
<p><strong>Win+E</strong> 打开“我的电脑”</p>
<p><strong>Win+R</strong>打开“运行窗口”</p>
<p><strong>f2</strong> 重命名</p>
<p><strong>Ctrl+Alt+Delete</strong>打开后台管理器</p>
<h2 id="二-打开CMD的方式"><a href="#二-打开CMD的方式" class="headerlink" title="二.打开CMD的方式"></a>二.打开CMD的方式</h2><ol>
<li><p>开始菜单+系统+命令提示符</p>
</li>
<li><p>Win+R 输入cmd打开控制台（推荐使用）</p>
</li>
<li><p>资源管理器（我的电脑的任意目录）的地址栏输入cmd</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/cmd%E6%88%AA%E5%9B%BE.PNG" alt=""></p>
</li>
</ol>
<h2 id="三-常见Dos命令"><a href="#三-常见Dos命令" class="headerlink" title="三.常见Dos命令"></a>三.常见Dos命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">盘符切换    盘符名称+冒号（英文输入法状态下）</span><br><span class="line">产看当前目录下的所有文件     dir</span><br><span class="line">切换目录   <span class="built_in">cd</span>+空格+目录名称</span><br><span class="line">         <span class="built_in">cd</span>+/d+空格+盘符名称+冒号 （/d可以实现跨盘符操作）</span><br><span class="line">         <span class="built_in">cd</span>+/d+空格+盘符名称+冒号+\+文件夹名称（可以实现在某一个盘符内跳转到另外一个盘符的制定文件夹下）          <span class="built_in">cd</span>+空格+..  (返回上一级)</span><br><span class="line">清理屏幕    cls</span><br><span class="line">退出终端    <span class="built_in">exit</span></span><br><span class="line">查看电脑IP  ipconfig</span><br><span class="line">打开应用    calc  计算器</span><br><span class="line">            mapaint  绘图工具</span><br><span class="line">            notepad  记事本</span><br><span class="line">ping命令    ping+空格+某网站的网址</span><br><span class="line">            如：ping www.baidu.com</span><br><span class="line">注：在非cmd窗口下复制的内容，在cmd窗口下，鼠标右键单击即可，即为粘贴</span><br><span class="line">创建文件夹   md+空格+文件夹名称</span><br><span class="line">创建文件     <span class="built_in">cd</span>+&gt;+文件名称及后缀</span><br><span class="line">删除文件     del+空格+文件名称及后缀</span><br><span class="line">删除文件夹    rd+空格+文件夹名称</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC学习</title>
    <url>/2021/02/01/JDBC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>JDBC就是用了让JAVA代码能更好的与数据库连接而由sun公司推出的一套java应用程序访问数据库的技术规范。，使用JDBC需要几个步骤，同时对于增删改查也分为两种不同的操作，为了避免设置拼串时可能出现异常，使用preparedStatement进行预处理，为了减少代码量，可以将相同的代码封装到一个工具类内。</p>
<a id="more"></a>

<h2 id="一、概述："><a href="#一、概述：" class="headerlink" title="一、概述："></a>一、概述：</h2><p>　　JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。是Java访问数据库的标准规范</p>
<p>　　JDBC提供了一种基准,据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。</p>
<p>　　DBC需要连接驱动，驱动是两个设备要进行通信，满足一定通信数据格式，数据格式由设备提供商规定，设备提供商为设备提供驱动软件，通过软件可以与该设备进行通信。</p>
<h2 id="二、原理："><a href="#二、原理：" class="headerlink" title="二、原理："></a>二、原理：</h2><p>　　Java提供访问数据库规范称为JDBC，而生产厂商提供规范的实现类称为驱动。</p>
<p>　　JDBC是接口，驱动是接口的实现类，没有驱动将无法完成数据库连接，从而不能操作数据库！每个数据库厂商都需要提供自己的驱动，用来连接自己公司的数据库，也就是说驱动一般都由数据库生成厂商提供。</p>
<h2 id="三、开发步骤："><a href="#三、开发步骤：" class="headerlink" title="三、开发步骤："></a>三、开发步骤：</h2><p>​        1、导入驱动包</p>
<p>​                        新建java项目，在项目中新建libs文件夹并向其中添加mysql驱动包并右键build  path</p>
<p>​                        <img src="https://gitee.com/summer502/img/raw/master/images/20210201114418.PNG" alt=""></p>
<p>　　2、注册驱动.</p>
<p>　　3、获得连接.</p>
<p>　　4、获得语句执行平台</p>
<p>　　5、执行sql语句</p>
<p>　　6、处理结果</p>
<p>　　7、释放资源.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动(包名+类名）</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">        String url=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"</span>;</span><br><span class="line">        String user=<span class="string">"root"</span>;</span><br><span class="line">        String password=<span class="string">"root"</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="comment">//System.out.println(conn);报地址为正确sql服务关了可能报错</span></span><br><span class="line">        <span class="comment">//3.获取语句执行平台：</span></span><br><span class="line">        Statement sta=conn.createStatement();</span><br><span class="line">        <span class="comment">//4.执行SQL语句：增-----一套语句执行一句sql语句 返回的是一个Int值，是指执行了几行</span></span><br><span class="line">        String sql=<span class="string">"insert into sort(sname) values('小红')"</span>;</span><br><span class="line">        <span class="keyword">int</span> row=sta.executeUpdate(sql);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">        <span class="comment">//6.释放资源(先开后关)</span></span><br><span class="line">        sta.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1、导入驱动JAR包："><a href="#1、导入驱动JAR包：" class="headerlink" title="1、导入驱动JAR包："></a>1、导入驱动JAR包：</h3><p>　　创建lib目录，用于存放当前项目需要的所有jar包</p>
<p>　　选择jar包，右键执行build path / Add to Build Path</p>
<h3 id="2、注册驱动：Class-forName-“com-mysql-jdbc-Driver”"><a href="#2、注册驱动：Class-forName-“com-mysql-jdbc-Driver”" class="headerlink" title="2、注册驱动：Class.forName(“com.mysql.jdbc.Driver”);"></a>2、注册驱动：Class.forName(“com.mysql.jdbc.Driver”);</h3><h3 id="3、获得链接："><a href="#3、获得链接：" class="headerlink" title="3、获得链接："></a>3、获得链接：</h3><p>jdbc:mysql://localhost:3306/test</p>
<p>JDBC规定url的格式由三部分组成，每个部分中间使用冒号分隔。</p>
<p> 第一部分是jdbc，这是固定的；</p>
<p> 第二部分是数据库名称；</p>
<p> 第三部分是由数据库厂商规定的，我们需要了解每个数据库厂商的要求，mysql的第三部分分别由数据库服务器的IP地址（localhost==127.0.0.1）、端口号（3306），以及数据库名称(test)组成。</p>
<h3 id="4、获得语句执行平台："><a href="#4、获得语句执行平台：" class="headerlink" title="4、获得语句执行平台："></a>4、获得语句执行平台：</h3><p>常用方法：</p>
<p>① int executeUpdate(String sql); –执行insert 、update、 delete语句.返回执行的行数int值。所有的增删改都执行这个语句</p>
<p>② ResultSet  executeQuery(String sql); –执行select语句.返回ResultSet的结果集对象（二维表格）</p>
<p>③ boolean execute(String sql); –执行select返回true 执行其他的语句返回false.（不推荐使用）</p>
<h3 id="5、处理结果集：（执行insert、update、delete无需处理）"><a href="#5、处理结果集：（执行insert、update、delete无需处理）" class="headerlink" title="5、处理结果集：（执行insert、update、delete无需处理）"></a>5、处理结果集：（执行insert、update、delete无需处理）</h3><p>　　ResultSet实际上就是一张二维的表格，我们可以调用其boolean next()方法指向某行记录，当第一次调用next()方法时，便指向第一行记录的位置，这时就可以使用ResultSet提供的getXXX(int col)方法(与索引从0开始不同个，列从1开始)来获取指定列的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rs.next();&#x2F;&#x2F;指向第一行</span><br><span class="line">rs.getInt(1);&#x2F;&#x2F;获取第一行第一列的数据</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">                <span class="comment">//1.注册驱动(静态方法)(包名+类名）</span></span><br><span class="line">                Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">                <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">                String url=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;ServerTimeZone=utf8"</span>;</span><br><span class="line">                String user=<span class="string">"root"</span>;</span><br><span class="line">                String password=<span class="string">"root"</span>;</span><br><span class="line">                Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">                <span class="comment">//System.out.println(conn);报地址为正确sql服务关了可能报错</span></span><br><span class="line">                <span class="comment">//3.获取语句执行平台：</span></span><br><span class="line">                Statement sta=conn.createStatement();</span><br><span class="line">                <span class="comment">//4.执行sql语句</span></span><br><span class="line">                String sql=<span class="string">"select * from sort"</span>;</span><br><span class="line">                ResultSet rs=sta.executeQuery(sql);</span><br><span class="line">                <span class="comment">//5.处理结果集(括号里一般是第1列、第2列，但是可以写字段名)</span></span><br><span class="line">                ArrayList&lt;Sort&gt; arr=<span class="keyword">new</span> ArrayList&lt;Sort&gt;();</span><br><span class="line">                <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(rs.getInt("sid")+"..."+rs.getString("sname"));</span></span><br><span class="line">                    Sort sort=<span class="keyword">new</span> Sort();</span><br><span class="line">                    sort.setSid(rs.getInt(<span class="string">"sid"</span>));</span><br><span class="line">                    sort.setSname(rs.getString(<span class="string">"sname"</span>));</span><br><span class="line">                    arr.add(sort);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(arr);</span><br><span class="line">                <span class="comment">//6.释放资源</span></span><br><span class="line">                rs.close();</span><br><span class="line">                sta.close();</span><br><span class="line">                conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、释放资源："><a href="#6、释放资源：" class="headerlink" title="6、释放资源："></a>6、释放资源：</h3><p>　　使用后的东西都需要关闭！关闭的顺序是先得到的后关闭，后得到的先关闭。</p>
<h2 id="五、预处理对象："><a href="#五、预处理对象：" class="headerlink" title="五、预处理对象："></a>五、预处理对象：</h2><p>　　使用PreparedStatement预处理对象时，建议每条sql语句所有的实际参数，都使用逗号分隔。</p>
<p>String sql = “insert into sort(sid,sname) values(?,?)”;</p>
<p>PreparedStatement预处理对象代码：</p>
<p>PreparedStatement psmt = conn.prepareStatement(sql)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动(静态方法)(包名+类名）</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">        String url=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"</span>;</span><br><span class="line">        String user=<span class="string">"root"</span>;</span><br><span class="line">        String password=<span class="string">"root"</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="comment">//System.out.println(conn);报地址为正确sql服务关了可能报错</span></span><br><span class="line">        <span class="comment">//3.获取语句执行平台对象：</span></span><br><span class="line">        String sql=<span class="string">"select count(*) from user where uname=? and pwd=?"</span>;</span><br><span class="line">        PreparedStatement pst=conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//4.执行sql语句</span></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请出入用户名："</span>);</span><br><span class="line">        String uname=sc.next();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String pwd=sc.next();</span><br><span class="line">        <span class="comment">//给sql语句的？赋值</span></span><br><span class="line">        pst.setString(<span class="number">1</span>,uname);</span><br><span class="line">        pst.setString(<span class="number">2</span>, pwd);</span><br><span class="line">        ResultSet rs= pst.executeQuery();<span class="comment">//()里不能写sql</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.处理结果集</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            count=rs.getInt(<span class="number">1</span>);<span class="comment">//因为就一列</span></span><br><span class="line">            System.out.println(count);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">            rs.close();</span><br><span class="line">            pst.close();</span><br><span class="line">            conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、JDBC工具类："><a href="#六、JDBC工具类：" class="headerlink" title="六、JDBC工具类："></a>六、JDBC工具类：</h2><p>　　“获得数据库连接”操作，将在以后的增删改查所有功能中都存在，可以封装工具类JDBCUtils。提供获取连接对象的方法，从而达到代码的重复利用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oracle.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">封装工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接对象的方法(静态的）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Connection <span class="title">getConnnections</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1.注册驱动(静态方法)(包名+类名）</span></span><br><span class="line">                    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">                    <span class="comment">//2.获取连接对象(导包都导sql里面的，不导jdbc里的；多态！报异常是因为用户输入的串可能写错）后面设置下数据格式</span></span><br><span class="line">                    String url=<span class="string">"jdbc:mysql://localhost:3306/java0603?useUnicode=true&amp;characterEncoding=UTF-8"</span>;</span><br><span class="line">                    String user=<span class="string">"root"</span>;</span><br><span class="line">                    String password=<span class="string">"123456"</span>;</span><br><span class="line">                    conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> conn;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement sta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sta!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sta.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement sta,ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sta!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sta.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增分类Sort</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        <span class="comment">//1.获得连接对象</span></span><br><span class="line">        Connection conn=JDBCUtils.getConnnections();</span><br><span class="line">        <span class="comment">//测试下是地址不System.out.println(conn);</span></span><br><span class="line">        <span class="comment">//2.获取语句执行平台</span></span><br><span class="line">        String sql=<span class="string">"insert into sort (sname) values(?)"</span>;</span><br><span class="line">        PreparedStatement pst=conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        pst.setString(<span class="number">1</span>, <span class="string">"打火机"</span>);</span><br><span class="line">        <span class="keyword">int</span> row=pst.executeUpdate();</span><br><span class="line">        System.out.println(row);</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        JDBCUtils.close(conn, pst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、PreparedStatement和Statement的区别-？"><a href="#七、PreparedStatement和Statement的区别-？" class="headerlink" title="七、PreparedStatement和Statement的区别 ？"></a>七、PreparedStatement和Statement的区别 ？</h2><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p>
<p>使用PreparedStatement（预编译对象）可以用来解决sql注入问题，在执行多次插入数据时，Statement需要编译多次执行多次，而PreparedStatement则需要编译一次执行多次</p>
<h2 id="八、Api接口"><a href="#八、Api接口" class="headerlink" title="八、Api接口"></a>八、Api接口</h2><p>​       <strong>DriverManager驱动管理类</strong></p>
<p>​            registDriver(Driver对象)：注册驱动，不推荐使用</p>
<p>​            getConnection(url,user,pwd):获取连接</p>
<p>​        <strong>Connection 连接对象接口</strong></p>
<p>​                      createStatement():生成命令对象</p>
<pre><code>prepareStatement(sql):生成预编译命令对象</code></pre><p>​        <strong>Statement命令对象接口</strong></p>
<p>​                executeUpdate(sql):执行增删改语句，返回受影响的行数</p>
<p>​            executeQuery(sql):执行查询语句，返回结果集</p>
<p>​            execute(sql):执行任意sql语句，返回boolean</p>
<p>​        <strong>PreparedStatement预编译命令对象接口</strong></p>
<p>​             executeUpdate():执行增删改语句，返回受影响的行数</p>
<p>​            executeQuery():执行查询语句，返回结果集</p>
<p>​            execute():执行任意sql语句，返回boolean</p>
<pre><code>setXX(占位符索引，占位符的值)：设置对应索引的占位符的值，类型为XX类型</code></pre><p>​            setObject(占位符索引，占位符的值)：设置对应索引的占位符的值，类型为Object类型</p>
<p>​        <strong>ResultSet结果集对象接口</strong></p>
<p>​            next():下移一行，返回当前行是否有值</p>
<p>​            previous（）：上移一行，返回当前行是否有值</p>
<p>​                        getXX(列索引|列名|别名):返回对应列的值，接收类型为XX</p>
<p>​            getObject(列索引|列名|别名):返回对应列的值，接收类型为Object</p>
<h2 id="九、批处理"><a href="#九、批处理" class="headerlink" title="九、批处理"></a>九、批处理</h2><p>当需要成批插入或者更新记录时。可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。</p>
<p>JDBC的批量处理语句包括下面两个方法：</p>
<p><strong>addBatch</strong>()：添加需要批量处理的SQL语句或参数</p>
<p><strong>executeBatch</strong>()：执行批量处理语句；</p>
<p><strong>clearBatch</strong>():清空批处理包的语句</p>
<p><strong>通常我们会遇到两种批量执行SQL语句的情况：</strong></p>
<p>①多条SQL语句的批量处理</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201122814.PNG" alt=""></p>
<p>②一个SQL语句的批量传参</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201122830.PNG" alt=""></p>
<p><strong>注意：JDBC连接MySQL时，如果要使用批处理功能，请再url中加参数?rewriteBatchedStatements=true</strong></p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBatch</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	没有使用批处理</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		</span><br><span class="line">		String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">		String user = <span class="string">"root"</span>;</span><br><span class="line">		String password = <span class="string">"root"</span>;</span><br><span class="line">		Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        String sql = <span class="string">"INSERT INTO t_department(dname,description) VALUES(?,?)"</span>;</span><br><span class="line">        PreparedStatement st = conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        	st.setString(<span class="number">1</span>, <span class="string">"测试部门"</span> + i);</span><br><span class="line">        	st.setString(<span class="number">2</span>, <span class="string">"测试部门描述"</span>  + i);</span><br><span class="line">        	</span><br><span class="line">        	st.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		st.close();</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	使用批处理</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		</span><br><span class="line">		String url = <span class="string">"jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true"</span>;</span><br><span class="line">		String user = <span class="string">"root"</span>;</span><br><span class="line">		String password = <span class="string">"root"</span>;</span><br><span class="line">		Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        String sql = <span class="string">"INSERT INTO t_department(dname,description) VALUES(?,?)"</span>;</span><br><span class="line">        PreparedStatement st = conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        	st.setString(<span class="number">1</span>, <span class="string">"测试部门"</span> + i);</span><br><span class="line">        	st.setString(<span class="number">2</span>, <span class="string">"测试部门描述"</span>  + i);</span><br><span class="line">        	</span><br><span class="line">        	st.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st.executeBatch();</span><br><span class="line">		</span><br><span class="line">		st.close();</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十、事务"><a href="#十、事务" class="headerlink" title="十、事务"></a>十、事务</h2><p>JDBC程序中当一个连接对象被创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</p>
<p>JDBC程序中为了让多个 SQL 语句作为一个事务执行：（重点）</p>
<p>调用 Connection 对象的 setAutoCommit(false); 以取消自动提交事务</p>
<p>在所有的 SQL 语句都成功执行后，调用 commit(); 方法提交事务</p>
<p>在其中某个操作失败或出现异常时，调用 rollback(); 方法回滚事务</p>
<p>若此时 Connection 没有被关闭, 则需要恢复其自动提交状态 setAutoCommit(true);</p>
<p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1、连接数据库</span></span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">			String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">			String user = <span class="string">"root"</span>;</span><br><span class="line">			String password = <span class="string">"root"</span>;</span><br><span class="line">			conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">			<span class="comment">//设置手动提交</span></span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">			String sql1 = <span class="string">"update t_department set description = ? where did = ?"</span>;</span><br><span class="line">			PreparedStatement pst1 = conn.prepareStatement(sql1);</span><br><span class="line">			pst1.setObject(<span class="number">1</span>, <span class="string">"挣大钱的"</span>);</span><br><span class="line">			pst1.setObject(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">			<span class="keyword">int</span> len1 = pst1.executeUpdate();</span><br><span class="line">			System.out.println(len1&gt;<span class="number">0</span>?<span class="string">"更新部门信息成功"</span>:<span class="string">"更新部门信息失败"</span>);</span><br><span class="line">			pst1.close();</span><br><span class="line">			</span><br><span class="line">			String sql2 = <span class="string">"update t_employee set salary = salary + ? where did = ?"</span>;</span><br><span class="line">			PreparedStatement pst2 = conn.prepareStatement(sql2);</span><br><span class="line">			pst2.setObject(<span class="number">1</span>, <span class="number">20000</span>);</span><br><span class="line">			pst2.setObject(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">			<span class="keyword">int</span> len2 = pst2.executeUpdate();</span><br><span class="line">			System.out.println(len2&gt;<span class="number">0</span>?<span class="string">"更新部门信息成功"</span>:<span class="string">"更新部门信息失败"</span>);</span><br><span class="line">			pst2.close();</span><br><span class="line">			</span><br><span class="line">			conn.commit();</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">					conn.rollback();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="comment">//恢复自动提交</span></span><br><span class="line">					conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">					<span class="comment">//释放连接</span></span><br><span class="line">					conn.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb数据库</title>
    <url>/2021/02/01/Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的，它遵循<a href="https://baike.baidu.com/item/CAP%E5%8E%9F%E5%88%99/5712863?fr=aladdin" target="_blank" rel="noopener">CAP原理</a>。</p>
<p>文档的数据结构和JSON基本一样。<br>所有存储在集合中的数据都是BSON格式。<br>BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。</p>
<a id="more"></a>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>MongoDB中的记录是一个文档，它是由字段和值(key=&gt;value)对组成的数据结构。 MongoDB文档与JSON对象相似。 字段的值可能包括其他文档，数组和文档数组。</p>
<p>在mongodb中基本的概念是文档(document)、集合(collection)、数据库(database)。</p>
<table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>Field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>Index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接,MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary  key</td>
<td>主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody></table>
<h2 id="开启mongo进程"><a href="#开启mongo进程" class="headerlink" title="开启mongo进程"></a>开启mongo进程</h2><p>启动：sudo mongod –dbpath /home/ubuntu/mongodb/data –logpath /home/ubuntu/mongodb/log/mongodb.log –logappend &amp;(注意用户名为ubuntu)</p>
<p>查看进程：pgrep mongo -l</p>
<p>开始使用MongoDB：mongo -host 127.0.0.1:27017</p>
<p>进入shell窗口：mongo</p>
<h2 id="开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）"><a href="#开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）" class="headerlink" title="开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）"></a>开始（关于mongodb新建，插入数据，删除数据库及集合的创建，查看，重命名及删除等）</h2><p>1、进入mongodb shell</p>
<p>执行命令进入mongodb shell（注意这里mongod的服务已经启动），命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>

<h2 id="MongoDB-创建数据库"><a href="#MongoDB-创建数据库" class="headerlink" title="MongoDB 创建数据库"></a>MongoDB 创建数据库</h2><p>MongoDB 创建数据库的语法格式如下：</p>
<p>use “DATABASE_NAME”</p>
<p>如果数据库不存在，则创建数据库，否则切换到指定数据库。</p>
<p>例如：以下命令创建了数据库 Employee:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Employee;</span><br></pre></td></tr></table></figure>

<p>如果想查看所有数据库，可以使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs;</span><br></pre></td></tr></table></figure>



<p>可以看到，刚创建的数据库 Employee 并不在数据库的列表中， 要显示它，需要向 Employee 数据库插入一些数据。</p>
<p>插入集合 myEmploy，文档{“name”:”google”}，并查看数据库；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createCollection(&#39;myEmploy&#39;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myEmploy.insert(&#123;&quot;name&quot;:&quot;google&quot;&#125;)db.myEmploy.insert(&#123;&quot;name&quot;:&quot;google&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>截图如下：</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130258.png" alt="image-20201028153341256"></p>
<h2 id="MongoDB-删除数据库"><a href="#MongoDB-删除数据库" class="headerlink" title="MongoDB 删除数据库"></a>MongoDB 删除数据库</h2><p>删除当前数据库，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure>



<p>首先，使用 命令查看所有数据库，然后用use切换到数据库Employee，再进行删除操作，最后使用show查看数据库是否删除成功，操作步骤如图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Employee</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<p>截图如下：</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130303.png" alt="image-20201028153815419"></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130308.png" alt="image-20201028153825023"></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130312.png" alt="image-20201028153835638"></p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210201130315.png" alt="image-20201028153844313"></p>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>命令格式：db.createCollection(name, options)</p>
<p>例如在myDB数据库下创建myCollection集合，</p>
<p>执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use myDB</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createCollection(&#39;myCollection&#39;)</span><br></pre></td></tr></table></figure>

<p>查询数据库中所有的集合使用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.getCollectionNames()</span><br></pre></td></tr></table></figure>

<p>对集合重命名使用renameCollection方法，重命名为 myColl 如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.renameCollection(&#39;myColl&#39;)</span><br></pre></td></tr></table></figure>

<p>删除集合，然后查看集合状态，如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.drop()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.status()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>java命名规范</title>
    <url>/2021/02/02/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="java命名规范"><a href="#java命名规范" class="headerlink" title="java命名规范"></a>java命名规范</h1><p>记录一下java常见的一些命名规范，命名规范真的很重要，当你的项目给别人用的时候，一旦你的命名不规范，别人根本就看不懂你写的是什么，此时命名的规范性就显得尤为重要了，方便你也方便别人，何乐而不为呢？科普一波：驼峰命名法（Camel-Case）是电脑程式编写时的一套命名规则（惯例）。驼峰命名法的命名规则可视为一种惯例，并无绝对与强制，为的是增加识别和可读性。</p>
<a id="more"></a>

<h2 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1.命名规范"></a>1.命名规范</h2><p>大驼峰命名（UpperCamelCase）：每个单词的第一个字母大写，其他字母小写。</p>
<p>比如：public class DataBaseUser;</p>
<p>小驼峰命名（lowerCamelCase）：如果仅有一个单词，那么所有字母全部小写，如果是两个及以上的单词组成的名称，那么除了第一个单词是全部小写外，其他但是的首字母大写，其他字母小写。</p>
<p>比如：int myStudentCount;</p>
<h3 id="1-1-包的命名"><a href="#1-1-包的命名" class="headerlink" title="1.1 包的命名"></a>1.1 包的命名</h3><p>包的命名由全部小写的单词组成。</p>
<h3 id="1-2-类的命名"><a href="#1-2-类的命名" class="headerlink" title="1.2 类的命名"></a>1.2 类的命名</h3><p>类的命名遵循大驼峰命名的规则</p>
<h3 id="1-3-接口的命名"><a href="#1-3-接口的命名" class="headerlink" title="1.3 接口的命名"></a>1.3 接口的命名</h3><p>接口命名遵循大驼峰命名的规则，</p>
<h3 id="1-4-变量命名"><a href="#1-4-变量命名" class="headerlink" title="1.4 变量命名"></a>1.4 变量命名</h3><p>变量的命名遵循小驼峰命名的规则，一般是名词</p>
<h3 id="1-5-常量的命名"><a href="#1-5-常量的命名" class="headerlink" title="1.5 常量的命名"></a>1.5 常量的命名</h3><p>常量名称的每个单词都大写，并且每个单词之间通过下划线（_）连接，例如：</p>
<p>Public static final int REQUEST_KEY_CODE =1;</p>
<h3 id="1-6-方法的命名"><a href="#1-6-方法的命名" class="headerlink" title="1.6 方法的命名"></a>1.6 方法的命名</h3><p>方法的命名遵循小驼峰命名的规则，以动词+名词的方式组成，</p>
<p>例如初始化view：initView()</p>
<p>转换为字符串public void toString() </p>
<h3 id="1-7项目名"><a href="#1-7项目名" class="headerlink" title="1.7项目名"></a>1.7项目名</h3><p>全部小写。如：workdesk、jobserver。</p>
<h3 id="1-8属性文件properties"><a href="#1-8属性文件properties" class="headerlink" title="1.8属性文件properties"></a>1.8属性文件properties</h3><p>以下划线隔开。如：errors_zh_CN.properties，hibernate_test.properties</p>
<h3 id="1-9参数的命名"><a href="#1-9参数的命名" class="headerlink" title="1.9参数的命名"></a>1.9参数的命名</h3><p>参数的命名规范和方法的命名规范相同，而且为了避免阅读程序时造成迷惑，请在尽量保证参数名称为一个单词的情况下使参数的命名尽可能明确。</p>
<h2 id="2-格式规范"><a href="#2-格式规范" class="headerlink" title="2. 格式规范"></a><strong>2. 格式规范</strong></h2><h3 id="2-1大括号的使用"><a href="#2-1大括号的使用" class="headerlink" title="2.1大括号的使用"></a>2.1大括号的使用</h3><p>大括号的开始在代码块开始的行尾，结束在代码块同一缩进的行首；</p>
<p>条件语句一定使用大括号；</p>
<p>左大括号前不换行，右大括号前换行，除了if-else，try-catch;</p>
<p>大括号内没有任何代码，不换行。</p>
<h3 id="2-2-空格的使用"><a href="#2-2-空格的使用" class="headerlink" title="2.2 空格的使用"></a>2.2 空格的使用</h3><p>表示分隔时用一个空格；</p>
<p>运算符两边用一个空格隔开；</p>
<p>逗号语句后面如果不换行，也用一个空格。</p>
<h2 id="3-编码风格规范"><a href="#3-编码风格规范" class="headerlink" title="3. 编码风格规范"></a><strong>3.</strong> <strong>编码风格规范</strong></h2><p>3.1程序块要采用缩进风格编写，缩进的空格数为4个即Tab键</p>
<p>3.2多个短语句写在一行，即一行只写一条语句</p>
<p>3.3if, for, do, while, case, switch, default 等语句自占一行，且if, for, do, while等语句的执行语句无论多少都要加括号{}。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2021/02/02/java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="java基础语法的总结"><a href="#java基础语法的总结" class="headerlink" title="java基础语法的总结"></a>java基础语法的总结</h1><p>学习了java两年左右了，为了复习的方便，对java基础进行了一些总结，包括以下几个方面：</p>
<ol>
<li><strong>注释、标识符、关键字</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>类型转换</strong></li>
<li><strong>变量、常量</strong></li>
<li><strong>运算符</strong></li>
<li><strong>包机制、JavaDoc</strong></li>
</ol>
<a id="more"></a>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li>注释并不会被执行，是给我们写代码的人看的</li>
<li><strong>书写注释是一个非常好的习惯</strong></li>
<li><strong>平时写代码一定要注意规范</strong></li>
</ul>
<h3 id="java中的注释有三种："><a href="#java中的注释有三种：" class="headerlink" title="java中的注释有三种："></a>java中的注释有三种：</h3><ul>
<li>单行注释 //</li>
<li>多行注释 /* */</li>
<li>文档注释 /** * */</li>
</ul>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><img src="https://gitee.com/summer502/img/raw/master/images/20210202152424.PNG" alt=""></p>
<p>关键字不能起名字</p>
<h4 id="JAVA-所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符"><a href="#JAVA-所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符" class="headerlink" title="JAVA 所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符"></a>JAVA 所以的组成部分都需要名字、类名、变量名以及方法名都被称为标识符</h4><h3 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h3><ul>
<li>所有的标识符都应该以字母（A-Z或者a-z），美元符($)，或者下划线（_）开始;”大小写十分敏感“</li>
<li>首字母之后可以是字母（A-Z或者a-z），美元符($)，或者下划线（_）或者数字的任何字符组合;“特殊符号不能使用”</li>
<li><strong>不能使用关键字作为变量名或者方法名。</strong></li>
<li>合法标识符举例：age、 $salary、 _value、 __1_value</li>
<li>非法标识符举例：123abc、 -salary、 #abc</li>
<li>可以使用中文命名，但是一般不建议这样去使用，也不建议使用拼音，很Low</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h3><ul>
<li>要求变量的使用要严格符合规定，所有变量都必须先定以后才能使用；安全性高，但速度慢。</li>
</ul>
<h3 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h3><h3 id="Java的数据类型分为两大类"><a href="#Java的数据类型分为两大类" class="headerlink" title="Java的数据类型分为两大类"></a>Java的数据类型分为两大类</h3><ul>
<li><p><strong>基本类型（primitive type）</strong></p>
<p>整数<br>byte 1字节 8位 java范围2（7）-1到-2（7）<br>short 2字节 很少使用 2（15）-1到-2（15）<br>int 4字节 最常用 2（31）-1到-2（31）<br>long 8字节 长整形 2（63）-1到-2（63）</p>
<p>小数<br>float 4字节<br>double 8字节</p>
<p>其它<br>char 2字节 无符号 2（15）-1<br>boolean 1字节 代表真true or 假false</p>
</li>
</ul>
<p><strong>引用类型（reference type）</strong></p>
<p>String 字符串 数组  类 接口</p>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210202172715.png" alt="image-20210202172711205"></p>
<h3 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h3><ul>
<li><strong>位（bit）:是计算机 内部数据 储存的最小单位，11001100是一个八位二进制数。</strong></li>
<li><strong>字节（byte）：是计算机中 数据处理 的基本单位，习惯上用大写B来表示。</strong></li>
<li><strong>1B（byte,字节） = 8bit（位）</strong></li>
<li><strong>字符：是指计算机中使用的字母、数字、字和符号</strong></li>
<li>1bit表示1位</li>
<li>1Byte表示一个字节 1B=8b</li>
<li>1024B=1KB</li>
<li>1024KB=1M</li>
<li>1024M=1G</li>
</ul>
<h3 id="整数拓展："><a href="#整数拓展：" class="headerlink" title="整数拓展："></a>整数拓展：</h3><h4 id="进制："><a href="#进制：" class="headerlink" title="进制："></a>进制：</h4><ul>
<li><p>二进制0b （Integer.toBinaryString）二进制代码</p>
<p>1010转换0* 2（0）+1* 2（1）+0* 2（2）+1* 2（3）=0+2+0+8===&gt;10</p>
</li>
<li><p>十进制</p>
<p>(1011)2次方，转换1* 2(3)+0* 2（2）+1* 2（1）+1* 2（0）=8+0+2+1=11（11）10次方</p>
<p>123转换3* 10（0）+2* 10（1）+1* 10（2）=3+20+100</p>
</li>
<li><p>八进制0 (0-7)</p>
<p>067转换7* 8（0）+6* 8（1）=48+7=（55）10次方</p>
</li>
<li><p>十六进制0x 0-9 A-F(10-16) （Integer.toHexString）十六进制代码</p>
<p>转换10* 16（0）+15* 16（1）+14* 16（2）+9* 16（3）=10+240+3584+36864</p>
</li>
</ul>
<h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><h5 id="n进制转换10进制"><a href="#n进制转换10进制" class="headerlink" title="n进制转换10进制"></a>n进制转换10进制</h5><p><strong>公式：第一位* n(0）+第二位* n（1）+…+第x位* n（x-1)次方</strong></p>
<p> 二进制转十进制<br>​ 十进制转二进制<br>​ 十进制 二进制<br>​</p>
<h5 id="10进制转2进制"><a href="#10进制转2进制" class="headerlink" title="10进制转2进制"></a>10进制转2进制</h5><ul>
<li><p><strong>短除法：</strong></p>
<p>35：（35/2=17（余1）/2=8（1）/2=4（0）/2=2（0）/2=1（0）/2=0（1）反读）=100011<br>100011 1* 2（0）+1* 2（1）+0* 2（2）+1* 2（5）=1+2+32=35（正向的）</p>
</li>
<li><p><strong>找次方数：</strong></p>
<p>35：35-2（5）=3-2（1）=1-2（0）=100011（有数的次方上加1，没有的补0）</p>
<p>216：216-2（7）=88-2（6）=24-2（4）=8-2（3）=11011000</p>
</li>
</ul>
<h4 id="负数转换"><a href="#负数转换" class="headerlink" title="负数转换"></a>负数转换</h4><p>java采用二进制补码方式<br>0000 0<br>0001 1<br>0010 2<br>0011 3<br>0100 4<br>0101 5<br>0110 6<br>0111 7<br>把1开头的认为负数<br>1000 -8<br>1001 -7<br>1010 -6<br>1011 -5<br>1100 -4<br>1101 -3<br>1110 -2<br>1111 -1</p>
<h3 id="浮点数拓展："><a href="#浮点数拓展：" class="headerlink" title="浮点数拓展："></a>浮点数拓展：</h3><ul>
<li>float; double 不够准确； 实际过程中浮点数无限且离散的，但是float是有限的，他会自动舍入误差，大约接近，但不等于；</li>
<li>银行等准确的计算工具最好使用BigDecimal 数学工具类</li>
<li><strong>精确的对账最好完全避免使用浮点数进行比较</strong></li>
<li><strong>精确的对账最好完全避免使用浮点数进行比较</strong></li>
<li><strong>精确的对账最好完全避免使用浮点数进行比较</strong></li>
</ul>
<h3 id="字符拓展："><a href="#字符拓展：" class="headerlink" title="字符拓展："></a>字符拓展：</h3><p>所有的字符本质还是数字</p>
<p>Java使用Unicode字符集编码,格式’\u0000’-’\uffff’</p>
<p>（Unicode是世界通用的定长字符集，所有的字符都是16位，2个字节）</p>
<p>对于不方便输入的字符采用转义字符表示</p>
<p><strong>转义字符：</strong></p>
<p>如：’\n’“换行”,‘\t’“空格”，‘\’,‘\b’,‘\r’,‘“’,‘\u4e2d’.<br>数字编码：‘0’：48，‘1’: 49…<br>英文编码：‘A’：65，‘B’：66…<br>小写英文：‘a’ : 97，‘b’：98…</p>
<h4 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h4><ul>
<li><p><strong>由于Java是强类型语言，所有需要有些运算的时候的，需要用到类型转换。</strong></p>
<p><strong>低 ————————————————————–&gt;高</strong></p>
<p>byte， short， char -&gt; int -&gt; long -&gt; float -&gt; double</p>
<p> （小数的优先级高于整数）</p>
</li>
<li><p><strong>运算中，不同类型的数据先转换为同一类型，然后进行运算。</strong></p>
</li>
<li><p><strong>强制类型转换</strong> 高 - - 低</p>
<p>​        int i=128；</p>
<p>​        byte a=（byte）i；（强制转换 把高转低）</p>
</li>
<li><p><strong>自动类型转换</strong></p>
<p>由低到高直接输入，无需强制转换</p>
</li>
<li><p><strong>注意</strong></p>
<ol>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换为不相干的类型</li>
<li>在把高容量转换到低容量的时候，需要强制转换</li>
<li>转换的时候可能存在内存溢出，或者精度问题！</li>
</ol>
</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li><strong>变量是什么：就是可以变化的量！</strong></li>
<li><strong>Java是一种强类型语言，每个变量都必须声明其类型。</strong></li>
<li><strong>Java变量是程序中最基层的存储单元，其要素包括变量名，变量类型和作用域。</strong></li>
<li><strong>注意事项：</strong><ul>
<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li>
<li>变量名必须是合法的标识符。</li>
<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li>
</ul>
</li>
</ul>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul>
<li><p><strong>类变量</strong></p>
<p>在类里，整个类里可以使用，前面必须加static；“static int a = 666;”</p>
</li>
<li><p><strong>实例变量</strong></p>
<p>在类里，从属于对象；“int age;//0”</p>
<p>如果不自行初始化，会赋予这个类型的默认值 0,0.0</p>
<p>布尔值：默认是false；除了基本类型，其他的默认值都是null；</p>
</li>
<li><p><strong>局部变量</strong></p>
<p>在方法中，使用时<strong>必须声明和初始化值</strong>；“int cba = 666;”</p>
</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul>
<li><p><strong>常量（Constant)：初始化（initialize）后不能再改变值！不会变动的值。</strong></p>
</li>
<li><p><strong>所谓常量可以理解成一种特殊的变量，他的值被设定后，在程序运行过程中不允许被改变。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> 常量名 = 值；</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>常量名一般使用大写字符。</strong></p>
</li>
</ul>
<h4 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h4><ul>
<li><strong>所有变量、方法、类名：见名知意</strong></li>
<li><strong>类成员变量：首字母小写和驼峰原则：monthSalary</strong></li>
<li><strong>除了第一个单词外，后面的单词首字母大写</strong></li>
<li><strong>局部变量：首字母小写和驼峰原则</strong></li>
<li><strong>常量：大写字母和下划线 MAX_VALUE</strong></li>
<li><strong>类名：首字母大写和驼峰原则：Man,GoodMan</strong></li>
<li><strong>方法名：首字母小写和驼峰原则：run(),runRun()</strong></li>
</ul>
<p>（可参考我的另一篇博客：java命名规范）</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><p><strong>Java语言支持如下运算符：优先级：最好使用（）</strong></p>
<ul>
<li><p>算术运算符：+，-，*，/，%（余），++（自增），–（自减）；</p>
</li>
<li><p>赋值运算符：=；</p>
</li>
<li><p>关系运算符：&gt; , &lt; , &gt;= , &lt;= , == , != , instanceof；</p>
<p>计算结果一定是true or false；以后会和if一起用</p>
</li>
<li><p>逻辑运算符：&amp;&amp; （与）， ||（或）， ！（非）；</p>
<p>计算结果一定是true or false</p>
</li>
<li><p>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;；</p>
</li>
<li><p>条件运算符：？，：；</p>
</li>
<li><p>扩展赋值运算符：+=，-=，*=，/=；</p>
</li>
</ul>
<h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><p><strong>++（自增）</strong></p>
<p>a++:++在后时，先赋值，再自增；</p>
<p>++a:++在前时，先自增，再赋值；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;<span class="comment">//a++加在后，先给b赋值，再自增；</span></span><br><span class="line">System.out.println(a);<span class="comment">//a=6</span></span><br><span class="line">System.out.println(b);<span class="comment">//b=5</span></span><br><span class="line">================================================</span><br><span class="line"><span class="keyword">int</span> c = ++a;<span class="comment">//++a加在前，先自增，再赋值给c；</span></span><br><span class="line">System.out.println(a);<span class="comment">//a=6;</span></span><br><span class="line">System.out.println(c);<span class="comment">//c=6;</span></span><br></pre></td></tr></table></figure>

<p><strong>–（自减）同理</strong></p>
</li>
<li><p>注意事项：</p>
<ul>
<li>算术运算符使用中，有一个为long或者double类型，其结果为long或者double类型，不然为int类型。</li>
<li>很多运算java，会使用一些很多工具类来操作</li>
</ul>
<h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><ul>
<li>&amp;&amp; （与）：逻辑与运算，两个变量都为真，结果才为true</li>
<li>||（或）：逻辑或运算，两个变量有一个为真，结果才为true</li>
<li>！（非）：如果是真，则变为假，如果是假则变为真</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> q = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>  w = <span class="number">20</span>;</span><br><span class="line">System.out.println(q&lt;w &amp;&amp; w&gt;<span class="number">30</span>);<span class="comment">//（false)，q&lt;w正确，w&gt;30错误,</span></span><br><span class="line"><span class="comment">// 可解释为:q&lt;w与w&gt;30同时两条成立，结果为true，所以最后结果为"false"</span></span><br><span class="line">System.out.println(q&lt;w || w&gt;<span class="number">30</span>);<span class="comment">//（true),q&lt;w正确，w&gt;30错误,</span></span><br><span class="line"><span class="comment">// 可以解释为:q&lt;w或w&gt;30其中一条成立，结果就为true，所以最后结果为"true"</span></span><br><span class="line">System.out.println(!(q&lt;w));<span class="comment">//（false),q&lt;w正确。</span></span><br><span class="line"><span class="comment">// 可以解释为:q应该不（非）小于w，但是实际上q&lt;w，所以为”false"</span></span><br></pre></td></tr></table></figure>

<h5 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h5><p>当前面为“false”时，后面的将不执行，只有“true”才会运行，这就叫短路运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> z = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">boolean</span> x = (z&lt;<span class="number">4</span>)&amp;&amp;(z++&lt;<span class="number">4</span>);<span class="comment">//由于（z&lt;4）不成立为false，（z++&lt;4)就不运行</span></span><br><span class="line">System.out.println(x);<span class="comment">//(false)</span></span><br><span class="line">System.out.println(z);<span class="comment">//(5)由于（z++&lt;4)没有运算，所以z没有自增</span></span><br></pre></td></tr></table></figure>

<h5 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h5><p>&amp; （1）：全部为1才为1，否者为0</p>
<p>| （0）：全部为0才为0，否者为1</p>
<p>^（同0）：相同为0，否者为1</p>
<p>~（取反）：取二进制相反的数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> A = <span class="number">1100</span> <span class="number">0011</span></span><br><span class="line"> B = <span class="number">1001</span> <span class="number">0110</span></span><br><span class="line">---------------</span><br><span class="line">A&amp;B= <span class="number">1000</span> <span class="number">0010</span></span><br><span class="line">A|B= <span class="number">1101</span> <span class="number">0111</span></span><br><span class="line">A^B= <span class="number">0101</span> <span class="number">0101</span></span><br><span class="line">~B = <span class="number">0110</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure>

<p>“&lt;&lt;”二进制左位移=代表*2</p>
<p>“&gt;&gt;”二进制右位移=代表/2</p>
<h5 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h5><p>+=，-=，*=，/=;()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">a+=b;<span class="comment">//a=a+b(15)</span></span><br><span class="line">a-=b;<span class="comment">//a=a-b(-5)</span></span><br><span class="line">a*=b;<span class="comment">//a=a*b(50)</span></span><br><span class="line">a/=b;<span class="comment">//a=a/b(0.5)</span></span><br></pre></td></tr></table></figure>

<h5 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h5><p>在“+”号前出现string类型时，他会把“+”后面的一操作数，转换成string类型，进行拼接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">"yes"</span>+a+b);<span class="comment">//(yes520)</span></span><br><span class="line">System.out.println(a+b+<span class="string">"yes"</span>);<span class="comment">//(25yes)</span></span><br><span class="line">System.out.println(<span class="string">"yes"</span>+(a+b));<span class="comment">//(yes25)</span></span><br><span class="line">System.out.println(<span class="string">""</span>+a+b+<span class="string">"yes"</span>);<span class="comment">//(520yes)</span></span><br><span class="line">System.out.println(<span class="string">""</span>+a+b+(a+b)+<span class="string">"yes"</span>);<span class="comment">//(52025yes)</span></span><br></pre></td></tr></table></figure>

<h5 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h5><p>x？ y：z //x值如果为true=y，如果为false=z；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> xm = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">int</span> xg = <span class="number">49</span>;</span><br><span class="line"><span class="keyword">int</span> xh = <span class="number">60</span>;</span><br><span class="line">System.out.println(<span class="string">"xm:"</span>+(xm&gt;=score ?<span class="string">"及格"</span>:<span class="string">"不及格"</span>));<span class="comment">//(xm:及格)</span></span><br><span class="line">System.out.println(<span class="string">"xg:"</span>+(xg&gt;=score ?<span class="string">"及格"</span>:<span class="string">"不及格"</span>));<span class="comment">//(xg:及格)</span></span><br><span class="line">System.out.println(<span class="string">"xh:"</span>+(xh&gt;=score ?<span class="string">"及格"</span>:<span class="string">"不及格"</span>));<span class="comment">//(xh:及格)</span></span><br></pre></td></tr></table></figure>

<p>后期可以使用”if”做</p>
<p><strong>注意：byte类型再相加的时候，会自动转换成int类型</strong></p>
</li>
<li><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3></li>
</ul>
<p>“包的本质就是文件夹”</p>
<ul>
<li><p><strong>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。</strong></p>
</li>
<li><p><strong>包语句的语法格式为：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3...]]<span class="comment">//定义包</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一般利用公司域名倒置作为包名；</strong></p>
</li>
<li><p><strong>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用”import”完成此功能</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*);<span class="comment">//导入包，*导入这个包下所以的类</span></span><br></pre></td></tr></table></figure>

<p>尽量不要把包名字重复</p>
<h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><ul>
<li><p><strong>javadoc命令是用来生成自己API文档的</strong></p>
</li>
<li><p><strong>参数信息</strong></p>
<ul>
<li><strong>@author 作者名</strong></li>
<li><strong>@version 版本号</strong></li>
<li><strong>@since 指明需要最早使用的jdk版本</strong></li>
<li><strong>@param 参数名</strong></li>
<li><strong>@return 返回值情况</strong></li>
<li><strong>@throws 异常抛出情况</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>生产文档：javadic+参数+java文件</p>
<p>javadoc -encoding UTF-8 -charset UTF-8 Doc.java</p>
</li>
</ul>
<h3 id="如何在IDEA中生成一个Javadoc文档"><a href="#如何在IDEA中生成一个Javadoc文档" class="headerlink" title="如何在IDEA中生成一个Javadoc文档"></a>如何在IDEA中生成一个Javadoc文档</h3><ol>
<li>首先新建一个文件夹，用于存放要生成的Javadoc文档。</li>
<li>接下来点击IntelliJ IDEA顶部的Tools菜单，选择Generate JavaDoc选项，如下图所示<img src="https://gitee.com/summer502/img/raw/master/images/20210202211246.png" alt="在这里插入图片描述"></li>
<li>然后在弹出的界面中我们点击Output directory输入框后面的按钮，如下图所示<br><img src="https://gitee.com/summer502/img/raw/master/images/20210202211926.png" alt="image-20210202211856819"></li>
<li>在弹出的选择文件夹界面中选择刚才新建的文件夹</li>
<li>接下来在底部的Locale输入框配置语言和编码集，如下图所示，语言用zh_CN，代表中文</li>
</ol>
<blockquote>
<p>-encoding utf-8 -charset utf-8</p>
</blockquote>
<p><img src="https://gitee.com/summer502/img/raw/master/images/20210202212017.png" alt="image-20210202212015000"></p>
<ol>
<li>然后点击确定以后我们就等待IntelliJ IDEA给我们生成JavaDoc文档即可，等到输出栏出现如下图所示的提示代表生成完毕</li>
</ol>
<p>7.接下来我们打开JavaDoc文件夹，找到index.html文件,点击就能看到API文档。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
</search>
